
fsbb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bec  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009dc4  08009dc4  0000adc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e04  08009e04  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  08009e04  08009e04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e0c  08009e0c  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e0c  08009e0c  0000ae0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e10  08009e10  0000ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08009e14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000588  2000000c  08009e20  0000b00c  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000594  08009e20  0000b594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024030  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000406c  00000000  00000000  0002f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  000330d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001795  00000000  00000000  00034f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4a3  00000000  00000000  000366bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000247ac  00000000  00000000  00062b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001361dc  00000000  00000000  0008730c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bd4e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008354  00000000  00000000  001bd52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001c5880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009dac 	.word	0x08009dac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08009dac 	.word	0x08009dac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f009 fc16 	bl	8009d52 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b4e      	ldr	r3, [pc, #312]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b4c      	ldr	r3, [pc, #304]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b4a      	ldr	r3, [pc, #296]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b48      	ldr	r3, [pc, #288]	@ (8000660 <MX_ADC1_Init+0x158>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b47      	ldr	r3, [pc, #284]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000548:	4b45      	ldr	r3, [pc, #276]	@ (8000660 <MX_ADC1_Init+0x158>)
 800054a:	2201      	movs	r2, #1
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800054e:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000550:	2208      	movs	r2, #8
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b42      	ldr	r3, [pc, #264]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055a:	4b41      	ldr	r3, [pc, #260]	@ (8000660 <MX_ADC1_Init+0x158>)
 800055c:	2201      	movs	r2, #1
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8000560:	4b3f      	ldr	r3, [pc, #252]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000562:	2204      	movs	r2, #4
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b3e      	ldr	r3, [pc, #248]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 800056e:	4b3c      	ldr	r3, [pc, #240]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000570:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000574:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000576:	4b3a      	ldr	r3, [pc, #232]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000578:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800057c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800057e:	4b38      	ldr	r3, [pc, #224]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000580:	2201      	movs	r2, #1
 8000582:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000586:	4b36      	ldr	r3, [pc, #216]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000588:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800058c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 800058e:	4b34      	ldr	r3, [pc, #208]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000590:	2201      	movs	r2, #1
 8000592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000596:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000598:	220c      	movs	r2, #12
 800059a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800059c:	4b30      	ldr	r3, [pc, #192]	@ (8000660 <MX_ADC1_Init+0x158>)
 800059e:	2280      	movs	r2, #128	@ 0x80
 80005a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000660 <MX_ADC1_Init+0x158>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80005a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000660 <MX_ADC1_Init+0x158>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ae:	482c      	ldr	r0, [pc, #176]	@ (8000660 <MX_ADC1_Init+0x158>)
 80005b0:	f001 fcce 	bl	8001f50 <HAL_ADC_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80005ba:	f000 ff95 	bl	80014e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c6:	4619      	mov	r1, r3
 80005c8:	4825      	ldr	r0, [pc, #148]	@ (8000660 <MX_ADC1_Init+0x158>)
 80005ca:	f003 f875 	bl	80036b8 <HAL_ADCEx_MultiModeConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80005d4:	f000 ff88 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <MX_ADC1_Init+0x15c>)
 80005da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005dc:	2306      	movs	r3, #6
 80005de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80005e0:	2305      	movs	r3, #5
 80005e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e4:	237f      	movs	r3, #127	@ 0x7f
 80005e6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e8:	2304      	movs	r3, #4
 80005ea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4619      	mov	r1, r3
 80005f4:	481a      	ldr	r0, [pc, #104]	@ (8000660 <MX_ADC1_Init+0x158>)
 80005f6:	f002 f9af 	bl	8002958 <HAL_ADC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000600:	f000 ff72 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000604:	4b18      	ldr	r3, [pc, #96]	@ (8000668 <MX_ADC1_Init+0x160>)
 8000606:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000608:	230c      	movs	r3, #12
 800060a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <MX_ADC1_Init+0x158>)
 8000612:	f002 f9a1 	bl	8002958 <HAL_ADC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800061c:	f000 ff64 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_ADC1_Init+0x15c>)
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000624:	2312      	movs	r3, #18
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	480c      	ldr	r0, [pc, #48]	@ (8000660 <MX_ADC1_Init+0x158>)
 800062e:	f002 f993 	bl	8002958 <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000638:	f000 ff56 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_ADC1_Init+0x160>)
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000640:	2318      	movs	r3, #24
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_ADC1_Init+0x158>)
 800064a:	f002 f985 	bl	8002958 <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000654:	f000 ff48 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3730      	adds	r7, #48	@ 0x30
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028
 8000664:	2e300800 	.word	0x2e300800
 8000668:	3ac04000 	.word	0x3ac04000

0800066c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2220      	movs	r2, #32
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f009 fb6a 	bl	8009d52 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800067e:	4b47      	ldr	r3, [pc, #284]	@ (800079c <MX_ADC2_Init+0x130>)
 8000680:	4a47      	ldr	r2, [pc, #284]	@ (80007a0 <MX_ADC2_Init+0x134>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <MX_ADC2_Init+0x130>)
 8000686:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800068a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800068c:	4b43      	ldr	r3, [pc, #268]	@ (800079c <MX_ADC2_Init+0x130>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000692:	4b42      	ldr	r3, [pc, #264]	@ (800079c <MX_ADC2_Init+0x130>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000698:	4b40      	ldr	r3, [pc, #256]	@ (800079c <MX_ADC2_Init+0x130>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800069e:	4b3f      	ldr	r3, [pc, #252]	@ (800079c <MX_ADC2_Init+0x130>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	4b3d      	ldr	r3, [pc, #244]	@ (800079c <MX_ADC2_Init+0x130>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006aa:	4b3c      	ldr	r3, [pc, #240]	@ (800079c <MX_ADC2_Init+0x130>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006b0:	4b3a      	ldr	r3, [pc, #232]	@ (800079c <MX_ADC2_Init+0x130>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 80006b6:	4b39      	ldr	r3, [pc, #228]	@ (800079c <MX_ADC2_Init+0x130>)
 80006b8:	2204      	movs	r2, #4
 80006ba:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006bc:	4b37      	ldr	r3, [pc, #220]	@ (800079c <MX_ADC2_Init+0x130>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 80006c4:	4b35      	ldr	r3, [pc, #212]	@ (800079c <MX_ADC2_Init+0x130>)
 80006c6:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006cc:	4b33      	ldr	r3, [pc, #204]	@ (800079c <MX_ADC2_Init+0x130>)
 80006ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006d4:	4b31      	ldr	r3, [pc, #196]	@ (800079c <MX_ADC2_Init+0x130>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006dc:	4b2f      	ldr	r3, [pc, #188]	@ (800079c <MX_ADC2_Init+0x130>)
 80006de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	@ (800079c <MX_ADC2_Init+0x130>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 80006ec:	4b2b      	ldr	r3, [pc, #172]	@ (800079c <MX_ADC2_Init+0x130>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <MX_ADC2_Init+0x130>)
 80006f4:	2280      	movs	r2, #128	@ 0x80
 80006f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006f8:	4b28      	ldr	r3, [pc, #160]	@ (800079c <MX_ADC2_Init+0x130>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80006fe:	4b27      	ldr	r3, [pc, #156]	@ (800079c <MX_ADC2_Init+0x130>)
 8000700:	2201      	movs	r2, #1
 8000702:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000704:	4825      	ldr	r0, [pc, #148]	@ (800079c <MX_ADC2_Init+0x130>)
 8000706:	f001 fc23 	bl	8001f50 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8000710:	f000 feea 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <MX_ADC2_Init+0x138>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2306      	movs	r3, #6
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800071c:	2305      	movs	r3, #5
 800071e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000720:	237f      	movs	r3, #127	@ 0x7f
 8000722:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000724:	2304      	movs	r3, #4
 8000726:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <MX_ADC2_Init+0x130>)
 8000732:	f002 f911 	bl	8002958 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 800073c:	f000 fed4 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_ADC2_Init+0x13c>)
 8000742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000744:	230c      	movs	r3, #12
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_ADC2_Init+0x130>)
 800074e:	f002 f903 	bl	8002958 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC2_Init+0xf0>
  {
    Error_Handler();
 8000758:	f000 fec6 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_ADC2_Init+0x138>)
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000760:	2312      	movs	r3, #18
 8000762:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ADC2_Init+0x130>)
 800076a:	f002 f8f5 	bl	8002958 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC2_Init+0x10c>
  {
    Error_Handler();
 8000774:	f000 feb8 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000778:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <MX_ADC2_Init+0x13c>)
 800077a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800077c:	2318      	movs	r3, #24
 800077e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_ADC2_Init+0x130>)
 8000786:	f002 f8e7 	bl	8002958 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC2_Init+0x128>
  {
    Error_Handler();
 8000790:	f000 feaa 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000094 	.word	0x20000094
 80007a0:	50000100 	.word	0x50000100
 80007a4:	32601000 	.word	0x32601000
 80007a8:	36902000 	.word	0x36902000

080007ac <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f009 fac4 	bl	8009d52 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007cc:	4a3f      	ldr	r2, [pc, #252]	@ (80008cc <MX_ADC3_Init+0x120>)
 80007ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007d8:	4b3b      	ldr	r3, [pc, #236]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80007e4:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007ea:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b32      	ldr	r3, [pc, #200]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 2;
 8000802:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000804:	2202      	movs	r2, #2
 8000806:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b2f      	ldr	r3, [pc, #188]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG1;
 8000810:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000812:	f44f 62d4 	mov.w	r2, #1696	@ 0x6a0
 8000816:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 800081a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000822:	2201      	movs	r2, #1
 8000824:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 800082a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800082e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000832:	2201      	movs	r2, #1
 8000834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 800083a:	220c      	movs	r2, #12
 800083c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800083e:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000844:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000846:	2200      	movs	r2, #0
 8000848:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 800084c:	2201      	movs	r2, #1
 800084e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000850:	481d      	ldr	r0, [pc, #116]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000852:	f001 fb7d 	bl	8001f50 <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800085c:	f000 fe44 	bl	80014e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000868:	4619      	mov	r1, r3
 800086a:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 800086c:	f002 ff24 	bl	80036b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000876:	f000 fe37 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <MX_ADC3_Init+0x124>)
 800087c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800087e:	2306      	movs	r3, #6
 8000880:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000882:	2305      	movs	r3, #5
 8000884:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000886:	237f      	movs	r3, #127	@ 0x7f
 8000888:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088a:	2304      	movs	r3, #4
 800088c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 8000898:	f002 f85e 	bl	8002958 <HAL_ADC_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 80008a2:	f000 fe21 	bl	80014e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008a6:	230c      	movs	r3, #12
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	4619      	mov	r1, r3
 80008ae:	4806      	ldr	r0, [pc, #24]	@ (80008c8 <MX_ADC3_Init+0x11c>)
 80008b0:	f002 f852 	bl	8002958 <HAL_ADC_ConfigChannel>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC3_Init+0x112>
  {
    Error_Handler();
 80008ba:	f000 fe15 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3730      	adds	r7, #48	@ 0x30
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000100 	.word	0x20000100
 80008cc:	50000400 	.word	0x50000400
 80008d0:	14f00020 	.word	0x14f00020

080008d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0a4      	sub	sp, #144	@ 0x90
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f0:	2254      	movs	r2, #84	@ 0x54
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f009 fa2c 	bl	8009d52 <memset>
  if(adcHandle->Instance==ADC1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000902:	d174      	bne.n	80009ee <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000904:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800090a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800090e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000910:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000914:	4618      	mov	r0, r3
 8000916:	f006 ffb7 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000920:	f000 fde2 	bl	80014e8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000924:	4b7c      	ldr	r3, [pc, #496]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	4a7b      	ldr	r2, [pc, #492]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 800092c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800092e:	4b7a      	ldr	r3, [pc, #488]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d10b      	bne.n	800094e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000936:	4b79      	ldr	r3, [pc, #484]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a78      	ldr	r2, [pc, #480]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 800093c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b76      	ldr	r3, [pc, #472]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
 800094c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b73      	ldr	r3, [pc, #460]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a72      	ldr	r2, [pc, #456]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b70      	ldr	r3, [pc, #448]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	623b      	str	r3, [r7, #32]
 8000964:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_I_MOTOR_Pin|ADC_I_CHASSIS_Pin;
 8000966:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800096a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096c:	2303      	movs	r3, #3
 800096e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800097c:	4619      	mov	r1, r3
 800097e:	4868      	ldr	r0, [pc, #416]	@ (8000b20 <HAL_ADC_MspInit+0x24c>)
 8000980:	f003 fff0 	bl	8004964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000984:	4b67      	ldr	r3, [pc, #412]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 8000986:	4a68      	ldr	r2, [pc, #416]	@ (8000b28 <HAL_ADC_MspInit+0x254>)
 8000988:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800098a:	4b66      	ldr	r3, [pc, #408]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 800098c:	2205      	movs	r2, #5
 800098e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000990:	4b64      	ldr	r3, [pc, #400]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000996:	4b63      	ldr	r3, [pc, #396]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800099c:	4b61      	ldr	r3, [pc, #388]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 800099e:	2280      	movs	r2, #128	@ 0x80
 80009a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a2:	4b60      	ldr	r3, [pc, #384]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009aa:	4b5e      	ldr	r3, [pc, #376]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009b2:	4b5c      	ldr	r3, [pc, #368]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009b4:	2220      	movs	r2, #32
 80009b6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80009b8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009ba:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80009be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009c0:	4858      	ldr	r0, [pc, #352]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009c2:	f003 f891 	bl	8003ae8 <HAL_DMA_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80009cc:	f000 fd8c 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a54      	ldr	r2, [pc, #336]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80009d6:	4a53      	ldr	r2, [pc, #332]	@ (8000b24 <HAL_ADC_MspInit+0x250>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2012      	movs	r0, #18
 80009e2:	f003 f84c 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80009e6:	2012      	movs	r0, #18
 80009e8:	f003 f863 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80009ec:	e114      	b.n	8000c18 <HAL_ADC_MspInit+0x344>
  else if(adcHandle->Instance==ADC2)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a4e      	ldr	r2, [pc, #312]	@ (8000b2c <HAL_ADC_MspInit+0x258>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	f040 809f 	bne.w	8000b38 <HAL_ADC_MspInit+0x264>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a00:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f006 ff3c 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_ADC_MspInit+0x146>
      Error_Handler();
 8000a16:	f000 fd67 	bl	80014e8 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a3d      	ldr	r2, [pc, #244]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 8000a22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a24:	4b3c      	ldr	r3, [pc, #240]	@ (8000b18 <HAL_ADC_MspInit+0x244>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d10b      	bne.n	8000a44 <HAL_ADC_MspInit+0x170>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a30:	4a3a      	ldr	r2, [pc, #232]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a38:	4b38      	ldr	r3, [pc, #224]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a40:	61fb      	str	r3, [r7, #28]
 8000a42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b35      	ldr	r3, [pc, #212]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	4a34      	ldr	r2, [pc, #208]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a50:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	61bb      	str	r3, [r7, #24]
 8000a5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	4a2e      	ldr	r2, [pc, #184]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a68:	4b2c      	ldr	r3, [pc, #176]	@ (8000b1c <HAL_ADC_MspInit+0x248>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ADC_V_CAP_Pin;
 8000a74:	2320      	movs	r3, #32
 8000a76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(ADC_V_CAP_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f003 ff69 	bl	8004964 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_I_CAP_Pin;
 8000a92:	2304      	movs	r3, #4
 8000a94:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(ADC_I_CAP_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481d      	ldr	r0, [pc, #116]	@ (8000b20 <HAL_ADC_MspInit+0x24c>)
 8000aaa:	f003 ff5b 	bl	8004964 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ab0:	4a20      	ldr	r2, [pc, #128]	@ (8000b34 <HAL_ADC_MspInit+0x260>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ab6:	2224      	movs	r2, #36	@ 0x24
 8000ab8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aba:	4b1d      	ldr	r3, [pc, #116]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000acc:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ad6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ada:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ade:	2220      	movs	r2, #32
 8000ae0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000ae4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000aea:	4811      	ldr	r0, [pc, #68]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000aec:	f002 fffc 	bl	8003ae8 <HAL_DMA_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_ADC_MspInit+0x226>
      Error_Handler();
 8000af6:	f000 fcf7 	bl	80014e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000afe:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b00:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <HAL_ADC_MspInit+0x25c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f002 ffb7 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b10:	2012      	movs	r0, #18
 8000b12:	f002 ffce 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
}
 8000b16:	e07f      	b.n	8000c18 <HAL_ADC_MspInit+0x344>
 8000b18:	2000028c 	.word	0x2000028c
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	2000016c 	.word	0x2000016c
 8000b28:	40020008 	.word	0x40020008
 8000b2c:	50000100 	.word	0x50000100
 8000b30:	200001cc 	.word	0x200001cc
 8000b34:	4002001c 	.word	0x4002001c
  else if(adcHandle->Instance==ADC3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a38      	ldr	r2, [pc, #224]	@ (8000c20 <HAL_ADC_MspInit+0x34c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d16a      	bne.n	8000c18 <HAL_ADC_MspInit+0x344>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000b48:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000b4c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b52:	4618      	mov	r0, r3
 8000b54:	f006 fe98 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_ADC_MspInit+0x28e>
      Error_Handler();
 8000b5e:	f000 fcc3 	bl	80014e8 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8000b62:	4b30      	ldr	r3, [pc, #192]	@ (8000c24 <HAL_ADC_MspInit+0x350>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b66:	4a2f      	ldr	r2, [pc, #188]	@ (8000c24 <HAL_ADC_MspInit+0x350>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c24 <HAL_ADC_MspInit+0x350>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <HAL_ADC_MspInit+0x350>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a29      	ldr	r2, [pc, #164]	@ (8000c24 <HAL_ADC_MspInit+0x350>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <HAL_ADC_MspInit+0x350>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_V_MOTOR_Pin;
 8000b92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(ADC_V_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481f      	ldr	r0, [pc, #124]	@ (8000c28 <HAL_ADC_MspInit+0x354>)
 8000bac:	f003 feda 	bl	8004964 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <HAL_ADC_MspInit+0x35c>)
 8000bb4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bb8:	2225      	movs	r2, #37	@ 0x25
 8000bba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bca:	2280      	movs	r2, #128	@ 0x80
 8000bcc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bce:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bdc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000be0:	2220      	movs	r2, #32
 8000be2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000be6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000bea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000bec:	480f      	ldr	r0, [pc, #60]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000bee:	f002 ff7b 	bl	8003ae8 <HAL_DMA_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <HAL_ADC_MspInit+0x328>
      Error_Handler();
 8000bf8:	f000 fc76 	bl	80014e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000c00:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_ADC_MspInit+0x358>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	202f      	movs	r0, #47	@ 0x2f
 8000c0e:	f002 ff36 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c12:	202f      	movs	r0, #47	@ 0x2f
 8000c14:	f002 ff4d 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
}
 8000c18:	bf00      	nop
 8000c1a:	3790      	adds	r7, #144	@ 0x90
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	50000400 	.word	0x50000400
 8000c24:	40021000 	.word	0x40021000
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	2000022c 	.word	0x2000022c
 8000c30:	40020030 	.word	0x40020030

08000c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb4 <MX_DMA_Init+0x80>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cb4 <MX_DMA_Init+0x80>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c46:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_DMA_Init+0x80>)
 8000c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_DMA_Init+0x80>)
 8000c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c56:	4a17      	ldr	r2, [pc, #92]	@ (8000cb4 <MX_DMA_Init+0x80>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_DMA_Init+0x80>)
 8000c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	200b      	movs	r0, #11
 8000c70:	f002 ff05 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c74:	200b      	movs	r0, #11
 8000c76:	f002 ff1c 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f002 fefd 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c84:	200c      	movs	r0, #12
 8000c86:	f002 ff14 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200d      	movs	r0, #13
 8000c90:	f002 fef5 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000c94:	200d      	movs	r0, #13
 8000c96:	f002 ff0c 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2010      	movs	r0, #16
 8000ca0:	f002 feed 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ca4:	2010      	movs	r0, #16
 8000ca6:	f002 ff04 	bl	8003ab2 <HAL_NVIC_EnableIRQ>

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cbe:	4a20      	ldr	r2, [pc, #128]	@ (8000d40 <MX_FDCAN1_Init+0x88>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_FDCAN1_Init+0x84>)
 8000d2a:	f003 fa0f 	bl	800414c <HAL_FDCAN_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000d34:	f000 fbd8 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000290 	.word	0x20000290
 8000d40:	40006400 	.word	0x40006400

08000d44 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b09e      	sub	sp, #120	@ 0x78
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2254      	movs	r2, #84	@ 0x54
 8000d62:	2100      	movs	r1, #0
 8000d64:	4618      	mov	r0, r3
 8000d66:	f008 fff4 	bl	8009d52 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a28      	ldr	r2, [pc, #160]	@ (8000e10 <HAL_FDCAN_MspInit+0xcc>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d149      	bne.n	8000e08 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d78:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000d7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	4618      	mov	r0, r3
 8000d86:	f006 fd7f 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000d90:	f000 fbaa 	bl	80014e8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <HAL_FDCAN_MspInit+0xd0>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d98:	4a1e      	ldr	r2, [pc, #120]	@ (8000e14 <HAL_FDCAN_MspInit+0xd0>)
 8000d9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <HAL_FDCAN_MspInit+0xd0>)
 8000da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_FDCAN_MspInit+0xd0>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db0:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_FDCAN_MspInit+0xd0>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_FDCAN_MspInit+0xd0>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000dc4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000dc8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000dd6:	2309      	movs	r3, #9
 8000dd8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de4:	f003 fdbe 	bl	8004964 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2015      	movs	r0, #21
 8000dee:	f002 fe46 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000df2:	2015      	movs	r0, #21
 8000df4:	f002 fe5d 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2016      	movs	r0, #22
 8000dfe:	f002 fe3e 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000e02:	2016      	movs	r0, #22
 8000e04:	f002 fe55 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3778      	adds	r7, #120	@ 0x78
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40006400 	.word	0x40006400
 8000e14:	40021000 	.word	0x40021000

08000e18 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <MX_FMAC_Init+0x20>)
 8000e1e:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <MX_FMAC_Init+0x24>)
 8000e20:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_FMAC_Init+0x20>)
 8000e24:	f003 fcf2 	bl	800480c <HAL_FMAC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000e2e:	f000 fb5b 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200002f4 	.word	0x200002f4
 8000e3c:	40021400 	.word	0x40021400

08000e40 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <HAL_FMAC_MspInit+0x38>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10b      	bne.n	8000e6a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_FMAC_MspInit+0x3c>)
 8000e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e56:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <HAL_FMAC_MspInit+0x3c>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_FMAC_MspInit+0x3c>)
 8000e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	40021000 	.word	0x40021000

08000e80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eae:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000eb4:	f043 0320 	orr.w	r3, r3, #32
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	4a17      	ldr	r2, [pc, #92]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed2:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_GPIO_Init+0xa8>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efc:	480b      	ldr	r0, [pc, #44]	@ (8000f2c <MX_GPIO_Init+0xac>)
 8000efe:	f003 feb3 	bl	8004c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000f02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4804      	ldr	r0, [pc, #16]	@ (8000f2c <MX_GPIO_Init+0xac>)
 8000f1c:	f003 fd22 	bl	8004964 <HAL_GPIO_Init>

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	48000800 	.word	0x48000800

08000f30 <MX_HRTIM1_Init>:

HRTIM_HandleTypeDef hhrtim1;

/* HRTIM1 init function */
void MX_HRTIM1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ba      	sub	sp, #232	@ 0xe8
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8000f36:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000f40:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000f4e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000f52:	2260      	movs	r2, #96	@ 0x60
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f008 fefb 	bl	8009d52 <memset>
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000f5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000f70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8000f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f80:	2224      	movs	r2, #36	@ 0x24
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fee4 	bl	8009d52 <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f008 fede 	bl	8009d52 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8000f96:	4bcb      	ldr	r3, [pc, #812]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000f98:	4acb      	ldr	r2, [pc, #812]	@ (80012c8 <MX_HRTIM1_Init+0x398>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8000f9c:	4bc9      	ldr	r3, [pc, #804]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8000fa2:	4bc8      	ldr	r3, [pc, #800]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000fa8:	48c6      	ldr	r0, [pc, #792]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000faa:	f003 fe8f 	bl	8004ccc <HAL_HRTIM_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_HRTIM1_Init+0x88>
  {
    Error_Handler();
 8000fb4:	f000 fa98 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000fb8:	210c      	movs	r1, #12
 8000fba:	48c2      	ldr	r0, [pc, #776]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000fbc:	f003 ff56 	bl	8004e6c <HAL_HRTIM_DLLCalibrationStart>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_HRTIM1_Init+0x9a>
  {
    Error_Handler();
 8000fc6:	f000 fa8f 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 100) != HAL_OK)
 8000fca:	2164      	movs	r1, #100	@ 0x64
 8000fcc:	48bd      	ldr	r0, [pc, #756]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000fce:	f003 ffa5 	bl	8004f1c <HAL_HRTIM_PollForDLLCalibration>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_HRTIM1_Init+0xac>
  {
    Error_Handler();
 8000fd8:	f000 fa86 	bl	80014e8 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_MASTER_PERIOD;
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8000fe8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000fec:	461a      	mov	r2, r3
 8000fee:	2101      	movs	r1, #1
 8000ff0:	48b4      	ldr	r0, [pc, #720]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8000ff2:	f003 ffef 	bl	8004fd4 <HAL_HRTIM_ADCTriggerConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_HRTIM1_Init+0xd0>
  {
    Error_Handler();
 8000ffc:	f000 fa74 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 10-1) != HAL_OK)
 8001000:	2209      	movs	r2, #9
 8001002:	2101      	movs	r1, #1
 8001004:	48af      	ldr	r0, [pc, #700]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001006:	f004 f9d1 	bl	80053ac <HAL_HRTIM_ADCPostScalerConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_HRTIM1_Init+0xe4>
  {
    Error_Handler();
 8001010:	f000 fa6a 	bl	80014e8 <Error_Handler>
  }
  pTimeBaseCfg.Period = 27200;
 8001014:	f646 2340 	movw	r3, #27200	@ 0x6a40
 8001018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  pTimeBaseCfg.RepetitionCounter = 10;
 800101c:	230a      	movs	r3, #10
 800101e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001028:	2308      	movs	r3, #8
 800102a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 800102e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001032:	461a      	mov	r2, r3
 8001034:	2106      	movs	r1, #6
 8001036:	48a3      	ldr	r0, [pc, #652]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001038:	f003 ffa4 	bl	8004f84 <HAL_HRTIM_TimeBaseConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_HRTIM1_Init+0x116>
  {
    Error_Handler();
 8001042:	f000 fa51 	bl	80014e8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_MREP;
 8001046:	2310      	movs	r3, #16
 8001048:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 800104a:	2300      	movs	r3, #0
 800104c:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.DMASrcAddress = 0x0000;
 800104e:	2300      	movs	r3, #0
 8001050:	67bb      	str	r3, [r7, #120]	@ 0x78
  pTimerCfg.DMADstAddress = 0x0000;
 8001052:	2300      	movs	r3, #0
 8001054:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pTimerCfg.DMASize = 0x1;
 8001056:	2301      	movs	r3, #1
 8001058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  pTimerCfg.InterleavedMode = HRTIM_INTERLEAVED_MODE_DISABLED;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 800107a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800107e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 800108e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8001096:	2300      	movs	r3, #0
 8001098:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 800109c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80010a0:	461a      	mov	r2, r3
 80010a2:	2106      	movs	r1, #6
 80010a4:	4887      	ldr	r0, [pc, #540]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80010a6:	f004 facb 	bl	8005640 <HAL_HRTIM_WaveformTimerConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_HRTIM1_Init+0x184>
  {
    Error_Handler();
 80010b0:	f000 fa1a 	bl	80014e8 <Error_Handler>
  }
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80010b4:	2300      	movs	r3, #0
 80010b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80010ba:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80010be:	461a      	mov	r2, r3
 80010c0:	2100      	movs	r1, #0
 80010c2:	4880      	ldr	r0, [pc, #512]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80010c4:	f003 ff5e 	bl	8004f84 <HAL_HRTIM_TimeBaseConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_HRTIM1_Init+0x1a2>
  {
    Error_Handler();
 80010ce:	f000 fa0b 	bl	80014e8 <Error_Handler>
  }
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UP;
 80010d2:	2300      	movs	r3, #0
 80010d4:	657b      	str	r3, [r7, #84]	@ 0x54
  pTimerCtl.GreaterCMP3 = HRTIM_TIMERGTCMP3_EQUAL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 80010da:	2300      	movs	r3, #0
 80010dc:	663b      	str	r3, [r7, #96]	@ 0x60
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 80010de:	2300      	movs	r3, #0
 80010e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 80010e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010e6:	461a      	mov	r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	4876      	ldr	r0, [pc, #472]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80010ec:	f004 fb35 	bl	800575a <HAL_HRTIM_WaveformTimerControl>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_HRTIM1_Init+0x1ca>
  {
    Error_Handler();
 80010f6:	f000 f9f7 	bl	80014e8 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	673b      	str	r3, [r7, #112]	@ 0x70
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	677b      	str	r3, [r7, #116]	@ 0x74
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8001114:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_MASTER;
 8001122:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 800112a:	2310      	movs	r3, #16
 800112c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8001130:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001134:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8001138:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800113c:	461a      	mov	r2, r3
 800113e:	2100      	movs	r1, #0
 8001140:	4860      	ldr	r0, [pc, #384]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001142:	f004 fa7d 	bl	8005640 <HAL_HRTIM_WaveformTimerConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_HRTIM1_Init+0x220>
  {
    Error_Handler();
 800114c:	f000 f9cc 	bl	80014e8 <Error_Handler>
  }
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8001156:	2300      	movs	r3, #0
 8001158:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCfg) != HAL_OK)
 800115c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001160:	461a      	mov	r2, r3
 8001162:	2103      	movs	r1, #3
 8001164:	4857      	ldr	r0, [pc, #348]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001166:	f004 fa6b 	bl	8005640 <HAL_HRTIM_WaveformTimerConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_HRTIM1_Init+0x244>
  {
    Error_Handler();
 8001170:	f000 f9ba 	bl	80014e8 <Error_Handler>
  }
  pCompareCfg.CompareValue = 0xFFDF;
 8001174:	f64f 73df 	movw	r3, #65503	@ 0xffdf
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 800117a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800117e:	2201      	movs	r2, #1
 8001180:	2100      	movs	r1, #0
 8001182:	4850      	ldr	r0, [pc, #320]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001184:	f004 fb9c 	bl	80058c0 <HAL_HRTIM_WaveformCompareConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_HRTIM1_Init+0x262>
  {
    Error_Handler();
 800118e:	f000 f9ab 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001192:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001196:	2204      	movs	r2, #4
 8001198:	2100      	movs	r1, #0
 800119a:	484a      	ldr	r0, [pc, #296]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 800119c:	f004 fb90 	bl	80058c0 <HAL_HRTIM_WaveformCompareConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_HRTIM1_Init+0x27a>
  {
    Error_Handler();
 80011a6:	f000 f99f 	bl	80014e8 <Error_Handler>
  }
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_MUL8;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  pDeadTimeCfg.RisingValue = 50;
 80011ae:	2332      	movs	r3, #50	@ 0x32
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pDeadTimeCfg.RisingSign = HRTIM_TIMDEADTIME_RISINGSIGN_POSITIVE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
  pDeadTimeCfg.FallingValue = 50;
 80011be:	2332      	movs	r3, #50	@ 0x32
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  pDeadTimeCfg.FallingSign = HRTIM_TIMDEADTIME_FALLINGSIGN_POSITIVE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	@ 0x40
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	461a      	mov	r2, r3
 80011d4:	2100      	movs	r1, #0
 80011d6:	483b      	ldr	r0, [pc, #236]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80011d8:	f004 faf2 	bl	80057c0 <HAL_HRTIM_DeadTimeConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_HRTIM1_Init+0x2b6>
  {
    Error_Handler();
 80011e2:	f000 f981 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pDeadTimeCfg) != HAL_OK)
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	461a      	mov	r2, r3
 80011ec:	2103      	movs	r1, #3
 80011ee:	4835      	ldr	r0, [pc, #212]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80011f0:	f004 fae6 	bl	80057c0 <HAL_HRTIM_DeadTimeConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_HRTIM1_Init+0x2ce>
  {
    Error_Handler();
 80011fa:	f000 f975 	bl	80014e8 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1;
 8001202:	2308      	movs	r3, #8
 8001204:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8001206:	2320      	movs	r3, #32
 8001208:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 800121a:	2300      	movs	r3, #0
 800121c:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2201      	movs	r2, #1
 8001222:	2100      	movs	r1, #0
 8001224:	4827      	ldr	r0, [pc, #156]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001226:	f004 fcb9 	bl	8005b9c <HAL_HRTIM_WaveformOutputConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_HRTIM1_Init+0x304>
  {
    Error_Handler();
 8001230:	f000 f95a 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD1, &pOutputCfg) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	2103      	movs	r1, #3
 800123a:	4822      	ldr	r0, [pc, #136]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 800123c:	f004 fcae 	bl	8005b9c <HAL_HRTIM_WaveformOutputConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_HRTIM1_Init+0x31a>
  {
    Error_Handler();
 8001246:	f000 f94f 	bl	80014e8 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	2202      	movs	r2, #2
 8001256:	2100      	movs	r1, #0
 8001258:	481a      	ldr	r0, [pc, #104]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 800125a:	f004 fc9f 	bl	8005b9c <HAL_HRTIM_WaveformOutputConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_HRTIM1_Init+0x338>
  {
    Error_Handler();
 8001264:	f000 f940 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_OUTPUT_TD2, &pOutputCfg) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	2103      	movs	r1, #3
 800126e:	4815      	ldr	r0, [pc, #84]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001270:	f004 fc94 	bl	8005b9c <HAL_HRTIM_WaveformOutputConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_HRTIM1_Init+0x34e>
  {
    Error_Handler();
 800127a:	f000 f935 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimeBaseCfg) != HAL_OK)
 800127e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001282:	461a      	mov	r2, r3
 8001284:	2103      	movs	r1, #3
 8001286:	480f      	ldr	r0, [pc, #60]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 8001288:	f003 fe7c 	bl	8004f84 <HAL_HRTIM_TimeBaseConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_HRTIM1_Init+0x366>
  {
    Error_Handler();
 8001292:	f000 f929 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, &pTimerCtl) != HAL_OK)
 8001296:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129a:	461a      	mov	r2, r3
 800129c:	2103      	movs	r1, #3
 800129e:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80012a0:	f004 fa5b 	bl	800575a <HAL_HRTIM_WaveformTimerControl>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_HRTIM1_Init+0x37e>
  {
    Error_Handler();
 80012aa:	f000 f91d 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80012ae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012b2:	2201      	movs	r2, #1
 80012b4:	2103      	movs	r1, #3
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <MX_HRTIM1_Init+0x394>)
 80012b8:	f004 fb02 	bl	80058c0 <HAL_HRTIM_WaveformCompareConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	e004      	b.n	80012cc <MX_HRTIM1_Init+0x39c>
 80012c2:	bf00      	nop
 80012c4:	2000032c 	.word	0x2000032c
 80012c8:	40016800 	.word	0x40016800
 80012cc:	d001      	beq.n	80012d2 <MX_HRTIM1_Init+0x3a2>
  {
    Error_Handler();
 80012ce:	f000 f90b 	bl	80014e8 <Error_Handler>
  }
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80012d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80012d6:	2204      	movs	r2, #4
 80012d8:	2103      	movs	r1, #3
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_HRTIM1_Init+0x3c8>)
 80012dc:	f004 faf0 	bl	80058c0 <HAL_HRTIM_WaveformCompareConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_HRTIM1_Init+0x3ba>
  {
    Error_Handler();
 80012e6:	f000 f8ff 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_HRTIM1_Init+0x3c8>)
 80012ec:	f000 f82c 	bl	8001348 <HAL_HRTIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	37e8      	adds	r7, #232	@ 0xe8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	2000032c 	.word	0x2000032c

080012fc <HAL_HRTIM_MspInit>:

void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  if(hrtimHandle->Instance==HRTIM1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <HAL_HRTIM_MspInit+0x44>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d113      	bne.n	8001336 <HAL_HRTIM_MspInit+0x3a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* HRTIM1 clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800130e:	4b0d      	ldr	r3, [pc, #52]	@ (8001344 <HAL_HRTIM_MspInit+0x48>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	4a0c      	ldr	r2, [pc, #48]	@ (8001344 <HAL_HRTIM_MspInit+0x48>)
 8001314:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001318:	6613      	str	r3, [r2, #96]	@ 0x60
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <HAL_HRTIM_MspInit+0x48>)
 800131c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800131e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2043      	movs	r0, #67	@ 0x43
 800132c:	f002 fba7 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001330:	2043      	movs	r0, #67	@ 0x43
 8001332:	f002 fbbe 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40016800 	.word	0x40016800
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hrtimHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hrtimHandle->Instance==HRTIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <HAL_HRTIM_MspPostInit+0xa0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d13a      	bne.n	80013e0 <HAL_HRTIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_HRTIM_MspPostInit+0xa4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <HAL_HRTIM_MspPostInit+0xa4>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_HRTIM_MspPostInit+0xa4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_HRTIM_MspPostInit+0xa4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a19      	ldr	r2, [pc, #100]	@ (80013ec <HAL_HRTIM_MspPostInit+0xa4>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_HRTIM_MspPostInit+0xa4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> HRTIM1_CHD1
    PB15     ------> HRTIM1_CHD2
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = CAP_L_Pin|CAP_H_Pin;
 800139a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80013ac:	230d      	movs	r3, #13
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	480e      	ldr	r0, [pc, #56]	@ (80013f0 <HAL_HRTIM_MspPostInit+0xa8>)
 80013b8:	f003 fad4 	bl	8004964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_Pin|MOTOR_H_Pin;
 80013bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80013ce:	230d      	movs	r3, #13
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013dc:	f003 fac2 	bl	8004964 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	@ 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40016800 	.word	0x40016800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48000400 	.word	0x48000400

080013f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80013f8:	f000 fab1 	bl	800195e <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80013fc:	f000 f82a 	bl	8001454 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001400:	f7ff fd3e 	bl	8000e80 <MX_GPIO_Init>
    MX_DMA_Init();
 8001404:	f7ff fc16 	bl	8000c34 <MX_DMA_Init>
    MX_ADC1_Init();
 8001408:	f7ff f87e 	bl	8000508 <MX_ADC1_Init>
    MX_ADC2_Init();
 800140c:	f7ff f92e 	bl	800066c <MX_ADC2_Init>
    MX_ADC3_Init();
 8001410:	f7ff f9cc 	bl	80007ac <MX_ADC3_Init>
    MX_FDCAN1_Init();
 8001414:	f7ff fc50 	bl	8000cb8 <MX_FDCAN1_Init>
    MX_HRTIM1_Init();
 8001418:	f7ff fd8a 	bl	8000f30 <MX_HRTIM1_Init>
    MX_LPUART1_UART_Init();
 800141c:	f000 f99e 	bl	800175c <MX_LPUART1_UART_Init>
    MX_TIM6_Init();
 8001420:	f000 f940 	bl	80016a4 <MX_TIM6_Init>
    MX_FMAC_Init();
 8001424:	f7ff fcf8 	bl	8000e18 <MX_FMAC_Init>
    /* USER CODE BEGIN 2 */

    BSP_ADC_Convert_Start();
 8001428:	f008 fa10 	bl	800984c <BSP_ADC_Convert_Start>

    fsbb_pwm_init();
 800142c:	f008 fb66 	bl	8009afc <fsbb_pwm_init>
    fsbb_pwm_set_factor(1.0f);
 8001430:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001434:	f008 fc46 	bl	8009cc4 <fsbb_pwm_set_factor>
    fsbb_pwm_output_start();
 8001438:	f008 fb76 	bl	8009b28 <fsbb_pwm_output_start>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        HAL_Delay(200);
 800143c:	20c8      	movs	r0, #200	@ 0xc8
 800143e:	f000 faff 	bl	8001a40 <HAL_Delay>
        HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8001442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001446:	4802      	ldr	r0, [pc, #8]	@ (8001450 <main+0x5c>)
 8001448:	f003 fc26 	bl	8004c98 <HAL_GPIO_TogglePin>
        HAL_Delay(200);
 800144c:	bf00      	nop
 800144e:	e7f5      	b.n	800143c <main+0x48>
 8001450:	48000800 	.word	0x48000800

08001454 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b094      	sub	sp, #80	@ 0x50
 8001458:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	2238      	movs	r2, #56	@ 0x38
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f008 fc75 	bl	8009d52 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001476:	2000      	movs	r0, #0
 8001478:	f005 fc24 	bl	8006cc4 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8001480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001484:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8001486:	2302      	movs	r3, #2
 8001488:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 800148a:	2303      	movs	r3, #3
 800148c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLM       = RCC_PLLM_DIV3;
 800148e:	2303      	movs	r3, #3
 8001490:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLN       = 85;
 8001492:	2355      	movs	r3, #85	@ 0x55
 8001494:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV2;
 8001496:	2302      	movs	r3, #2
 8001498:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ       = RCC_PLLQ_DIV2;
 800149a:	2302      	movs	r3, #2
 800149c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLR       = RCC_PLLR_DIV2;
 800149e:	2302      	movs	r3, #2
 80014a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f005 fcc0 	bl	8006e2c <HAL_RCC_OscConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x62>
    {
        Error_Handler();
 80014b2:	f000 f819 	bl	80014e8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b6:	230f      	movs	r3, #15
 80014b8:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ca:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	2104      	movs	r1, #4
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 ffbd 	bl	8007450 <HAL_RCC_ClockConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x8c>
    {
        Error_Handler();
 80014dc:	f000 f804 	bl	80014e8 <Error_Handler>
    }
}
 80014e0:	bf00      	nop
 80014e2:	3750      	adds	r7, #80	@ 0x50
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <Error_Handler+0x8>

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	@ 0x60
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <HAL_MspInit+0x44>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	4a08      	ldr	r2, [pc, #32]	@ (8001538 <HAL_MspInit+0x44>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800151c:	6593      	str	r3, [r2, #88]	@ 0x58
 800151e:	4b06      	ldr	r3, [pc, #24]	@ (8001538 <HAL_MspInit+0x44>)
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800152a:	f005 fc6f 	bl	8006e0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <NMI_Handler+0x4>

08001544 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <MemManage_Handler+0x4>

08001554 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <UsageFault_Handler+0x4>

08001564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 fa37 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a0:	4802      	ldr	r0, [pc, #8]	@ (80015ac <DMA1_Channel1_IRQHandler+0x10>)
 80015a2:	f002 fc84 	bl	8003eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000016c 	.word	0x2000016c

080015b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <DMA1_Channel2_IRQHandler+0x10>)
 80015b6:	f002 fc7a 	bl	8003eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200001cc 	.word	0x200001cc

080015c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <DMA1_Channel3_IRQHandler+0x10>)
 80015ca:	f002 fc70 	bl	8003eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000022c 	.word	0x2000022c

080015d8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <DMA1_Channel6_IRQHandler+0x10>)
 80015de:	f002 fc66 	bl	8003eae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000508 	.word	0x20000508

080015ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <ADC1_2_IRQHandler+0x14>)
 80015f2:	f000 ff3d 	bl	8002470 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <ADC1_2_IRQHandler+0x18>)
 80015f8:	f000 ff3a 	bl	8002470 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000028 	.word	0x20000028
 8001604:	20000094 	.word	0x20000094

08001608 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <FDCAN1_IT0_IRQHandler+0x10>)
 800160e:	f002 fef7 	bl	8004400 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000290 	.word	0x20000290

0800161c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001620:	4802      	ldr	r0, [pc, #8]	@ (800162c <FDCAN1_IT1_IRQHandler+0x10>)
 8001622:	f002 feed 	bl	8004400 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000290 	.word	0x20000290

08001630 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001634:	4802      	ldr	r0, [pc, #8]	@ (8001640 <ADC3_IRQHandler+0x10>)
 8001636:	f000 ff1b 	bl	8002470 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000100 	.word	0x20000100

08001644 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <TIM6_DAC_IRQHandler+0x10>)
 800164a:	f006 fbc2 	bl	8007dd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000428 	.word	0x20000428

08001658 <HRTIM1_Master_IRQHandler>:

/**
  * @brief This function handles HRTIM master timer global interrupt.
  */
void HRTIM1_Master_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */

  /* USER CODE END HRTIM1_Master_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 800165c:	2106      	movs	r1, #6
 800165e:	4802      	ldr	r0, [pc, #8]	@ (8001668 <HRTIM1_Master_IRQHandler+0x10>)
 8001660:	f004 fb25 	bl	8005cae <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	2000032c 	.word	0x2000032c

0800166c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <LPUART1_IRQHandler+0x10>)
 8001672:	f006 ff0f 	bl	8008494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000474 	.word	0x20000474

08001680 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <SystemInit+0x20>)
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <SystemInit+0x20>)
 800168c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016b4:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016b6:	4a15      	ldr	r2, [pc, #84]	@ (800170c <MX_TIM6_Init+0x68>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016d6:	f006 fb25 	bl	8007d24 <HAL_TIM_Base_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016e0:	f7ff ff02 	bl	80014e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_TIM6_Init+0x64>)
 80016f2:	f006 fda3 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80016fc:	f7ff fef4 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000428 	.word	0x20000428
 800170c:	40001000 	.word	0x40001000

08001710 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_TIM_Base_MspInit+0x44>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d113      	bne.n	800174a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001726:	4a0c      	ldr	r2, [pc, #48]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001728:	f043 0310 	orr.w	r3, r3, #16
 800172c:	6593      	str	r3, [r2, #88]	@ 0x58
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_TIM_Base_MspInit+0x48>)
 8001730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2036      	movs	r0, #54	@ 0x36
 8001740:	f002 f99d 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001744:	2036      	movs	r0, #54	@ 0x36
 8001746:	f002 f9b4 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40001000 	.word	0x40001000
 8001758:	40021000 	.word	0x40021000

0800175c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001762:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <MX_LPUART1_UART_Init+0x8c>)
 8001764:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001766:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001768:	4a20      	ldr	r2, [pc, #128]	@ (80017ec <MX_LPUART1_UART_Init+0x90>)
 800176a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001780:	220c      	movs	r2, #12
 8001782:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800179c:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 800179e:	f006 fe29 	bl	80083f4 <HAL_UART_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80017a8:	f7ff fe9e 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 80017b0:	f007 ff81 	bl	80096b6 <HAL_UARTEx_SetTxFifoThreshold>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80017ba:	f7ff fe95 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017be:	2100      	movs	r1, #0
 80017c0:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 80017c2:	f007 ffb6 	bl	8009732 <HAL_UARTEx_SetRxFifoThreshold>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80017cc:	f7ff fe8c 	bl	80014e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_LPUART1_UART_Init+0x88>)
 80017d2:	f007 ff37 	bl	8009644 <HAL_UARTEx_DisableFifoMode>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80017dc:	f7ff fe84 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000474 	.word	0x20000474
 80017e8:	40008000 	.word	0x40008000
 80017ec:	00033324 	.word	0x00033324

080017f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b09e      	sub	sp, #120	@ 0x78
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	2254      	movs	r2, #84	@ 0x54
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f008 fa9e 	bl	8009d52 <memset>
  if(uartHandle->Instance==LPUART1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a38      	ldr	r2, [pc, #224]	@ (80018fc <HAL_UART_MspInit+0x10c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d169      	bne.n	80018f4 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001820:	2320      	movs	r3, #32
 8001822:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4618      	mov	r0, r3
 800182e:	f006 f82b 	bl	8007888 <HAL_RCCEx_PeriphCLKConfig>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001838:	f7ff fe56 	bl	80014e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800183c:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <HAL_UART_MspInit+0x110>)
 800183e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001840:	4a2f      	ldr	r2, [pc, #188]	@ (8001900 <HAL_UART_MspInit+0x110>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_UART_MspInit+0x110>)
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <HAL_UART_MspInit+0x110>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <HAL_UART_MspInit+0x110>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001860:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_UART_MspInit+0x110>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800186c:	230c      	movs	r3, #12
 800186e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800187c:	230c      	movs	r3, #12
 800187e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f003 f86b 	bl	8004964 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_UART_MspInit+0x114>)
 8001890:	4a1d      	ldr	r2, [pc, #116]	@ (8001908 <HAL_UART_MspInit+0x118>)
 8001892:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001894:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <HAL_UART_MspInit+0x114>)
 8001896:	2222      	movs	r2, #34	@ 0x22
 8001898:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <HAL_UART_MspInit+0x114>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018ba:	2220      	movs	r2, #32
 80018bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80018c6:	480f      	ldr	r0, [pc, #60]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018c8:	f002 f90e 	bl	8003ae8 <HAL_DMA_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80018d2:	f7ff fe09 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018de:	4a09      	ldr	r2, [pc, #36]	@ (8001904 <HAL_UART_MspInit+0x114>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	205b      	movs	r0, #91	@ 0x5b
 80018ea:	f002 f8c8 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80018ee:	205b      	movs	r0, #91	@ 0x5b
 80018f0:	f002 f8df 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80018f4:	bf00      	nop
 80018f6:	3778      	adds	r7, #120	@ 0x78
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40008000 	.word	0x40008000
 8001900:	40021000 	.word	0x40021000
 8001904:	20000508 	.word	0x20000508
 8001908:	4002006c 	.word	0x4002006c

0800190c <Reset_Handler>:
 800190c:	480d      	ldr	r0, [pc, #52]	@ (8001944 <LoopForever+0x2>)
 800190e:	4685      	mov	sp, r0
 8001910:	f7ff feb6 	bl	8001680 <SystemInit>
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <LoopForever+0x6>)
 8001916:	490d      	ldr	r1, [pc, #52]	@ (800194c <LoopForever+0xa>)
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <LoopForever+0xe>)
 800191a:	2300      	movs	r3, #0
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:
 800191e:	58d4      	ldr	r4, [r2, r3]
 8001920:	50c4      	str	r4, [r0, r3]
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:
 8001924:	18c4      	adds	r4, r0, r3
 8001926:	428c      	cmp	r4, r1
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <LoopForever+0x12>)
 800192c:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <LoopForever+0x16>)
 800192e:	2300      	movs	r3, #0
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:
 8001936:	42a2      	cmp	r2, r4
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>
 800193a:	f008 fa13 	bl	8009d64 <__libc_init_array>
 800193e:	f7ff fd59 	bl	80013f4 <main>

08001942 <LoopForever>:
 8001942:	e7fe      	b.n	8001942 <LoopForever>
 8001944:	20020000 	.word	0x20020000
 8001948:	20000000 	.word	0x20000000
 800194c:	2000000c 	.word	0x2000000c
 8001950:	08009e14 	.word	0x08009e14
 8001954:	2000000c 	.word	0x2000000c
 8001958:	20000594 	.word	0x20000594

0800195c <ADC4_IRQHandler>:
 800195c:	e7fe      	b.n	800195c <ADC4_IRQHandler>

0800195e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f002 f87d 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196e:	200f      	movs	r0, #15
 8001970:	f000 f80e 	bl	8001990 <HAL_InitTick>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	e001      	b.n	8001984 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001980:	f7ff fdb8 	bl	80014f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001984:	79fb      	ldrb	r3, [r7, #7]

}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800199c:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <HAL_InitTick+0x68>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d022      	beq.n	80019ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019a4:	4b15      	ldr	r3, [pc, #84]	@ (80019fc <HAL_InitTick+0x6c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <HAL_InitTick+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 f888 	bl	8003ace <HAL_SYSTICK_Config>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10f      	bne.n	80019e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b0f      	cmp	r3, #15
 80019c8:	d809      	bhi.n	80019de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ca:	2200      	movs	r2, #0
 80019cc:	6879      	ldr	r1, [r7, #4]
 80019ce:	f04f 30ff 	mov.w	r0, #4294967295
 80019d2:	f002 f854 	bl	8003a7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_InitTick+0x70>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e007      	b.n	80019ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e004      	b.n	80019ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
 80019e8:	e001      	b.n	80019ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_IncTick+0x1c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_IncTick+0x20>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a03      	ldr	r2, [pc, #12]	@ (8001a20 <HAL_IncTick+0x1c>)
 8001a14:	6013      	str	r3, [r2, #0]
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000568 	.word	0x20000568
 8001a24:	20000008 	.word	0x20000008

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000568 	.word	0x20000568

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d004      	beq.n	8001a64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_Delay+0x40>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a64:	bf00      	nop
 8001a66:	f7ff ffdf 	bl	8001a28 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d8f7      	bhi.n	8001a66 <HAL_Delay+0x26>
  {
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000008 	.word	0x20000008

08001a84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3360      	adds	r3, #96	@ 0x60
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b08      	ldr	r3, [pc, #32]	@ (8001b30 <LL_ADC_SetOffset+0x44>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	03fff000 	.word	0x03fff000

08001b34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3360      	adds	r3, #96	@ 0x60
 8001b42:	461a      	mov	r2, r3
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3360      	adds	r3, #96	@ 0x60
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b8a:	bf00      	nop
 8001b8c:	371c      	adds	r7, #28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b087      	sub	sp, #28
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	3360      	adds	r3, #96	@ 0x60
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bc0:	bf00      	nop
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3360      	adds	r3, #96	@ 0x60
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	615a      	str	r2, [r3, #20]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b087      	sub	sp, #28
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3330      	adds	r3, #48	@ 0x30
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	211f      	movs	r1, #31
 8001c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	401a      	ands	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0e9b      	lsrs	r3, r3, #26
 8001c86:	f003 011f 	and.w	r1, r3, #31
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	431a      	orrs	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b087      	sub	sp, #28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	0e5b      	lsrs	r3, r3, #25
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	0d1b      	lsrs	r3, r3, #20
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	2107      	movs	r1, #7
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	401a      	ands	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0d1b      	lsrs	r3, r3, #20
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f003 0318 	and.w	r3, r3, #24
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d48:	40d9      	lsrs	r1, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d52:	431a      	orrs	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	0007ffff 	.word	0x0007ffff

08001d6c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 031f 	and.w	r3, r3, #31
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6093      	str	r3, [r2, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ddc:	d101      	bne.n	8001de2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e7c:	f043 0202 	orr.w	r2, r3, #2
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <LL_ADC_IsEnabled+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_ADC_IsEnabled+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_IsDisableOngoing+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_IsDisableOngoing+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001eec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef0:	f043 0204 	orr.w	r2, r3, #4
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d101      	bne.n	8001f42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b089      	sub	sp, #36	@ 0x24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e1a9      	b.n	80022be <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d109      	bne.n	8001f8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe fcab 	bl	80008d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff ff19 	bl	8001dc8 <LL_ADC_IsDeepPowerDownEnabled>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d004      	beq.n	8001fa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff feff 	bl	8001da4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff34 	bl	8001e18 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d115      	bne.n	8001fe2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff18 	bl	8001df0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002234 <HAL_ADC_Init+0x2e4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	4a9c      	ldr	r2, [pc, #624]	@ (8002238 <HAL_ADC_Init+0x2e8>)
 8001fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fcc:	099b      	lsrs	r3, r3, #6
 8001fce:	3301      	adds	r3, #1
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fd4:	e002      	b.n	8001fdc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f9      	bne.n	8001fd6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff16 	bl	8001e18 <LL_ADC_IsInternalRegulatorEnabled>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	f043 0210 	orr.w	r2, r3, #16
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff76 	bl	8001f04 <LL_ADC_REG_IsConversionOngoing>
 8002018:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 8142 	bne.w	80022ac <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 813e 	bne.w	80022ac <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002038:	f043 0202 	orr.w	r2, r3, #2
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff23 	bl	8001e90 <LL_ADC_IsEnabled>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d141      	bne.n	80020d4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002058:	d004      	beq.n	8002064 <HAL_ADC_Init+0x114>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a77      	ldr	r2, [pc, #476]	@ (800223c <HAL_ADC_Init+0x2ec>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d10f      	bne.n	8002084 <HAL_ADC_Init+0x134>
 8002064:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002068:	f7ff ff12 	bl	8001e90 <LL_ADC_IsEnabled>
 800206c:	4604      	mov	r4, r0
 800206e:	4873      	ldr	r0, [pc, #460]	@ (800223c <HAL_ADC_Init+0x2ec>)
 8002070:	f7ff ff0e 	bl	8001e90 <LL_ADC_IsEnabled>
 8002074:	4603      	mov	r3, r0
 8002076:	4323      	orrs	r3, r4
 8002078:	2b00      	cmp	r3, #0
 800207a:	bf0c      	ite	eq
 800207c:	2301      	moveq	r3, #1
 800207e:	2300      	movne	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	e012      	b.n	80020aa <HAL_ADC_Init+0x15a>
 8002084:	486e      	ldr	r0, [pc, #440]	@ (8002240 <HAL_ADC_Init+0x2f0>)
 8002086:	f7ff ff03 	bl	8001e90 <LL_ADC_IsEnabled>
 800208a:	4604      	mov	r4, r0
 800208c:	486d      	ldr	r0, [pc, #436]	@ (8002244 <HAL_ADC_Init+0x2f4>)
 800208e:	f7ff feff 	bl	8001e90 <LL_ADC_IsEnabled>
 8002092:	4603      	mov	r3, r0
 8002094:	431c      	orrs	r4, r3
 8002096:	486c      	ldr	r0, [pc, #432]	@ (8002248 <HAL_ADC_Init+0x2f8>)
 8002098:	f7ff fefa 	bl	8001e90 <LL_ADC_IsEnabled>
 800209c:	4603      	mov	r3, r0
 800209e:	4323      	orrs	r3, r4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d012      	beq.n	80020d4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b6:	d004      	beq.n	80020c2 <HAL_ADC_Init+0x172>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a5f      	ldr	r2, [pc, #380]	@ (800223c <HAL_ADC_Init+0x2ec>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_Init+0x176>
 80020c2:	4a62      	ldr	r2, [pc, #392]	@ (800224c <HAL_ADC_Init+0x2fc>)
 80020c4:	e000      	b.n	80020c8 <HAL_ADC_Init+0x178>
 80020c6:	4a62      	ldr	r2, [pc, #392]	@ (8002250 <HAL_ADC_Init+0x300>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f7ff fcd8 	bl	8001a84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7f5b      	ldrb	r3, [r3, #29]
 80020d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d106      	bne.n	8002110 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002106:	3b01      	subs	r3, #1
 8002108:	045b      	lsls	r3, r3, #17
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002124:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <HAL_ADC_Init+0x304>)
 8002134:	4013      	ands	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	69b9      	ldr	r1, [r7, #24]
 800213c:	430b      	orrs	r3, r1
 800213e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fee5 	bl	8001f2a <LL_ADC_INJ_IsConversionOngoing>
 8002160:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d17f      	bne.n	8002268 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d17c      	bne.n	8002268 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002172:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800217a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800218a:	f023 0302 	bic.w	r3, r3, #2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	430b      	orrs	r3, r1
 8002196:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d017      	beq.n	80021d0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80021ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6911      	ldr	r1, [r2, #16]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	430b      	orrs	r3, r1
 80021ca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021ce:	e013      	b.n	80021f8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d12a      	bne.n	8002258 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002224:	430a      	orrs	r2, r1
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	611a      	str	r2, [r3, #16]
 8002232:	e019      	b.n	8002268 <HAL_ADC_Init+0x318>
 8002234:	20000000 	.word	0x20000000
 8002238:	053e2d63 	.word	0x053e2d63
 800223c:	50000100 	.word	0x50000100
 8002240:	50000400 	.word	0x50000400
 8002244:	50000500 	.word	0x50000500
 8002248:	50000600 	.word	0x50000600
 800224c:	50000300 	.word	0x50000300
 8002250:	50000700 	.word	0x50000700
 8002254:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10c      	bne.n	800228a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	f023 010f 	bic.w	r1, r3, #15
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30
 8002288:	e007      	b.n	800229a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 020f 	bic.w	r2, r2, #15
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022aa:	e007      	b.n	80022bc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	@ 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop

080022c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_Start_DMA+0x20>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5a      	ldr	r2, [pc, #360]	@ (800244c <HAL_ADC_Start_DMA+0x184>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_Start_DMA+0x24>
 80022e8:	4b59      	ldr	r3, [pc, #356]	@ (8002450 <HAL_ADC_Start_DMA+0x188>)
 80022ea:	e000      	b.n	80022ee <HAL_ADC_Start_DMA+0x26>
 80022ec:	4b59      	ldr	r3, [pc, #356]	@ (8002454 <HAL_ADC_Start_DMA+0x18c>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fd3c 	bl	8001d6c <LL_ADC_GetMultimode>
 80022f4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fe02 	bl	8001f04 <LL_ADC_REG_IsConversionOngoing>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	f040 809b 	bne.w	800243e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_ADC_Start_DMA+0x4e>
 8002312:	2302      	movs	r3, #2
 8002314:	e096      	b.n	8002444 <HAL_ADC_Start_DMA+0x17c>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a4d      	ldr	r2, [pc, #308]	@ (8002458 <HAL_ADC_Start_DMA+0x190>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d008      	beq.n	800233a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b05      	cmp	r3, #5
 8002332:	d002      	beq.n	800233a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b09      	cmp	r3, #9
 8002338:	d17a      	bne.n	8002430 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 ff4c 	bl	80031d8 <ADC_Enable>
 8002340:	4603      	mov	r3, r0
 8002342:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d16d      	bne.n	8002426 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800234e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a3a      	ldr	r2, [pc, #232]	@ (800244c <HAL_ADC_Start_DMA+0x184>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d009      	beq.n	800237c <HAL_ADC_Start_DMA+0xb4>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3b      	ldr	r2, [pc, #236]	@ (800245c <HAL_ADC_Start_DMA+0x194>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d002      	beq.n	8002378 <HAL_ADC_Start_DMA+0xb0>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	e003      	b.n	8002380 <HAL_ADC_Start_DMA+0xb8>
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_ADC_Start_DMA+0x198>)
 800237a:	e001      	b.n	8002380 <HAL_ADC_Start_DMA+0xb8>
 800237c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	6812      	ldr	r2, [r2, #0]
 8002384:	4293      	cmp	r3, r2
 8002386:	d002      	beq.n	800238e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002392:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023aa:	f023 0206 	bic.w	r2, r3, #6
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	661a      	str	r2, [r3, #96]	@ 0x60
 80023b2:	e002      	b.n	80023ba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023be:	4a29      	ldr	r2, [pc, #164]	@ (8002464 <HAL_ADC_Start_DMA+0x19c>)
 80023c0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <HAL_ADC_Start_DMA+0x1a0>)
 80023c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	4a27      	ldr	r2, [pc, #156]	@ (800246c <HAL_ADC_Start_DMA+0x1a4>)
 80023d0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	221c      	movs	r2, #28
 80023d8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0210 	orr.w	r2, r2, #16
 80023f0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3340      	adds	r3, #64	@ 0x40
 800240c:	4619      	mov	r1, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f001 fc11 	bl	8003c38 <HAL_DMA_Start_IT>
 8002416:	4603      	mov	r3, r0
 8002418:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fd5c 	bl	8001edc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002424:	e00d      	b.n	8002442 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800242e:	e008      	b.n	8002442 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800243c:	e001      	b.n	8002442 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800243e:	2302      	movs	r3, #2
 8002440:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002442:	7dfb      	ldrb	r3, [r7, #23]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	50000100 	.word	0x50000100
 8002450:	50000300 	.word	0x50000300
 8002454:	50000700 	.word	0x50000700
 8002458:	50000600 	.word	0x50000600
 800245c:	50000500 	.word	0x50000500
 8002460:	50000400 	.word	0x50000400
 8002464:	080033c3 	.word	0x080033c3
 8002468:	0800349b 	.word	0x0800349b
 800246c:	080034b7 	.word	0x080034b7

08002470 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	@ 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002494:	d004      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x30>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a8e      	ldr	r2, [pc, #568]	@ (80026d4 <HAL_ADC_IRQHandler+0x264>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x34>
 80024a0:	4b8d      	ldr	r3, [pc, #564]	@ (80026d8 <HAL_ADC_IRQHandler+0x268>)
 80024a2:	e000      	b.n	80024a6 <HAL_ADC_IRQHandler+0x36>
 80024a4:	4b8d      	ldr	r3, [pc, #564]	@ (80026dc <HAL_ADC_IRQHandler+0x26c>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fc60 	bl	8001d6c <LL_ADC_GetMultimode>
 80024ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x78>
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d105      	bne.n	80024da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f001 f8e2 	bl	80036a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_IRQHandler+0x8c>
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8094 	beq.w	8002630 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 808e 	beq.w	8002630 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fb79 	bl	8001c28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d072      	beq.n	8002622 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a64      	ldr	r2, [pc, #400]	@ (80026d4 <HAL_ADC_IRQHandler+0x264>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_ADC_IRQHandler+0xea>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a65      	ldr	r2, [pc, #404]	@ (80026e0 <HAL_ADC_IRQHandler+0x270>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d002      	beq.n	8002556 <HAL_ADC_IRQHandler+0xe6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	e003      	b.n	800255e <HAL_ADC_IRQHandler+0xee>
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_ADC_IRQHandler+0x274>)
 8002558:	e001      	b.n	800255e <HAL_ADC_IRQHandler+0xee>
 800255a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	4293      	cmp	r3, r2
 8002564:	d008      	beq.n	8002578 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d002      	beq.n	8002578 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b09      	cmp	r3, #9
 8002576:	d104      	bne.n	8002582 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	623b      	str	r3, [r7, #32]
 8002580:	e014      	b.n	80025ac <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a53      	ldr	r2, [pc, #332]	@ (80026d4 <HAL_ADC_IRQHandler+0x264>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_ADC_IRQHandler+0x130>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a53      	ldr	r2, [pc, #332]	@ (80026e0 <HAL_ADC_IRQHandler+0x270>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d002      	beq.n	800259c <HAL_ADC_IRQHandler+0x12c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	e003      	b.n	80025a4 <HAL_ADC_IRQHandler+0x134>
 800259c:	4b51      	ldr	r3, [pc, #324]	@ (80026e4 <HAL_ADC_IRQHandler+0x274>)
 800259e:	e001      	b.n	80025a4 <HAL_ADC_IRQHandler+0x134>
 80025a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025a4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d135      	bne.n	8002622 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b08      	cmp	r3, #8
 80025c2:	d12e      	bne.n	8002622 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fc9b 	bl	8001f04 <LL_ADC_REG_IsConversionOngoing>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d11a      	bne.n	800260a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 020c 	bic.w	r2, r2, #12
 80025e2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d112      	bne.n	8002622 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002608:	e00b      	b.n	8002622 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f007 f9d8 	bl	80099d8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	220c      	movs	r2, #12
 800262e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_ADC_IRQHandler+0x1d4>
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 80b3 	beq.w	80027b6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80ad 	beq.w	80027b6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fb14 	bl	8001ca6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800267e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff facf 	bl	8001c28 <LL_ADC_REG_IsTriggerSourceSWStart>
 800268a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a10      	ldr	r2, [pc, #64]	@ (80026d4 <HAL_ADC_IRQHandler+0x264>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_ADC_IRQHandler+0x23a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_ADC_IRQHandler+0x270>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d002      	beq.n	80026a6 <HAL_ADC_IRQHandler+0x236>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e003      	b.n	80026ae <HAL_ADC_IRQHandler+0x23e>
 80026a6:	4b0f      	ldr	r3, [pc, #60]	@ (80026e4 <HAL_ADC_IRQHandler+0x274>)
 80026a8:	e001      	b.n	80026ae <HAL_ADC_IRQHandler+0x23e>
 80026aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d008      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d002      	beq.n	80026c8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b07      	cmp	r3, #7
 80026c6:	d10f      	bne.n	80026e8 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	623b      	str	r3, [r7, #32]
 80026d0:	e01f      	b.n	8002712 <HAL_ADC_IRQHandler+0x2a2>
 80026d2:	bf00      	nop
 80026d4:	50000100 	.word	0x50000100
 80026d8:	50000300 	.word	0x50000300
 80026dc:	50000700 	.word	0x50000700
 80026e0:	50000500 	.word	0x50000500
 80026e4:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a8b      	ldr	r2, [pc, #556]	@ (800291c <HAL_ADC_IRQHandler+0x4ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_ADC_IRQHandler+0x296>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a8a      	ldr	r2, [pc, #552]	@ (8002920 <HAL_ADC_IRQHandler+0x4b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d002      	beq.n	8002702 <HAL_ADC_IRQHandler+0x292>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e003      	b.n	800270a <HAL_ADC_IRQHandler+0x29a>
 8002702:	4b88      	ldr	r3, [pc, #544]	@ (8002924 <HAL_ADC_IRQHandler+0x4b4>)
 8002704:	e001      	b.n	800270a <HAL_ADC_IRQHandler+0x29a>
 8002706:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800270a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d047      	beq.n	80027a8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_ADC_IRQHandler+0x2c2>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03f      	beq.n	80027a8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	d13a      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800273c:	2b40      	cmp	r3, #64	@ 0x40
 800273e:	d133      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d12e      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fbeb 	bl	8001f2a <LL_ADC_INJ_IsConversionOngoing>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11a      	bne.n	8002790 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002768:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800276e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d112      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002786:	f043 0201 	orr.w	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800278e:	e00b      	b.n	80027a8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002794:	f043 0210 	orr.w	r2, r3, #16
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 ff53 	bl	8003654 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2260      	movs	r2, #96	@ 0x60
 80027b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d011      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x374>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8aa 	bl	8002930 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d012      	beq.n	8002814 <HAL_ADC_IRQHandler+0x3a4>
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 ff39 	bl	800367c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002812:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800281a:	2b00      	cmp	r3, #0
 800281c:	d012      	beq.n	8002844 <HAL_ADC_IRQHandler+0x3d4>
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 ff2b 	bl	8003690 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d043      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x466>
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d03e      	beq.n	80028d6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002860:	2301      	movs	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
 8002864:	e021      	b.n	80028aa <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002874:	d004      	beq.n	8002880 <HAL_ADC_IRQHandler+0x410>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a28      	ldr	r2, [pc, #160]	@ (800291c <HAL_ADC_IRQHandler+0x4ac>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_ADC_IRQHandler+0x414>
 8002880:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <HAL_ADC_IRQHandler+0x4b8>)
 8002882:	e000      	b.n	8002886 <HAL_ADC_IRQHandler+0x416>
 8002884:	4b29      	ldr	r3, [pc, #164]	@ (800292c <HAL_ADC_IRQHandler+0x4bc>)
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fa7e 	bl	8001d88 <LL_ADC_GetMultiDMATransfer>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002892:	2301      	movs	r3, #1
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
 8002896:	e008      	b.n	80028aa <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80028a6:	2301      	movs	r3, #1
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10e      	bne.n	80028ce <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c0:	f043 0202 	orr.w	r2, r3, #2
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f83b 	bl	8002944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2210      	movs	r2, #16
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d018      	beq.n	8002912 <HAL_ADC_IRQHandler+0x4a2>
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d013      	beq.n	8002912 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fa:	f043 0208 	orr.w	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800290a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 feab 	bl	8003668 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002912:	bf00      	nop
 8002914:	3728      	adds	r7, #40	@ 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	50000100 	.word	0x50000100
 8002920:	50000500 	.word	0x50000500
 8002924:	50000400 	.word	0x50000400
 8002928:	50000300 	.word	0x50000300
 800292c:	50000700 	.word	0x50000700

08002930 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0b6      	sub	sp, #216	@ 0xd8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002972:	2b01      	cmp	r3, #1
 8002974:	d102      	bne.n	800297c <HAL_ADC_ConfigChannel+0x24>
 8002976:	2302      	movs	r3, #2
 8002978:	f000 bc13 	b.w	80031a2 <HAL_ADC_ConfigChannel+0x84a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fabb 	bl	8001f04 <LL_ADC_REG_IsConversionOngoing>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 83f3 	bne.w	800317c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff f953 	bl	8001c4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff faa9 	bl	8001f04 <LL_ADC_REG_IsConversionOngoing>
 80029b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fab5 	bl	8001f2a <LL_ADC_INJ_IsConversionOngoing>
 80029c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 81d9 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 81d4 	bne.w	8002d80 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029e0:	d10f      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7ff f96d 	bl	8001ccc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f901 	bl	8001c02 <LL_ADC_SetSamplingTimeCommonConfig>
 8002a00:	e00e      	b.n	8002a20 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f7ff f95c 	bl	8001ccc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f8f1 	bl	8001c02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d022      	beq.n	8002a88 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6919      	ldr	r1, [r3, #16]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a52:	f7ff f84b 	bl	8001aec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	6919      	ldr	r1, [r3, #16]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	461a      	mov	r2, r3
 8002a64:	f7ff f897 	bl	8001b96 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x126>
 8002a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a7c:	e000      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x128>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	461a      	mov	r2, r3
 8002a82:	f7ff f8a3 	bl	8001bcc <LL_ADC_SetOffsetSaturation>
 8002a86:	e17b      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f850 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x15c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f845 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	f003 021f 	and.w	r2, r3, #31
 8002ab2:	e01e      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x19a>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f83a 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ada:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e004      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x1b2>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	e018      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1e4>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e004      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d106      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff f809 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2101      	movs	r1, #1
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe ffed 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x222>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe ffe2 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002b70:	4603      	mov	r3, r0
 8002b72:	0e9b      	lsrs	r3, r3, #26
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	e01e      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x260>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ffd7 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ba8:	2320      	movs	r3, #32
 8002baa:	e004      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x278>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	e018      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x2aa>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e004      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d106      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe ffa6 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff8a 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x2e8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe ff7f 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002c36:	4603      	mov	r3, r0
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	f003 021f 	and.w	r2, r3, #31
 8002c3e:	e01e      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x326>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2102      	movs	r1, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe ff74 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e004      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d105      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x33e>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	e016      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x36c>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ca8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002caa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e004      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002cba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d106      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe ff45 	bl	8001b60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2103      	movs	r1, #3
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fe ff29 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x3aa>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2103      	movs	r1, #3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe ff1e 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	0e9b      	lsrs	r3, r3, #26
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	e017      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x3da>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2103      	movs	r1, #3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe ff13 	bl	8001b34 <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d1c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e003      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x3f2>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	e011      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x416>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2103      	movs	r1, #3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fef0 	bl	8001b60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f883 	bl	8001e90 <LL_ADC_IsEnabled>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f040 813d 	bne.w	800300c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f7fe ffc0 	bl	8001d24 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	4aa2      	ldr	r2, [pc, #648]	@ (8003034 <HAL_ADC_ConfigChannel+0x6dc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f040 812e 	bne.w	800300c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x480>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	0e9b      	lsrs	r3, r3, #26
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e019      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x4b4>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002de0:	fa93 f3a3 	rbit	r3, r3
 8002de4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002de6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002dea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002df0:	2320      	movs	r3, #32
 8002df2:	e003      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002df4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2b09      	cmp	r3, #9
 8002e04:	bf94      	ite	ls
 8002e06:	2301      	movls	r3, #1
 8002e08:	2300      	movhi	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d079      	beq.n	8002f04 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x4d4>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	069b      	lsls	r3, r3, #26
 8002e26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e2a:	e015      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x500>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002e44:	2320      	movs	r3, #32
 8002e46:	e003      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3301      	adds	r3, #1
 8002e52:	069b      	lsls	r3, r3, #26
 8002e54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d109      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x520>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0e9b      	lsrs	r3, r3, #26
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f303 	lsl.w	r3, r1, r3
 8002e76:	e017      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x550>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e88:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002e94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	ea42 0103 	orr.w	r1, r2, r3
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x576>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0e9b      	lsrs	r3, r3, #26
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	f003 021f 	and.w	r2, r3, #31
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	051b      	lsls	r3, r3, #20
 8002ecc:	e018      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x5a8>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e003      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f003 021f 	and.w	r2, r3, #31
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f00:	430b      	orrs	r3, r1
 8002f02:	e07e      	b.n	8003002 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x5c8>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	069b      	lsls	r3, r3, #26
 8002f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f1e:	e015      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x5f4>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f30:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x614>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	e017      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x644>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	61fb      	str	r3, [r7, #28]
  return result;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e003      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	ea42 0103 	orr.w	r1, r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10d      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x670>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f003 021f 	and.w	r2, r3, #31
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3b1e      	subs	r3, #30
 8002fc0:	051b      	lsls	r3, r3, #20
 8002fc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	e01b      	b.n	8003000 <HAL_ADC_ConfigChannel+0x6a8>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	fa93 f3a3 	rbit	r3, r3
 8002fd4:	613b      	str	r3, [r7, #16]
  return result;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e003      	b.n	8002fec <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	f003 021f 	and.w	r2, r3, #31
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b1e      	subs	r3, #30
 8002ffa:	051b      	lsls	r3, r3, #20
 8002ffc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003000:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003006:	4619      	mov	r1, r3
 8003008:	f7fe fe60 	bl	8001ccc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <HAL_ADC_ConfigChannel+0x6e0>)
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80be 	beq.w	8003196 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003022:	d004      	beq.n	800302e <HAL_ADC_ConfigChannel+0x6d6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a04      	ldr	r2, [pc, #16]	@ (800303c <HAL_ADC_ConfigChannel+0x6e4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d10a      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x6ec>
 800302e:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <HAL_ADC_ConfigChannel+0x6e8>)
 8003030:	e009      	b.n	8003046 <HAL_ADC_ConfigChannel+0x6ee>
 8003032:	bf00      	nop
 8003034:	407f0000 	.word	0x407f0000
 8003038:	80080000 	.word	0x80080000
 800303c:	50000100 	.word	0x50000100
 8003040:	50000300 	.word	0x50000300
 8003044:	4b59      	ldr	r3, [pc, #356]	@ (80031ac <HAL_ADC_ConfigChannel+0x854>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fd42 	bl	8001ad0 <LL_ADC_GetCommonPathInternalCh>
 800304c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a56      	ldr	r2, [pc, #344]	@ (80031b0 <HAL_ADC_ConfigChannel+0x858>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d004      	beq.n	8003064 <HAL_ADC_ConfigChannel+0x70c>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a55      	ldr	r2, [pc, #340]	@ (80031b4 <HAL_ADC_ConfigChannel+0x85c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d13a      	bne.n	80030da <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d134      	bne.n	80030da <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003078:	d005      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x72e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a4e      	ldr	r2, [pc, #312]	@ (80031b8 <HAL_ADC_ConfigChannel+0x860>)
 8003080:	4293      	cmp	r3, r2
 8003082:	f040 8085 	bne.w	8003190 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800308e:	d004      	beq.n	800309a <HAL_ADC_ConfigChannel+0x742>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a49      	ldr	r2, [pc, #292]	@ (80031bc <HAL_ADC_ConfigChannel+0x864>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x746>
 800309a:	4a49      	ldr	r2, [pc, #292]	@ (80031c0 <HAL_ADC_ConfigChannel+0x868>)
 800309c:	e000      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x748>
 800309e:	4a43      	ldr	r2, [pc, #268]	@ (80031ac <HAL_ADC_ConfigChannel+0x854>)
 80030a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f7fe fcfd 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030b0:	4b44      	ldr	r3, [pc, #272]	@ (80031c4 <HAL_ADC_ConfigChannel+0x86c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	099b      	lsrs	r3, r3, #6
 80030b6:	4a44      	ldr	r2, [pc, #272]	@ (80031c8 <HAL_ADC_ConfigChannel+0x870>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	099b      	lsrs	r3, r3, #6
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030ca:	e002      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f9      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d8:	e05a      	b.n	8003190 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a3b      	ldr	r2, [pc, #236]	@ (80031cc <HAL_ADC_ConfigChannel+0x874>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d125      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d11f      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a31      	ldr	r2, [pc, #196]	@ (80031bc <HAL_ADC_ConfigChannel+0x864>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d104      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x7ac>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a34      	ldr	r2, [pc, #208]	@ (80031d0 <HAL_ADC_ConfigChannel+0x878>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d047      	beq.n	8003194 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310c:	d004      	beq.n	8003118 <HAL_ADC_ConfigChannel+0x7c0>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2a      	ldr	r2, [pc, #168]	@ (80031bc <HAL_ADC_ConfigChannel+0x864>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x7c4>
 8003118:	4a29      	ldr	r2, [pc, #164]	@ (80031c0 <HAL_ADC_ConfigChannel+0x868>)
 800311a:	e000      	b.n	800311e <HAL_ADC_ConfigChannel+0x7c6>
 800311c:	4a23      	ldr	r2, [pc, #140]	@ (80031ac <HAL_ADC_ConfigChannel+0x854>)
 800311e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003126:	4619      	mov	r1, r3
 8003128:	4610      	mov	r0, r2
 800312a:	f7fe fcbe 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800312e:	e031      	b.n	8003194 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a27      	ldr	r2, [pc, #156]	@ (80031d4 <HAL_ADC_ConfigChannel+0x87c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d12d      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800313a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d127      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1c      	ldr	r2, [pc, #112]	@ (80031bc <HAL_ADC_ConfigChannel+0x864>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d022      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003158:	d004      	beq.n	8003164 <HAL_ADC_ConfigChannel+0x80c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <HAL_ADC_ConfigChannel+0x864>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x810>
 8003164:	4a16      	ldr	r2, [pc, #88]	@ (80031c0 <HAL_ADC_ConfigChannel+0x868>)
 8003166:	e000      	b.n	800316a <HAL_ADC_ConfigChannel+0x812>
 8003168:	4a10      	ldr	r2, [pc, #64]	@ (80031ac <HAL_ADC_ConfigChannel+0x854>)
 800316a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800316e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f7fe fc98 	bl	8001aaa <LL_ADC_SetCommonPathInternalCh>
 800317a:	e00c      	b.n	8003196 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800318e:	e002      	b.n	8003196 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003194:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800319e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	37d8      	adds	r7, #216	@ 0xd8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	50000700 	.word	0x50000700
 80031b0:	c3210000 	.word	0xc3210000
 80031b4:	90c00010 	.word	0x90c00010
 80031b8:	50000600 	.word	0x50000600
 80031bc:	50000100 	.word	0x50000100
 80031c0:	50000300 	.word	0x50000300
 80031c4:	20000000 	.word	0x20000000
 80031c8:	053e2d63 	.word	0x053e2d63
 80031cc:	c7520000 	.word	0xc7520000
 80031d0:	50000500 	.word	0x50000500
 80031d4:	cb840000 	.word	0xcb840000

080031d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe fe51 	bl	8001e90 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d176      	bne.n	80032e2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b3c      	ldr	r3, [pc, #240]	@ (80032ec <ADC_Enable+0x114>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e062      	b.n	80032e4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe fe0c 	bl	8001e40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003230:	d004      	beq.n	800323c <ADC_Enable+0x64>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2e      	ldr	r2, [pc, #184]	@ (80032f0 <ADC_Enable+0x118>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d101      	bne.n	8003240 <ADC_Enable+0x68>
 800323c:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <ADC_Enable+0x11c>)
 800323e:	e000      	b.n	8003242 <ADC_Enable+0x6a>
 8003240:	4b2d      	ldr	r3, [pc, #180]	@ (80032f8 <ADC_Enable+0x120>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fc44 	bl	8001ad0 <LL_ADC_GetCommonPathInternalCh>
 8003248:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800324a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800324e:	2b00      	cmp	r3, #0
 8003250:	d013      	beq.n	800327a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003252:	4b2a      	ldr	r3, [pc, #168]	@ (80032fc <ADC_Enable+0x124>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <ADC_Enable+0x128>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	4613      	mov	r3, r2
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800326c:	e002      	b.n	8003274 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3b01      	subs	r3, #1
 8003272:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f9      	bne.n	800326e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800327a:	f7fe fbd5 	bl	8001a28 <HAL_GetTick>
 800327e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003280:	e028      	b.n	80032d4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fe02 	bl	8001e90 <LL_ADC_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d104      	bne.n	800329c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fdd2 	bl	8001e40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800329c:	f7fe fbc4 	bl	8001a28 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d914      	bls.n	80032d4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d00d      	beq.n	80032d4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	f043 0210 	orr.w	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d1cf      	bne.n	8003282 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	8000003f 	.word	0x8000003f
 80032f0:	50000100 	.word	0x50000100
 80032f4:	50000300 	.word	0x50000300
 80032f8:	50000700 	.word	0x50000700
 80032fc:	20000000 	.word	0x20000000
 8003300:	053e2d63 	.word	0x053e2d63

08003304 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fdd0 	bl	8001eb6 <LL_ADC_IsDisableOngoing>
 8003316:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fdb7 	bl	8001e90 <LL_ADC_IsEnabled>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d047      	beq.n	80033b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d144      	bne.n	80033b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030d 	and.w	r3, r3, #13
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10c      	bne.n	8003356 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe fd91 	bl	8001e68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2203      	movs	r2, #3
 800334c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800334e:	f7fe fb6b 	bl	8001a28 <HAL_GetTick>
 8003352:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003354:	e029      	b.n	80033aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e023      	b.n	80033ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003372:	f7fe fb59 	bl	8001a28 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d914      	bls.n	80033aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00d      	beq.n	80033aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1dc      	bne.n	8003372 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d14b      	bne.n	8003474 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d021      	beq.n	800343a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fc14 	bl	8001c28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d032      	beq.n	800346c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d12b      	bne.n	800346c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11f      	bne.n	800346c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f043 0201 	orr.w	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003438:	e018      	b.n	800346c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d111      	bne.n	800346c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f006 fab3 	bl	80099d8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003472:	e00e      	b.n	8003492 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fa5f 	bl	8002944 <HAL_ADC_ErrorCallback>
}
 8003486:	e004      	b.n	8003492 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f006 fa03 	bl	80098b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034ae:	bf00      	nop
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d4:	f043 0204 	orr.w	r2, r3, #4
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff fa31 	bl	8002944 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <LL_ADC_IsEnabled>:
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <LL_ADC_IsEnabled+0x18>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <LL_ADC_IsEnabled+0x1a>
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_ADC_StartCalibration>:
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003522:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800352c:	4313      	orrs	r3, r2
 800352e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	609a      	str	r2, [r3, #8]
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_ADC_IsCalibrationOnGoing>:
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003552:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003556:	d101      	bne.n	800355c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_ADC_REG_IsConversionOngoing>:
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d101      	bne.n	8003582 <LL_ADC_REG_IsConversionOngoing+0x18>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_ADCEx_Calibration_Start+0x1c>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e04d      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0xb8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fea5 	bl	8003304 <ADC_Disable>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d136      	bne.n	8003632 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035cc:	f023 0302 	bic.w	r3, r3, #2
 80035d0:	f043 0202 	orr.w	r2, r3, #2
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff96 	bl	8003510 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80035e4:	e014      	b.n	8003610 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3301      	adds	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a18      	ldr	r2, [pc, #96]	@ (8003650 <HAL_ADCEx_Calibration_Start+0xc0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d90d      	bls.n	8003610 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f023 0312 	bic.w	r3, r3, #18
 80035fc:	f043 0210 	orr.w	r2, r3, #16
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e01b      	b.n	8003648 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff94 	bl	8003542 <LL_ADC_IsCalibrationOnGoing>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e2      	bne.n	80035e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	f023 0303 	bic.w	r3, r3, #3
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003630:	e005      	b.n	800363e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003636:	f043 0210 	orr.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	0004de01 	.word	0x0004de01

08003654 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b0a1      	sub	sp, #132	@ 0x84
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e0e7      	b.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036de:	2300      	movs	r3, #0
 80036e0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036e2:	2300      	movs	r3, #0
 80036e4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ee:	d102      	bne.n	80036f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036f0:	4b6f      	ldr	r3, [pc, #444]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	e009      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a6e      	ldr	r2, [pc, #440]	@ (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d102      	bne.n	8003706 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003700:	4b6d      	ldr	r3, [pc, #436]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	e001      	b.n	800370a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0be      	b.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff1d 	bl	800356a <LL_ADC_REG_IsConversionOngoing>
 8003730:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff17 	bl	800356a <LL_ADC_REG_IsConversionOngoing>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 80a0 	bne.w	8003884 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 809c 	bne.w	8003884 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003754:	d004      	beq.n	8003760 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a55      	ldr	r2, [pc, #340]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003760:	4b56      	ldr	r3, [pc, #344]	@ (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003762:	e000      	b.n	8003766 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003764:	4b56      	ldr	r3, [pc, #344]	@ (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003766:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d04b      	beq.n	8003808 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6859      	ldr	r1, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003782:	035b      	lsls	r3, r3, #13
 8003784:	430b      	orrs	r3, r1
 8003786:	431a      	orrs	r2, r3
 8003788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800378a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003794:	d004      	beq.n	80037a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a45      	ldr	r2, [pc, #276]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10f      	bne.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80037a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037a4:	f7ff fea1 	bl	80034ea <LL_ADC_IsEnabled>
 80037a8:	4604      	mov	r4, r0
 80037aa:	4841      	ldr	r0, [pc, #260]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037ac:	f7ff fe9d 	bl	80034ea <LL_ADC_IsEnabled>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4323      	orrs	r3, r4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	e012      	b.n	80037e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80037c0:	483c      	ldr	r0, [pc, #240]	@ (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037c2:	f7ff fe92 	bl	80034ea <LL_ADC_IsEnabled>
 80037c6:	4604      	mov	r4, r0
 80037c8:	483b      	ldr	r0, [pc, #236]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037ca:	f7ff fe8e 	bl	80034ea <LL_ADC_IsEnabled>
 80037ce:	4603      	mov	r3, r0
 80037d0:	431c      	orrs	r4, r3
 80037d2:	483c      	ldr	r0, [pc, #240]	@ (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037d4:	f7ff fe89 	bl	80034ea <LL_ADC_IsEnabled>
 80037d8:	4603      	mov	r3, r0
 80037da:	4323      	orrs	r3, r4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d056      	beq.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037f2:	f023 030f 	bic.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	6892      	ldr	r2, [r2, #8]
 80037fe:	430a      	orrs	r2, r1
 8003800:	431a      	orrs	r2, r3
 8003802:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003804:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003806:	e047      	b.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003810:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003812:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800381c:	d004      	beq.n	8003828 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a23      	ldr	r2, [pc, #140]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10f      	bne.n	8003848 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003828:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800382c:	f7ff fe5d 	bl	80034ea <LL_ADC_IsEnabled>
 8003830:	4604      	mov	r4, r0
 8003832:	481f      	ldr	r0, [pc, #124]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003834:	f7ff fe59 	bl	80034ea <LL_ADC_IsEnabled>
 8003838:	4603      	mov	r3, r0
 800383a:	4323      	orrs	r3, r4
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	e012      	b.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003848:	481a      	ldr	r0, [pc, #104]	@ (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800384a:	f7ff fe4e 	bl	80034ea <LL_ADC_IsEnabled>
 800384e:	4604      	mov	r4, r0
 8003850:	4819      	ldr	r0, [pc, #100]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003852:	f7ff fe4a 	bl	80034ea <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	431c      	orrs	r4, r3
 800385a:	481a      	ldr	r0, [pc, #104]	@ (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800385c:	f7ff fe45 	bl	80034ea <LL_ADC_IsEnabled>
 8003860:	4603      	mov	r3, r0
 8003862:	4323      	orrs	r3, r4
 8003864:	2b00      	cmp	r3, #0
 8003866:	bf0c      	ite	eq
 8003868:	2301      	moveq	r3, #1
 800386a:	2300      	movne	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800387a:	f023 030f 	bic.w	r3, r3, #15
 800387e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003880:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003882:	e009      	b.n	8003898 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003888:	f043 0220 	orr.w	r2, r3, #32
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003896:	e000      	b.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003898:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80038a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3784      	adds	r7, #132	@ 0x84
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}
 80038ae:	bf00      	nop
 80038b0:	50000100 	.word	0x50000100
 80038b4:	50000400 	.word	0x50000400
 80038b8:	50000500 	.word	0x50000500
 80038bc:	50000300 	.word	0x50000300
 80038c0:	50000700 	.word	0x50000700
 80038c4:	50000600 	.word	0x50000600

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	@ (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	@ (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
         );
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	@ 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff29 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8c:	f7ff ff40 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff ff90 	bl	80039bc <NVIC_EncodePriority>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff5f 	bl	8003968 <__NVIC_SetPriority>
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff33 	bl	800392c <__NVIC_EnableIRQ>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ffa4 	bl	8003a24 <SysTick_Config>
 8003adc:	4603      	mov	r3, r0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e08d      	b.n	8003c16 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	4b47      	ldr	r3, [pc, #284]	@ (8003c20 <HAL_DMA_Init+0x138>)
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d80f      	bhi.n	8003b26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b45      	ldr	r3, [pc, #276]	@ (8003c24 <HAL_DMA_Init+0x13c>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a45      	ldr	r2, [pc, #276]	@ (8003c28 <HAL_DMA_Init+0x140>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	009a      	lsls	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a42      	ldr	r2, [pc, #264]	@ (8003c2c <HAL_DMA_Init+0x144>)
 8003b22:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b24:	e00e      	b.n	8003b44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4b40      	ldr	r3, [pc, #256]	@ (8003c30 <HAL_DMA_Init+0x148>)
 8003b2e:	4413      	add	r3, r2
 8003b30:	4a3d      	ldr	r2, [pc, #244]	@ (8003c28 <HAL_DMA_Init+0x140>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	009a      	lsls	r2, r3, #2
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a3c      	ldr	r2, [pc, #240]	@ (8003c34 <HAL_DMA_Init+0x14c>)
 8003b42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa76 	bl	8004088 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba4:	d102      	bne.n	8003bac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003bc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_DMA_Init+0x104>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d80c      	bhi.n	8003bec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa96 	bl	8004104 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	e008      	b.n	8003bfe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40020407 	.word	0x40020407
 8003c24:	bffdfff8 	.word	0xbffdfff8
 8003c28:	cccccccd 	.word	0xcccccccd
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	bffdfbf8 	.word	0xbffdfbf8
 8003c34:	40020400 	.word	0x40020400

08003c38 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA_Start_IT+0x20>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e066      	b.n	8003d26 <HAL_DMA_Start_IT+0xee>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d155      	bne.n	8003d18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f9bb 	bl	800400c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 020e 	orr.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e00f      	b.n	8003cd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 020a 	orr.w	r2, r2, #10
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e005      	b.n	8003d24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d005      	beq.n	8003d52 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2204      	movs	r2, #4
 8003d4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
 8003d50:	e037      	b.n	8003dc2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 020e 	bic.w	r2, r2, #14
 8003d60:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d70:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0201 	bic.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d86:	f003 021f 	and.w	r2, r3, #31
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	2101      	movs	r1, #1
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d9e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00c      	beq.n	8003dc2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003db6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003dc0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d00d      	beq.n	8003e14 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e047      	b.n	8003ea4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 020e 	bic.w	r2, r2, #14
 8003e22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e48:	f003 021f 	and.w	r2, r3, #31
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e60:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00c      	beq.n	8003e84 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e78:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e82:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
    }
  }
  return status;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b084      	sub	sp, #16
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eca:	f003 031f 	and.w	r3, r3, #31
 8003ece:	2204      	movs	r2, #4
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d026      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x7a>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d021      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d107      	bne.n	8003f02 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0204 	bic.w	r2, r2, #4
 8003f00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f003 021f 	and.w	r2, r3, #31
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2104      	movs	r1, #4
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d071      	beq.n	8004002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f26:	e06c      	b.n	8004002 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	2202      	movs	r2, #2
 8003f32:	409a      	lsls	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02e      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d029      	beq.n	8003f9a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 020a 	bic.w	r2, r2, #10
 8003f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	2102      	movs	r1, #2
 8003f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d038      	beq.n	8004002 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f98:	e033      	b.n	8004002 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02a      	beq.n	8004004 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d025      	beq.n	8004004 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 020e 	bic.w	r2, r2, #14
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fda:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004002:	bf00      	nop
 8004004:	bf00      	nop
}
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004022:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004034:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403a:	f003 021f 	and.w	r2, r3, #31
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2101      	movs	r1, #1
 8004044:	fa01 f202 	lsl.w	r2, r1, r2
 8004048:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b10      	cmp	r3, #16
 8004058:	d108      	bne.n	800406c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800406a:	e007      	b.n	800407c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	60da      	str	r2, [r3, #12]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004098:	429a      	cmp	r2, r3
 800409a:	d802      	bhi.n	80040a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800409c:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e001      	b.n	80040a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80040a2:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040a4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	3b08      	subs	r3, #8
 80040b2:	4a12      	ldr	r2, [pc, #72]	@ (80040fc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	009a      	lsls	r2, r3, #2
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	461a      	mov	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a0b      	ldr	r2, [pc, #44]	@ (8004100 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2201      	movs	r2, #1
 80040dc:	409a      	lsls	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40020407 	.word	0x40020407
 80040f4:	40020800 	.word	0x40020800
 80040f8:	40020820 	.word	0x40020820
 80040fc:	cccccccd 	.word	0xcccccccd
 8004100:	40020880 	.word	0x40020880

08004104 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a08      	ldr	r2, [pc, #32]	@ (8004148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004126:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b01      	subs	r3, #1
 800412c:	f003 031f 	and.w	r3, r3, #31
 8004130:	2201      	movs	r2, #1
 8004132:	409a      	lsls	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	1000823f 	.word	0x1000823f
 8004148:	40020940 	.word	0x40020940

0800414c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e147      	b.n	80043ee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc fde6 	bl	8000d44 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0210 	bic.w	r2, r2, #16
 8004186:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004188:	f7fd fc4e 	bl	8001a28 <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800418e:	e012      	b.n	80041b6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004190:	f7fd fc4a 	bl	8001a28 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b0a      	cmp	r3, #10
 800419c:	d90b      	bls.n	80041b6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2203      	movs	r2, #3
 80041ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e11b      	b.n	80043ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d0e5      	beq.n	8004190 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d4:	f7fd fc28 	bl	8001a28 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041da:	e012      	b.n	8004202 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041dc:	f7fd fc24 	bl	8001a28 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b0a      	cmp	r3, #10
 80041e8:	d90b      	bls.n	8004202 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	f043 0201 	orr.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0f5      	b.n	80043ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0e5      	beq.n	80041dc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0202 	orr.w	r2, r2, #2
 800421e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a74      	ldr	r2, [pc, #464]	@ (80043f8 <HAL_FDCAN_Init+0x2ac>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d103      	bne.n	8004232 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800422a:	4a74      	ldr	r2, [pc, #464]	@ (80043fc <HAL_FDCAN_Init+0x2b0>)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7c1b      	ldrb	r3, [r3, #16]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d108      	bne.n	800424c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004248:	619a      	str	r2, [r3, #24]
 800424a:	e007      	b.n	800425c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800425a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	7c5b      	ldrb	r3, [r3, #17]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d108      	bne.n	8004276 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004272:	619a      	str	r2, [r3, #24]
 8004274:	e007      	b.n	8004286 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004284:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	7c9b      	ldrb	r3, [r3, #18]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d108      	bne.n	80042a0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800429c:	619a      	str	r2, [r3, #24]
 800429e:	e007      	b.n	80042b0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042ae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689a      	ldr	r2, [r3, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699a      	ldr	r2, [r3, #24]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80042d4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0210 	bic.w	r2, r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d108      	bne.n	8004300 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0204 	orr.w	r2, r2, #4
 80042fc:	619a      	str	r2, [r3, #24]
 80042fe:	e02c      	b.n	800435a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d028      	beq.n	800435a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d01c      	beq.n	800434a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800431e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0210 	orr.w	r2, r2, #16
 800432e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d110      	bne.n	800435a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699a      	ldr	r2, [r3, #24]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0220 	orr.w	r2, r2, #32
 8004346:	619a      	str	r2, [r3, #24]
 8004348:	e007      	b.n	800435a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699a      	ldr	r2, [r3, #24]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0220 	orr.w	r2, r2, #32
 8004358:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	3b01      	subs	r3, #1
 8004360:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	3b01      	subs	r3, #1
 8004368:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800436a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004372:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	3b01      	subs	r3, #1
 800437c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004382:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004384:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800438e:	d115      	bne.n	80043bc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004394:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439a:	3b01      	subs	r3, #1
 800439c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800439e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	3b01      	subs	r3, #1
 80043a6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80043a8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	3b01      	subs	r3, #1
 80043b2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80043b8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80043ba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9ae 	bl	8004734 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40006400 	.word	0x40006400
 80043fc:	40006500 	.word	0x40006500

08004400 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	@ 0x30
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441c:	4013      	ands	r3, r2
 800441e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004434:	4013      	ands	r3, r2
 8004436:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444c:	4013      	ands	r3, r2
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004456:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800445a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	4013      	ands	r3, r2
 8004466:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004472:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	4013      	ands	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d006      	beq.n	80044b2 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2240      	movs	r2, #64	@ 0x40
 80044aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f921 	bl	80046f4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d019      	beq.n	80044f0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d014      	beq.n	80044f0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80044ce:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8e3 	bl	80046b6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80044fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f8a2 	bl	800464a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004512:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8a2 	bl	8004660 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800452a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f8a2 	bl	8004676 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00c      	beq.n	8004556 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800454e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f89b 	bl	800468c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	2b00      	cmp	r3, #0
 800455e:	d018      	beq.n	8004592 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004572:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4013      	ands	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2280      	movs	r2, #128	@ 0x80
 8004588:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f887 	bl	80046a0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00c      	beq.n	80045b6 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 f88b 	bl	80046cc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00c      	beq.n	80045da <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d007      	beq.n	80045da <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80045d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f883 	bl	80046e0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80045f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004612:	69f9      	ldr	r1, [r7, #28]
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f881 	bl	800471c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d009      	beq.n	8004634 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f863 	bl	8004708 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004642:	bf00      	nop
 8004644:	3730      	adds	r7, #48	@ 0x30
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800473c:	4b30      	ldr	r3, [pc, #192]	@ (8004800 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800473e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a2f      	ldr	r2, [pc, #188]	@ (8004804 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d103      	bne.n	8004752 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004750:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8004762:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004772:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800477a:	041a      	lsls	r2, r3, #16
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004798:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	061a      	lsls	r2, r3, #24
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e005      	b.n	80047e6 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d3f3      	bcc.n	80047da <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	4000a400 	.word	0x4000a400
 8004804:	40006800 	.word	0x40006800
 8004808:	40006c00 	.word	0x40006c00

0800480c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e033      	b.n	8004886 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fc fb04 	bl	8000e40 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f854 	bl	80048ec <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f822 	bl	800488e <FMAC_Reset>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10c      	bne.n	800486a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004854:	f043 0210 	orr.w	r2, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	22a0      	movs	r2, #160	@ 0xa0
 8004860:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
 8004868:	e008      	b.n	800487c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8004884:	7bfb      	ldrb	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004896:	f7fd f8c7 	bl	8001a28 <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048aa:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80048ac:	e00f      	b.n	80048ce <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80048ae:	f7fd f8bb 	bl	8001a28 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80048bc:	d907      	bls.n	80048ce <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00a      	b.n	80048e4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e8      	bne.n	80048ae <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f807 	bl	8004908 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f81b 	bl	8004936 <FMAC_ResetOutputStateAndDataPointers>
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 800492a:	bf00      	nop
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004972:	e15a      	b.n	8004c2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	fa01 f303 	lsl.w	r3, r1, r3
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 814c 	beq.w	8004c24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b01      	cmp	r3, #1
 8004996:	d005      	beq.n	80049a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d130      	bne.n	8004a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	2203      	movs	r2, #3
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	43db      	mvns	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049da:	2201      	movs	r2, #1
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	43db      	mvns	r3, r3
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	4013      	ands	r3, r2
 80049e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 0201 	and.w	r2, r3, #1
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d017      	beq.n	8004a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d123      	bne.n	8004a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	08da      	lsrs	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3208      	adds	r2, #8
 8004a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	220f      	movs	r2, #15
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43db      	mvns	r3, r3
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0307 	and.w	r3, r3, #7
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	08da      	lsrs	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3208      	adds	r2, #8
 8004a90:	6939      	ldr	r1, [r7, #16]
 8004a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0203 	and.w	r2, r3, #3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80a6 	beq.w	8004c24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad8:	4b5b      	ldr	r3, [pc, #364]	@ (8004c48 <HAL_GPIO_Init+0x2e4>)
 8004ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004adc:	4a5a      	ldr	r2, [pc, #360]	@ (8004c48 <HAL_GPIO_Init+0x2e4>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ae4:	4b58      	ldr	r3, [pc, #352]	@ (8004c48 <HAL_GPIO_Init+0x2e4>)
 8004ae6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	60bb      	str	r3, [r7, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af0:	4a56      	ldr	r2, [pc, #344]	@ (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	089b      	lsrs	r3, r3, #2
 8004af6:	3302      	adds	r3, #2
 8004af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	220f      	movs	r2, #15
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b1a:	d01f      	beq.n	8004b5c <HAL_GPIO_Init+0x1f8>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c50 <HAL_GPIO_Init+0x2ec>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d019      	beq.n	8004b58 <HAL_GPIO_Init+0x1f4>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a4b      	ldr	r2, [pc, #300]	@ (8004c54 <HAL_GPIO_Init+0x2f0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d013      	beq.n	8004b54 <HAL_GPIO_Init+0x1f0>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8004c58 <HAL_GPIO_Init+0x2f4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d00d      	beq.n	8004b50 <HAL_GPIO_Init+0x1ec>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a49      	ldr	r2, [pc, #292]	@ (8004c5c <HAL_GPIO_Init+0x2f8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d007      	beq.n	8004b4c <HAL_GPIO_Init+0x1e8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a48      	ldr	r2, [pc, #288]	@ (8004c60 <HAL_GPIO_Init+0x2fc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d101      	bne.n	8004b48 <HAL_GPIO_Init+0x1e4>
 8004b44:	2305      	movs	r3, #5
 8004b46:	e00a      	b.n	8004b5e <HAL_GPIO_Init+0x1fa>
 8004b48:	2306      	movs	r3, #6
 8004b4a:	e008      	b.n	8004b5e <HAL_GPIO_Init+0x1fa>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	e006      	b.n	8004b5e <HAL_GPIO_Init+0x1fa>
 8004b50:	2303      	movs	r3, #3
 8004b52:	e004      	b.n	8004b5e <HAL_GPIO_Init+0x1fa>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e002      	b.n	8004b5e <HAL_GPIO_Init+0x1fa>
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e000      	b.n	8004b5e <HAL_GPIO_Init+0x1fa>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	f002 0203 	and.w	r2, r2, #3
 8004b64:	0092      	lsls	r2, r2, #2
 8004b66:	4093      	lsls	r3, r2
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b6e:	4937      	ldr	r1, [pc, #220]	@ (8004c4c <HAL_GPIO_Init+0x2e8>)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	3302      	adds	r3, #2
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b7c:	4b39      	ldr	r3, [pc, #228]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	43db      	mvns	r3, r3
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ba0:	4a30      	ldr	r2, [pc, #192]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bca:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bd0:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43db      	mvns	r3, r3
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c1e:	4a11      	ldr	r2, [pc, #68]	@ (8004c64 <HAL_GPIO_Init+0x300>)
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3301      	adds	r3, #1
 8004c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f47f ae9d 	bne.w	8004974 <HAL_GPIO_Init+0x10>
  }
}
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	48000400 	.word	0x48000400
 8004c54:	48000800 	.word	0x48000800
 8004c58:	48000c00 	.word	0x48000c00
 8004c5c:	48001000 	.word	0x48001000
 8004c60:	48001400 	.word	0x48001400
 8004c64:	40010400 	.word	0x40010400

08004c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
 8004c74:	4613      	mov	r3, r2
 8004c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c78:	787b      	ldrb	r3, [r7, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	041a      	lsls	r2, r3, #16
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	43d9      	mvns	r1, r3
 8004cb6:	887b      	ldrh	r3, [r7, #2]
 8004cb8:	400b      	ands	r3, r1
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef *hhrtim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b086      	sub	sp, #24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if (hhrtim == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0be      	b.n	8004e5c <HAL_HRTIM_Init+0x190>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d02e      	beq.n	8004d88 <HAL_HRTIM_Init+0xbc>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4d      	ldr	r2, [pc, #308]	@ (8004e64 <HAL_HRTIM_Init+0x198>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d10b      	bne.n	8004d4c <HAL_HRTIM_Init+0x80>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004d34:	4b4c      	ldr	r3, [pc, #304]	@ (8004e68 <HAL_HRTIM_Init+0x19c>)
 8004d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d38:	4a4b      	ldr	r2, [pc, #300]	@ (8004e68 <HAL_HRTIM_Init+0x19c>)
 8004d3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004d40:	4b49      	ldr	r3, [pc, #292]	@ (8004e68 <HAL_HRTIM_Init+0x19c>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8004d5a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d70:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc fab7 	bl	80012fc <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d012      	beq.n	8004dc0 <HAL_HRTIM_Init+0xf4>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75fb      	strb	r3, [r7, #23]
 8004dd4:	e03e      	b.n	8004e54 <HAL_HRTIM_Init+0x188>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8004dd6:	7dfa      	ldrb	r2, [r7, #23]
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	1a9b      	subs	r3, r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	3318      	adds	r3, #24
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8004dea:	7dfa      	ldrb	r2, [r7, #23]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	331c      	adds	r3, #28
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8004dfe:	7dfa      	ldrb	r2, [r7, #23]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3320      	adds	r3, #32
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8004e12:	7dfa      	ldrb	r2, [r7, #23]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	3324      	adds	r3, #36	@ 0x24
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8004e26:	7dfa      	ldrb	r2, [r7, #23]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	1a9b      	subs	r3, r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	3328      	adds	r3, #40	@ 0x28
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8004e3a:	7dfa      	ldrb	r2, [r7, #23]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3330      	adds	r3, #48	@ 0x30
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8004e4e:	7dfb      	ldrb	r3, [r7, #23]
 8004e50:	3301      	adds	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d9bd      	bls.n	8004dd6 <HAL_HRTIM_Init+0x10a>
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40016800 	.word	0x40016800
 8004e68:	40021000 	.word	0x40021000

08004e6c <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t CalibrationRate)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e045      	b.n	8004f10 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d114      	bne.n	8004ec6 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0202 	bic.w	r2, r2, #2
 8004eac:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
 8004ec4:	e01f      	b.n	8004f06 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0202 	orr.w	r2, r2, #2
 8004ed6:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8d3 33cc 	ldr.w	r3, [r3, #972]	@ 0x3cc
 8004ee2:	f023 010c 	bic.w	r1, r3, #12
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t Timeout)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 8004f26:	f7fc fd7f 	bl	8001a28 <HAL_GetTick>
 8004f2a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004f2c:	e014      	b.n	8004f58 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f34:	d010      	beq.n	8004f58 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fc fd77 	bl	8001a28 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <HAL_HRTIM_PollForDLLCalibration+0x30>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d105      	bne.n	8004f58 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e011      	b.n	8004f7c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8004f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f68:	d1e1      	bne.n	8004f2e <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d101      	bne.n	8004fa0 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e015      	b.n	8004fcc <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d104      	bne.n	8004fb8 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 ff95 	bl	8005ee0 <HRTIM_MasterBase_Config>
 8004fb6:	e004      	b.n	8004fc2 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 ffbe 	bl	8005f3e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef *pADCTriggerCfg)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d101      	bne.n	8004ff0 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
    return HAL_BUSY;
 8004fec:	2302      	movs	r3, #2
 8004fee:	e1d7      	b.n	80053a0 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e1d0      	b.n	80053a0 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8005016:	617b      	str	r3, [r7, #20]
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8005020:	613b      	str	r3, [r7, #16]

  switch (ADCTrigger)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005028:	f000 816d 	beq.w	8005306 <HAL_HRTIM_ADCTriggerConfig+0x332>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005032:	f200 818d 	bhi.w	8005350 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503c:	f000 813f 	beq.w	80052be <HAL_HRTIM_ADCTriggerConfig+0x2ea>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005046:	f200 8183 	bhi.w	8005350 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b80      	cmp	r3, #128	@ 0x80
 800504e:	f000 8111 	beq.w	8005274 <HAL_HRTIM_ADCTriggerConfig+0x2a0>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b80      	cmp	r3, #128	@ 0x80
 8005056:	f200 817b 	bhi.w	8005350 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b20      	cmp	r3, #32
 800505e:	d84b      	bhi.n	80050f8 <HAL_HRTIM_ADCTriggerConfig+0x124>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8174 	beq.w	8005350 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	2b1f      	cmp	r3, #31
 800506e:	f200 816f 	bhi.w	8005350 <HAL_HRTIM_ADCTriggerConfig+0x37c>
 8005072:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <HAL_HRTIM_ADCTriggerConfig+0xa4>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005103 	.word	0x08005103
 800507c:	08005127 	.word	0x08005127
 8005080:	08005351 	.word	0x08005351
 8005084:	0800514d 	.word	0x0800514d
 8005088:	08005351 	.word	0x08005351
 800508c:	08005351 	.word	0x08005351
 8005090:	08005351 	.word	0x08005351
 8005094:	08005173 	.word	0x08005173
 8005098:	08005351 	.word	0x08005351
 800509c:	08005351 	.word	0x08005351
 80050a0:	08005351 	.word	0x08005351
 80050a4:	08005351 	.word	0x08005351
 80050a8:	08005351 	.word	0x08005351
 80050ac:	08005351 	.word	0x08005351
 80050b0:	08005351 	.word	0x08005351
 80050b4:	08005199 	.word	0x08005199
 80050b8:	08005351 	.word	0x08005351
 80050bc:	08005351 	.word	0x08005351
 80050c0:	08005351 	.word	0x08005351
 80050c4:	08005351 	.word	0x08005351
 80050c8:	08005351 	.word	0x08005351
 80050cc:	08005351 	.word	0x08005351
 80050d0:	08005351 	.word	0x08005351
 80050d4:	08005351 	.word	0x08005351
 80050d8:	08005351 	.word	0x08005351
 80050dc:	08005351 	.word	0x08005351
 80050e0:	08005351 	.word	0x08005351
 80050e4:	08005351 	.word	0x08005351
 80050e8:	08005351 	.word	0x08005351
 80050ec:	08005351 	.word	0x08005351
 80050f0:	08005351 	.word	0x08005351
 80050f4:	080051e1 	.word	0x080051e1
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b40      	cmp	r3, #64	@ 0x40
 80050fc:	f000 8095 	beq.w	800522a <HAL_HRTIM_ADCTriggerConfig+0x256>
 8005100:	e126      	b.n	8005350 <HAL_HRTIM_ADCTriggerConfig+0x37c>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005108:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
      break;
 8005124:	e11d      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f423 1360 	bic.w	r3, r3, #3670016	@ 0x380000
 800512c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6852      	ldr	r2, [r2, #4]
 8005146:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
      break;
 800514a:	e10a      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005152:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	019b      	lsls	r3, r3, #6
 800515a:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6852      	ldr	r2, [r2, #4]
 800516c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
      break;
 8005170:	e0f7      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8005178:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	025b      	lsls	r3, r3, #9
 8005180:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6852      	ldr	r2, [r2, #4]
 8005192:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
      break;
 8005196:	e0e4      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD5USRC);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 5 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 021f 	bic.w	r2, r2, #31
 80051c0:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 021f 	and.w	r2, r3, #31
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80051de:	e0c0      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051e6:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0b1b      	lsrs	r3, r3, #12
 80051ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 6 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 7278 	bic.w	r2, r2, #992	@ 0x3e0
 8005208:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	015b      	lsls	r3, r3, #5
 800521a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8005228:	e09b      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005230:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 7 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8005252:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	f403 42f8 	and.w	r2, r3, #31744	@ 0x7c00
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8005272:	e076      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800527a:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 8 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800529c:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	f403 12f8 	and.w	r2, r3, #2031616	@ 0x1f0000
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 80052bc:	e051      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80052c4:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 9 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 7278 	bic.w	r2, r2, #65011712	@ 0x3e00000
 80052e4:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	055b      	lsls	r3, r3, #21
 80052f6:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 8005304:	e02d      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800530c:	613b      	str	r3, [r7, #16]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

      /* Set the ADC trigger 10 source */
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8d3 23f8 	ldr.w	r2, [r3, #1016]	@ 0x3f8
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800532e:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f8d3 13f8 	ldr.w	r1, [r3, #1016]	@ 0x3f8
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	069b      	lsls	r3, r3, #26
 8005340:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
      break;
 800534e:	e008      	b.n	8005362 <HAL_HRTIM_ADCTriggerConfig+0x38e>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2207      	movs	r2, #7
 8005354:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8005360:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b07      	cmp	r3, #7
 800536c:	d101      	bne.n	8005372 <HAL_HRTIM_ADCTriggerConfig+0x39e>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e016      	b.n	80053a0 <HAL_HRTIM_ADCTriggerConfig+0x3cc>
  }

  /* Update the HRTIM registers */
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b0f      	cmp	r3, #15
 8005376:	d805      	bhi.n	8005384 <HAL_HRTIM_ADCTriggerConfig+0x3b0>
  {
    hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
 8005382:	e004      	b.n	800538e <HAL_HRTIM_ADCTriggerConfig+0x3ba>
  }
  else
  {
    hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_HRTIM_ADCPostScalerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCPostScalerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t ADCTrigger,
                                                uint32_t Postscaler)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d101      	bne.n	80053c8 <HAL_HRTIM_ADCPostScalerConfig+0x1c>
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
 80053c6:	e135      	b.n	8005634 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d101      	bne.n	80053d6 <HAL_HRTIM_ADCPostScalerConfig+0x2a>
 80053d2:	2302      	movs	r3, #2
 80053d4:	e12e      	b.n	8005634 <HAL_HRTIM_ADCPostScalerConfig+0x288>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  switch (ADCTrigger)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053ec:	f000 80f8 	beq.w	80055e0 <HAL_HRTIM_ADCPostScalerConfig+0x234>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053f6:	f200 8103 	bhi.w	8005600 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005400:	f000 80de 	beq.w	80055c0 <HAL_HRTIM_ADCPostScalerConfig+0x214>
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540a:	f200 80f9 	bhi.w	8005600 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b80      	cmp	r3, #128	@ 0x80
 8005412:	f000 80c5 	beq.w	80055a0 <HAL_HRTIM_ADCPostScalerConfig+0x1f4>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	f200 80f1 	bhi.w	8005600 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b20      	cmp	r3, #32
 8005422:	d84b      	bhi.n	80054bc <HAL_HRTIM_ADCPostScalerConfig+0x110>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80ea 	beq.w	8005600 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	3b01      	subs	r3, #1
 8005430:	2b1f      	cmp	r3, #31
 8005432:	f200 80e5 	bhi.w	8005600 <HAL_HRTIM_ADCPostScalerConfig+0x254>
 8005436:	a201      	add	r2, pc, #4	@ (adr r2, 800543c <HAL_HRTIM_ADCPostScalerConfig+0x90>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	080054c5 	.word	0x080054c5
 8005440:	080054e3 	.word	0x080054e3
 8005444:	08005601 	.word	0x08005601
 8005448:	08005503 	.word	0x08005503
 800544c:	08005601 	.word	0x08005601
 8005450:	08005601 	.word	0x08005601
 8005454:	08005601 	.word	0x08005601
 8005458:	08005523 	.word	0x08005523
 800545c:	08005601 	.word	0x08005601
 8005460:	08005601 	.word	0x08005601
 8005464:	08005601 	.word	0x08005601
 8005468:	08005601 	.word	0x08005601
 800546c:	08005601 	.word	0x08005601
 8005470:	08005601 	.word	0x08005601
 8005474:	08005601 	.word	0x08005601
 8005478:	08005543 	.word	0x08005543
 800547c:	08005601 	.word	0x08005601
 8005480:	08005601 	.word	0x08005601
 8005484:	08005601 	.word	0x08005601
 8005488:	08005601 	.word	0x08005601
 800548c:	08005601 	.word	0x08005601
 8005490:	08005601 	.word	0x08005601
 8005494:	08005601 	.word	0x08005601
 8005498:	08005601 	.word	0x08005601
 800549c:	08005601 	.word	0x08005601
 80054a0:	08005601 	.word	0x08005601
 80054a4:	08005601 	.word	0x08005601
 80054a8:	08005601 	.word	0x08005601
 80054ac:	08005601 	.word	0x08005601
 80054b0:	08005601 	.word	0x08005601
 80054b4:	08005601 	.word	0x08005601
 80054b8:	08005563 	.word	0x08005563
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d05e      	beq.n	8005580 <HAL_HRTIM_ADCPostScalerConfig+0x1d4>
 80054c2:	e09d      	b.n	8005600 <HAL_HRTIM_ADCPostScalerConfig+0x254>
  {
    case HRTIM_ADCTRIGGER_1:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80054cc:	f023 011f 	bic.w	r1, r3, #31
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f003 021f 	and.w	r2, r3, #31
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 80054e0:	e097      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_2:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80054ea:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005500:	e087      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_3:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800550a:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	031b      	lsls	r3, r3, #12
 8005512:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005520:	e077      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_4:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800552a:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	049b      	lsls	r3, r3, #18
 8005532:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005540:	e067      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_5:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800554a:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      break;
 8005560:	e057      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_6:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800556a:	f023 011f 	bic.w	r1, r3, #31
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f003 021f 	and.w	r2, r3, #31
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 800557e:	e048      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_7:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8005588:	f423 61f8 	bic.w	r1, r3, #1984	@ 0x7c0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	019b      	lsls	r3, r3, #6
 8005590:	f403 62f8 	and.w	r2, r3, #1984	@ 0x7c0
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 800559e:	e038      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_8:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80055a8:	f423 31f8 	bic.w	r1, r3, #126976	@ 0x1f000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	031b      	lsls	r3, r3, #12
 80055b0:	f403 32f8 	and.w	r2, r3, #126976	@ 0x1f000
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80055be:	e028      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_9:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80055c8:	f423 01f8 	bic.w	r1, r3, #8126464	@ 0x7c0000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	049b      	lsls	r3, r3, #18
 80055d0:	f403 02f8 	and.w	r2, r3, #8126464	@ 0x7c0000
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80055de:	e018      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    case HRTIM_ADCTRIGGER_10:
    {
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80055e8:	f023 51f8 	bic.w	r1, r3, #520093696	@ 0x1f000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	061b      	lsls	r3, r3, #24
 80055f0:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      break;
 80055fe:	e008      	b.n	8005612 <HAL_HRTIM_ADCPostScalerConfig+0x266>
    }

    default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2207      	movs	r2, #7
 8005604:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      break;
 8005610:	bf00      	nop
    }
  }

  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b07      	cmp	r3, #7
 800561c:	d101      	bne.n	8005622 <HAL_HRTIM_ADCPostScalerConfig+0x276>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e008      	b.n	8005634 <HAL_HRTIM_ADCPostScalerConfig+0x288>
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d101      	bne.n	800565c <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
    return HAL_BUSY;
 8005658:	2302      	movs	r3, #2
 800565a:	e07a      	b.n	8005752 <HAL_HRTIM_WaveformTimerConfig+0x112>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005666:	2302      	movs	r3, #2
 8005668:	e073      	b.n	8005752 <HAL_HRTIM_WaveformTimerConfig+0x112>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2202      	movs	r2, #2
 8005676:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d104      	bne.n	800568a <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fc9b 	bl	8005fbe <HRTIM_MasterWaveform_Config>
 8005688:	e004      	b.n	8005694 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));
    assert_param(IS_HRTIM_TIMSYNCUPDATE(pTimerCfg->ReSyncUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68b9      	ldr	r1, [r7, #8]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f000 fd32 	bl	80060f8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6819      	ldr	r1, [r3, #0]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	1a9b      	subs	r3, r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4403      	add	r3, r0
 80056a6:	3320      	adds	r3, #32
 80056a8:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4403      	add	r3, r0
 80056bc:	3324      	adds	r3, #36	@ 0x24
 80056be:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4403      	add	r3, r0
 80056d2:	3328      	adds	r3, #40	@ 0x28
 80056d4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68d9      	ldr	r1, [r3, #12]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4403      	add	r3, r0
 80056e8:	332c      	adds	r3, #44	@ 0x2c
 80056ea:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6919      	ldr	r1, [r3, #16]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4613      	mov	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4403      	add	r3, r0
 80056fe:	3330      	adds	r3, #48	@ 0x30
 8005700:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 ffc5 	bl	8006694 <HRTIM_ForceRegistersUpdate>

  /* Configure slave timer update re-synchronization */
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2b06      	cmp	r3, #6
 800570e:	d017      	beq.n	8005740 <HAL_HRTIM_WaveformTimerConfig+0x100>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d113      	bne.n	8005740 <HAL_HRTIM_WaveformTimerConfig+0x100>
  {
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3301      	adds	r3, #1
 8005720:	01db      	lsls	r3, r3, #7
 8005722:	4413      	add	r3, r2
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572e:	025b      	lsls	r3, r3, #9
 8005730:	68f9      	ldr	r1, [r7, #12]
 8005732:	6809      	ldr	r1, [r1, #0]
 8005734:	431a      	orrs	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3301      	adds	r3, #1
 800573a:	01db      	lsls	r3, r3, #7
 800573c:	440b      	add	r3, r1
 800573e:	601a      	str	r2, [r3, #0]
               HRTIM_TIMCR_RSYNCU_Msk,
               pTimerCfg->ReSyncUpdate << HRTIM_TIMCR_RSYNCU_Pos);
  }

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_HRTIM_WaveformTimerControl>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerControl(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b084      	sub	sp, #16
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMERGTCMP1(pTimerCtl->GreaterCMP1));
  assert_param(IS_HRTIM_DUALDAC_RESET(pTimerCtl->DualChannelDacReset));
  assert_param(IS_HRTIM_DUALDAC_STEP(pTimerCtl->DualChannelDacStep));
  assert_param(IS_HRTIM_DUALDAC_ENABLE(pTimerCtl->DualChannelDacEnable));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d101      	bne.n	8005776 <HAL_HRTIM_WaveformTimerControl+0x1c>
  {
    return HAL_BUSY;
 8005772:	2302      	movs	r3, #2
 8005774:	e020      	b.n	80057b8 <HAL_HRTIM_WaveformTimerControl+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_HRTIM_WaveformTimerControl+0x2a>
 8005780:	2302      	movs	r3, #2
 8005782:	e019      	b.n	80057b8 <HAL_HRTIM_WaveformTimerControl+0x5e>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure timing unit */
  HRTIM_TimingUnitWaveform_Control(hhrtim, TimerIdx, pTimerCtl);
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 fe33 	bl	8006404 <HRTIM_TimingUnitWaveform_Control>

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 ff77 	bl	8006694 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_HRTIM_DeadTimeConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_DeadTimeConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_DeadTimeCfgTypeDef *pDeadTimeCfg)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_TIMDEADTIME_RISINGSIGNLOCK(pDeadTimeCfg->RisingSignLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGN(pDeadTimeCfg->FallingSign));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGLOCK(pDeadTimeCfg->FallingLock));
  assert_param(IS_HRTIM_TIMDEADTIME_FALLINGSIGNLOCK(pDeadTimeCfg->FallingSignLock));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d101      	bne.n	80057dc <HAL_HRTIM_DeadTimeConfig+0x1c>
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
 80057da:	e067      	b.n	80058ac <HAL_HRTIM_DeadTimeConfig+0xec>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_HRTIM_DeadTimeConfig+0x2a>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e060      	b.n	80058ac <HAL_HRTIM_DeadTimeConfig+0xec>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Set timer deadtime configuration */
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005802:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	4313      	orrs	r3, r2
 800582c:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	041a      	lsls	r2, r3, #16
 8005842:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <HAL_HRTIM_DeadTimeConfig+0xf8>)
 8005844:	4013      	ands	r3, r2
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	4313      	orrs	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	4313      	orrs	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	01db      	lsls	r3, r3, #7
 800587e:	4413      	add	r3, r2
 8005880:	33b8      	adds	r3, #184	@ 0xb8
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <HAL_HRTIM_DeadTimeConfig+0xfc>)
 8005886:	4013      	ands	r3, r2
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	6811      	ldr	r1, [r2, #0]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	431a      	orrs	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	01db      	lsls	r3, r3, #7
 8005894:	440b      	add	r3, r1
 8005896:	33b8      	adds	r3, #184	@ 0xb8
 8005898:	601a      	str	r2, [r3, #0]
               HRTIM_DTR_DTR | HRTIM_DTR_SDTR | HRTIM_DTR_DTPRSC |
               HRTIM_DTR_DTRSLK | HRTIM_DTR_DTRLK | HRTIM_DTR_DTF |
               HRTIM_DTR_SDTF | HRTIM_DTR_DTFSLK | HRTIM_DTR_DTFLK), hrtim_dtr);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	371c      	adds	r7, #28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	01ff0000 	.word	0x01ff0000
 80058bc:	3c002000 	.word	0x3c002000

080058c0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef *hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef *pCompareCfg)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d101      	bne.n	80058de <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
 80058dc:	e157      	b.n	8005b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e150      	b.n	8005b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d140      	bne.n	8005984 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	3b01      	subs	r3, #1
 8005906:	2b07      	cmp	r3, #7
 8005908:	d82a      	bhi.n	8005960 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800590a:	a201      	add	r2, pc, #4	@ (adr r2, 8005910 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800590c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005910:	08005931 	.word	0x08005931
 8005914:	0800593d 	.word	0x0800593d
 8005918:	08005961 	.word	0x08005961
 800591c:	08005949 	.word	0x08005949
 8005920:	08005961 	.word	0x08005961
 8005924:	08005961 	.word	0x08005961
 8005928:	08005961 	.word	0x08005961
 800592c:	08005955 	.word	0x08005955
    {
      case HRTIM_COMPAREUNIT_1:
      {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	61da      	str	r2, [r3, #28]
        break;
 800593a:	e01a      	b.n	8005972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_2:
      {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24
        break;
 8005946:	e014      	b.n	8005972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	6812      	ldr	r2, [r2, #0]
 8005950:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8005952:	e00e      	b.n	8005972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      case HRTIM_COMPAREUNIT_4:
      {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800595e:	e008      	b.n	8005972 <HAL_HRTIM_WaveformCompareConfig+0xb2>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2207      	movs	r2, #7
 8005964:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8005970:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b07      	cmp	r3, #7
 800597c:	f040 80fe 	bne.w	8005b7c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e104      	b.n	8005b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3b01      	subs	r3, #1
 8005988:	2b07      	cmp	r3, #7
 800598a:	f200 80e3 	bhi.w	8005b54 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800598e:	a201      	add	r2, pc, #4	@ (adr r2, 8005994 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059b5 	.word	0x080059b5
 8005998:	080059c9 	.word	0x080059c9
 800599c:	08005b55 	.word	0x08005b55
 80059a0:	08005a85 	.word	0x08005a85
 80059a4:	08005b55 	.word	0x08005b55
 80059a8:	08005b55 	.word	0x08005b55
 80059ac:	08005b55 	.word	0x08005b55
 80059b0:	08005a99 	.word	0x08005a99
    {
      case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6819      	ldr	r1, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	01db      	lsls	r3, r3, #7
 80059c0:	440b      	add	r3, r1
 80059c2:	339c      	adds	r3, #156	@ 0x9c
 80059c4:	601a      	str	r2, [r3, #0]
        break;
 80059c6:	e0d1      	b.n	8005b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	01db      	lsls	r3, r3, #7
 80059d4:	440b      	add	r3, r1
 80059d6:	33a4      	adds	r3, #164	@ 0xa4
 80059d8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d03f      	beq.n	8005a62 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	3301      	adds	r3, #1
 80059ea:	01db      	lsls	r3, r3, #7
 80059ec:	4413      	add	r3, r2
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	6811      	ldr	r1, [r2, #0]
 80059f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	3301      	adds	r3, #1
 80059fc:	01db      	lsls	r3, r3, #7
 80059fe:	440b      	add	r3, r1
 8005a00:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	01db      	lsls	r3, r3, #7
 8005a0c:	4413      	add	r3, r2
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68f9      	ldr	r1, [r7, #12]
 8005a16:	6809      	ldr	r1, [r1, #0]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	01db      	lsls	r3, r3, #7
 8005a20:	440b      	add	r3, r1
 8005a22:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a2c:	d109      	bne.n	8005a42 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	01db      	lsls	r3, r3, #7
 8005a3a:	440b      	add	r3, r1
 8005a3c:	339c      	adds	r3, #156	@ 0x9c
 8005a3e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
        break;
 8005a40:	e091      	b.n	8005b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a4a:	f040 808c 	bne.w	8005b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	01db      	lsls	r3, r3, #7
 8005a5a:	440b      	add	r3, r1
 8005a5c:	33a8      	adds	r3, #168	@ 0xa8
 8005a5e:	601a      	str	r2, [r3, #0]
        break;
 8005a60:	e081      	b.n	8005b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	01db      	lsls	r3, r3, #7
 8005a6c:	4413      	add	r3, r2
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	6811      	ldr	r1, [r2, #0]
 8005a74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	01db      	lsls	r3, r3, #7
 8005a7e:	440b      	add	r3, r1
 8005a80:	601a      	str	r2, [r3, #0]
        break;
 8005a82:	e070      	b.n	8005b66 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

      case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6819      	ldr	r1, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	01db      	lsls	r3, r3, #7
 8005a90:	440b      	add	r3, r1
 8005a92:	33a8      	adds	r3, #168	@ 0xa8
 8005a94:	601a      	str	r2, [r3, #0]
        break;
 8005a96:	e069      	b.n	8005b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6819      	ldr	r1, [r3, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	01db      	lsls	r3, r3, #7
 8005aa4:	440b      	add	r3, r1
 8005aa6:	33ac      	adds	r3, #172	@ 0xac
 8005aa8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d03f      	beq.n	8005b32 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	01db      	lsls	r3, r3, #7
 8005abc:	4413      	add	r3, r2
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	6811      	ldr	r1, [r2, #0]
 8005ac4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	3301      	adds	r3, #1
 8005acc:	01db      	lsls	r3, r3, #7
 8005ace:	440b      	add	r3, r1
 8005ad0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	01db      	lsls	r3, r3, #7
 8005adc:	4413      	add	r3, r2
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	68f9      	ldr	r1, [r7, #12]
 8005ae8:	6809      	ldr	r1, [r1, #0]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	3301      	adds	r3, #1
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	440b      	add	r3, r1
 8005af4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afe:	d109      	bne.n	8005b14 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	01db      	lsls	r3, r3, #7
 8005b0c:	440b      	add	r3, r1
 8005b0e:	339c      	adds	r3, #156	@ 0x9c
 8005b10:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
        break;
 8005b12:	e02a      	b.n	8005b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b1c:	d125      	bne.n	8005b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	01db      	lsls	r3, r3, #7
 8005b2a:	440b      	add	r3, r1
 8005b2c:	33a8      	adds	r3, #168	@ 0xa8
 8005b2e:	601a      	str	r2, [r3, #0]
        break;
 8005b30:	e01b      	b.n	8005b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	4413      	add	r3, r2
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	6811      	ldr	r1, [r2, #0]
 8005b44:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	01db      	lsls	r3, r3, #7
 8005b4e:	440b      	add	r3, r1
 8005b50:	601a      	str	r2, [r3, #0]
        break;
 8005b52:	e00a      	b.n	8005b6a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

      default:
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2207      	movs	r2, #7
 8005b58:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

        break;
 8005b64:	e002      	b.n	8005b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8005b66:	bf00      	nop
 8005b68:	e000      	b.n	8005b6c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
        break;
 8005b6a:	bf00      	nop
      }
    }

    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b07      	cmp	r3, #7
 8005b76:	d101      	bne.n	8005b7c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e008      	b.n	8005b8e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop

08005b9c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                                 uint32_t TimerIdx,
                                                 uint32_t Output,
                                                 const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 30dd 	ldrb.w	r3, [r3, #221]	@ 0xdd
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d101      	bne.n	8005bba <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
    return HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e01d      	b.n	8005bf6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e016      	b.n	8005bf6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fc70 	bl	80064c4 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TF2: Timer F - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t OutputsToStart)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e01a      	b.n	8005c4c <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8d3 1394 	ldr.w	r1, [r3, #916]	@ 0x394
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_F
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef *hhrtim,
                                               uint32_t Timers)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_HRTIM_WaveformCountStart+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e018      	b.n	8005ca2 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6819      	ldr	r1, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef *hhrtim,
                          uint32_t TimerIdx)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2bff      	cmp	r3, #255	@ 0xff
 8005cbc:	d103      	bne.n	8005cc6 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fd56 	bl	8006770 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8005cc4:	e00a      	b.n	8005cdc <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d103      	bne.n	8005cd4 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fddf 	bl	8006890 <HRTIM_Master_ISR>
}
 8005cd2:	e003      	b.n	8005cdc <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fe9f 	bl	8006a1a <HRTIM_Timer_ISR>
}
 8005cdc:	bf00      	nop
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_HRTIM_Fault6Callback>:
  * @brief  Callback function invoked when a fault 6 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault6Callback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault6Callback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_HRTIM_DLLCalibrationReadyCallback>:
  * @brief  Callback function invoked when the DLL calibration is completed
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_DLLCalibrationReadyCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_DLLCalibrationCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef *hhrtim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_HRTIM_RepetitionEventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
                                              uint32_t TimerIdx)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RepetitionEventCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_HRTIM_Compare2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  */
__weak void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare2EventCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_HRTIM_Compare3EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare3EventCallback could be implemented in the user file
   */
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef *hhrtim,
                                            uint32_t TimerIdx)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef *hhrtim,
                                                uint32_t TimerIdx)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef *hhrtim,
                                         uint32_t TimerIdx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 0307 	bic.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0318 	bic.w	r3, r3, #24
 8005f0a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	6852      	ldr	r2, [r2, #4]
 8005f30:	619a      	str	r2, [r3, #24]
}
 8005f32:	bf00      	nop
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef *hhrtim,
                                        uint32_t TimerIdx,
                                        const HRTIM_TimeBaseCfgTypeDef *pTimeBaseCfg)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b087      	sub	sp, #28
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	3301      	adds	r3, #1
 8005f52:	01db      	lsls	r3, r3, #7
 8005f54:	4413      	add	r3, r2
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f023 0307 	bic.w	r3, r3, #7
 8005f60:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f023 0318 	bic.w	r3, r3, #24
 8005f72:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	3301      	adds	r3, #1
 8005f86:	01db      	lsls	r3, r3, #7
 8005f88:	4413      	add	r3, r2
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	01db      	lsls	r3, r3, #7
 8005f9a:	440b      	add	r3, r1
 8005f9c:	3394      	adds	r3, #148	@ 0x94
 8005f9e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	01db      	lsls	r3, r3, #7
 8005fac:	440b      	add	r3, r1
 8005fae:	3398      	adds	r3, #152	@ 0x98
 8005fb0:	601a      	str	r2, [r3, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                        const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 8005fd8:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f023 0320 	bic.w	r3, r3, #32
 8005fe0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60fb      	str	r3, [r7, #12]

  /* INTLVD bits are set to 00 */
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005ff2:	60fb      	str	r3, [r7, #12]
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d003      	beq.n	8006004 <HRTIM_MasterWaveform_Config+0x46>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d108      	bne.n	8006016 <HRTIM_MasterWaveform_Config+0x58>
  {
    /* INTLVD bits set to 00 */
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800600a:	60fb      	str	r3, [r7, #12]
    hrtim_mcr |= (HRTIM_MCR_HALF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f043 0320 	orr.w	r3, r3, #32
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e021      	b.n	800605a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d108      	bne.n	8006030 <HRTIM_MasterWaveform_Config+0x72>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006024:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	e014      	b.n	800605a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	2b04      	cmp	r3, #4
 8006036:	d108      	bne.n	800604a <HRTIM_MasterWaveform_Config+0x8c>
  {
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_0);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e007      	b.n	800605a <HRTIM_MasterWaveform_Config+0x9c>
  }
  else
  {
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	60fb      	str	r3, [r7, #12]
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006058:	60fb      	str	r3, [r7, #12]
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006060:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006072:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006084:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8006096:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80060a8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060bc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ce:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef *pTimerCfg)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b08b      	sub	sp, #44	@ 0x2c
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	3301      	adds	r3, #1
 800610c:	01db      	lsls	r3, r3, #7
 800610e:	4413      	add	r3, r2
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	6811      	ldr	r1, [r2, #0]
 8006116:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	3301      	adds	r3, #1
 800611e:	01db      	lsls	r3, r3, #7
 8006120:	440b      	add	r3, r1
 8006122:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3301      	adds	r3, #1
 800612c:	01db      	lsls	r3, r3, #7
 800612e:	4413      	add	r3, r2
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	01db      	lsls	r3, r3, #7
 800613c:	4413      	add	r3, r2
 800613e:	33e8      	adds	r3, #232	@ 0xe8
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	01db      	lsls	r3, r3, #7
 800614c:	4413      	add	r3, r2
 800614e:	33e4      	adds	r3, #228	@ 0xe4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8d3 33a0 	ldr.w	r3, [r3, #928]	@ 0x3a0
 800615c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	f023 0320 	bic.w	r3, r3, #32
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616c:	4313      	orrs	r3, r2
 800616e:	627b      	str	r3, [r7, #36]	@ 0x24

  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b20      	cmp	r3, #32
 8006176:	d003      	beq.n	8006180 <HRTIM_TimingUnitWaveform_Config+0x88>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	2b02      	cmp	r3, #2
 800617e:	d108      	bne.n	8006192 <HRTIM_TimingUnitWaveform_Config+0x9a>
  {
    /* INTLVD bits set to 00 */
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	f043 0320 	orr.w	r3, r3, #32
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006190:	e021      	b.n	80061d6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b03      	cmp	r3, #3
 8006198:	d108      	bne.n	80061ac <HRTIM_TimingUnitWaveform_Config+0xb4>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_0);
 800619a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a0:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061aa:	e014      	b.n	80061d6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d108      	bne.n	80061c6 <HRTIM_TimingUnitWaveform_Config+0xce>
  {
    hrtim_timcr |= (HRTIM_TIMCR_INTLVD_1);
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 80061bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c4:	e007      	b.n	80061d6 <HRTIM_TimingUnitWaveform_Config+0xde>
  }
  else
  {
    hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80061c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c8:	f023 0320 	bic.w	r3, r3, #32
 80061cc:	627b      	str	r3, [r7, #36]	@ 0x24
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061e4:	4313      	orrs	r3, r2
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80061e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	4313      	orrs	r3, r2
 80061f8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80061fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006208:	4313      	orrs	r3, r2
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621a:	4313      	orrs	r3, r2
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622c:	4313      	orrs	r3, r2
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006240:	d103      	bne.n	800624a <HRTIM_TimingUnitWaveform_Config+0x152>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	4313      	orrs	r3, r2
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626a:	4313      	orrs	r3, r2
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	f023 73fc 	bic.w	r3, r3, #33030144	@ 0x1f80000
 8006274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800627e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006280:	4313      	orrs	r3, r2
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800628a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4313      	orrs	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062a0:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]

  /* Enable/Disable dead time insertion at timer level */
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062b2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	6a3a      	ldr	r2, [r7, #32]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062c2:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80062c6:	d004      	beq.n	80062d2 <HRTIM_TimingUnitWaveform_Config+0x1da>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062cc:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80062d0:	d103      	bne.n	80062da <HRTIM_TimingUnitWaveform_Config+0x1e2>
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	2b40      	cmp	r3, #64	@ 0x40
 80062d8:	d108      	bne.n	80062ec <HRTIM_TimingUnitWaveform_Config+0x1f4>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
 80062e0:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	623b      	str	r3, [r7, #32]
  }

  /* Set the BIAR mode : one bit for both outputs */
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062f2:	623b      	str	r3, [r7, #32]
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062f8:	6a3a      	ldr	r2, [r7, #32]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	623b      	str	r3, [r7, #32]

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006302:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b05      	cmp	r3, #5
 8006308:	d850      	bhi.n	80063ac <HRTIM_TimingUnitWaveform_Config+0x2b4>
 800630a:	a201      	add	r2, pc, #4	@ (adr r2, 8006310 <HRTIM_TimingUnitWaveform_Config+0x218>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006329 	.word	0x08006329
 8006314:	0800633f 	.word	0x0800633f
 8006318:	08006355 	.word	0x08006355
 800631c:	0800636b 	.word	0x0800636b
 8006320:	08006381 	.word	0x08006381
 8006324:	08006397 	.word	0x08006397
  {
    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800632e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	69fa      	ldr	r2, [r7, #28]
 8006338:	4313      	orrs	r3, r2
 800633a:	61fb      	str	r3, [r7, #28]
      break;
 800633c:	e037      	b.n	80063ae <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006344:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	4313      	orrs	r3, r2
 8006350:	61fb      	str	r3, [r7, #28]
      break;
 8006352:	e02c      	b.n	80063ae <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800635a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	4313      	orrs	r3, r2
 8006366:	61fb      	str	r3, [r7, #28]
      break;
 8006368:	e021      	b.n	80063ae <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006370:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	4313      	orrs	r3, r2
 800637c:	61fb      	str	r3, [r7, #28]
      break;
 800637e:	e016      	b.n	80063ae <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006386:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	015b      	lsls	r3, r3, #5
 800638e:	69fa      	ldr	r2, [r7, #28]
 8006390:	4313      	orrs	r3, r2
 8006392:	61fb      	str	r3, [r7, #28]
      break;
 8006394:	e00b      	b.n	80063ae <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800639c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	019b      	lsls	r3, r3, #6
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61fb      	str	r3, [r7, #28]
      break;
 80063aa:	e000      	b.n	80063ae <HRTIM_TimingUnitWaveform_Config+0x2b6>
    }

    default:
      break;
 80063ac:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	3301      	adds	r3, #1
 80063b6:	01db      	lsls	r3, r3, #7
 80063b8:	4413      	add	r3, r2
 80063ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063bc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	01db      	lsls	r3, r3, #7
 80063c6:	4413      	add	r3, r2
 80063c8:	33e8      	adds	r3, #232	@ 0xe8
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	4413      	add	r3, r2
 80063d8:	33e4      	adds	r3, #228	@ 0xe4
 80063da:	6a3a      	ldr	r2, [r7, #32]
 80063dc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	01db      	lsls	r3, r3, #7
 80063e6:	4413      	add	r3, r2
 80063e8:	33d4      	adds	r3, #212	@ 0xd4
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0
}
 80063f8:	bf00      	nop
 80063fa:	372c      	adds	r7, #44	@ 0x2c
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HRTIM_TimingUnitWaveform_Control>:
  * @retval None
  */
static void HRTIM_TimingUnitWaveform_Control(HRTIM_HandleTypeDef *hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCtlTypeDef *pTimerCtl)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr2;

  /* Configure timing unit (Timer A to Timer F) */
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	01db      	lsls	r3, r3, #7
 8006418:	4413      	add	r3, r2
 800641a:	33ec      	adds	r3, #236	@ 0xec
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	617b      	str	r3, [r7, #20]

  /* Set the UpDown counting Mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f023 0310 	bic.w	r3, r3, #16
 8006426:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Set the TrigHalf Mode : requires the counter to be disabled */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800643a:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800644c:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* define the compare event operating mode */
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800645e:	617b      	str	r3, [r7, #20]
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]

  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d11a      	bne.n	80064a8 <HRTIM_TimingUnitWaveform_Control+0xa4>
  {
    /* Set the DualChannel DAC Reset trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f023 0304 	bic.w	r3, r3, #4
 8006478:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	4313      	orrs	r3, r2
 8006482:	617b      	str	r3, [r7, #20]

    /* Set the DualChannel DAC Step trigger : requires DCDE enabled */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0302 	bic.w	r3, r3, #2
 800648a:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

    /* Enable the DualChannel DAC trigger */
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDE);
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	617b      	str	r3, [r7, #20]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  }
  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	01db      	lsls	r3, r3, #7
 80064b0:	4413      	add	r3, r2
 80064b2:	33ec      	adds	r3, #236	@ 0xec
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	601a      	str	r2, [r3, #0]

}
 80064b8:	bf00      	nop
 80064ba:	371c      	adds	r7, #28
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef *hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef *pOutputCfg)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b089      	sub	sp, #36	@ 0x24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	4413      	add	r3, r2
 80064e0:	33e4      	adds	r3, #228	@ 0xe4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	01db      	lsls	r3, r3, #7
 80064ee:	4413      	add	r3, r2
 80064f0:	33b8      	adds	r3, #184	@ 0xb8
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	617b      	str	r3, [r7, #20]

  switch (Output)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064fc:	d05d      	beq.n	80065ba <HRTIM_OutputConfig+0xf6>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006504:	d86e      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800650c:	d042      	beq.n	8006594 <HRTIM_OutputConfig+0xd0>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006514:	d866      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800651c:	d04d      	beq.n	80065ba <HRTIM_OutputConfig+0xf6>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006524:	d85e      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800652c:	d032      	beq.n	8006594 <HRTIM_OutputConfig+0xd0>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006534:	d856      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b80      	cmp	r3, #128	@ 0x80
 800653a:	d03e      	beq.n	80065ba <HRTIM_OutputConfig+0xf6>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b80      	cmp	r3, #128	@ 0x80
 8006540:	d850      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b40      	cmp	r3, #64	@ 0x40
 8006546:	d025      	beq.n	8006594 <HRTIM_OutputConfig+0xd0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b40      	cmp	r3, #64	@ 0x40
 800654c:	d84a      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d01f      	beq.n	8006594 <HRTIM_OutputConfig+0xd0>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d044      	beq.n	80065e4 <HRTIM_OutputConfig+0x120>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b20      	cmp	r3, #32
 800655e:	d841      	bhi.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d33e      	bcc.n	80065e4 <HRTIM_OutputConfig+0x120>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3b02      	subs	r3, #2
 800656a:	2201      	movs	r2, #1
 800656c:	409a      	lsls	r2, r3
 800656e:	4b48      	ldr	r3, [pc, #288]	@ (8006690 <HRTIM_OutputConfig+0x1cc>)
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	bf14      	ite	ne
 8006576:	2301      	movne	r3, #1
 8006578:	2300      	moveq	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d11c      	bne.n	80065ba <HRTIM_OutputConfig+0xf6>
 8006580:	f244 0304 	movw	r3, #16388	@ 0x4004
 8006584:	4013      	ands	r3, r2
 8006586:	2b00      	cmp	r3, #0
 8006588:	bf14      	ite	ne
 800658a:	2301      	movne	r3, #1
 800658c:	2300      	moveq	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d027      	beq.n	80065e4 <HRTIM_OutputConfig+0x120>
    case HRTIM_OUTPUT_TD1:
    case HRTIM_OUTPUT_TE1:
    case HRTIM_OUTPUT_TF1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6819      	ldr	r1, [r3, #0]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	01db      	lsls	r3, r3, #7
 80065a0:	440b      	add	r3, r1
 80065a2:	33bc      	adds	r3, #188	@ 0xbc
 80065a4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6819      	ldr	r1, [r3, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	01db      	lsls	r3, r3, #7
 80065b2:	440b      	add	r3, r1
 80065b4:	33c0      	adds	r3, #192	@ 0xc0
 80065b6:	601a      	str	r2, [r3, #0]
      break;
 80065b8:	e015      	b.n	80065e6 <HRTIM_OutputConfig+0x122>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6819      	ldr	r1, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	01db      	lsls	r3, r3, #7
 80065c6:	440b      	add	r3, r1
 80065c8:	33c4      	adds	r3, #196	@ 0xc4
 80065ca:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	01db      	lsls	r3, r3, #7
 80065d8:	440b      	add	r3, r1
 80065da:	33c8      	adds	r3, #200	@ 0xc8
 80065dc:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80065de:	2310      	movs	r3, #16
 80065e0:	61bb      	str	r3, [r7, #24]
      break;
 80065e2:	e000      	b.n	80065e6 <HRTIM_OutputConfig+0x122>
    }

    default:
      break;
 80065e4:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1 |
                   HRTIM_OUTR_FAULT1 |
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 80065e6:	22fe      	movs	r2, #254	@ 0xfe
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 80065ee:	43db      	mvns	r3, r3
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	4013      	ands	r3, r2
 80065f4:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	4313      	orrs	r3, r2
 8006604:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	4313      	orrs	r3, r2
 8006614:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	4313      	orrs	r3, r2
 8006624:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	69fa      	ldr	r2, [r7, #28]
 8006632:	4313      	orrs	r3, r2
 8006634:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	4313      	orrs	r3, r2
 8006644:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b08      	cmp	r3, #8
 800664c:	d111      	bne.n	8006672 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f403 7300 	and.w	r3, r3, #512	@ 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10c      	bne.n	8006672 <HRTIM_OutputConfig+0x1ae>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <HRTIM_OutputConfig+0x1ae>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	69da      	ldr	r2, [r3, #28]
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	4313      	orrs	r3, r2
 8006670:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	01db      	lsls	r3, r3, #7
 800667a:	4413      	add	r3, r2
 800667c:	33e4      	adds	r3, #228	@ 0xe4
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	601a      	str	r2, [r3, #0]
}
 8006682:	bf00      	nop
 8006684:	3724      	adds	r7, #36	@ 0x24
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40000041 	.word	0x40000041

08006694 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b06      	cmp	r3, #6
 80066a2:	d85e      	bhi.n	8006762 <HRTIM_ForceRegistersUpdate+0xce>
 80066a4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <HRTIM_ForceRegistersUpdate+0x18>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066df 	.word	0x080066df
 80066b0:	080066f5 	.word	0x080066f5
 80066b4:	0800670b 	.word	0x0800670b
 80066b8:	08006721 	.word	0x08006721
 80066bc:	08006737 	.word	0x08006737
 80066c0:	0800674d 	.word	0x0800674d
 80066c4:	080066c9 	.word	0x080066c9
  {
    case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f042 0201 	orr.w	r2, r2, #1
 80066d8:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80066dc:	e042      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0202 	orr.w	r2, r2, #2
 80066ee:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 80066f2:	e037      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0204 	orr.w	r2, r2, #4
 8006704:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006708:	e02c      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800671e:	e021      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0210 	orr.w	r2, r2, #16
 8006730:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006734:	e016      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0220 	orr.w	r2, r2, #32
 8006746:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 800674a:	e00b      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800675c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
      break;
 8006760:	e000      	b.n	8006764 <HRTIM_ForceRegistersUpdate+0xd0>
    }

    default:
      break;
 8006762:	bf00      	nop
  }
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8006780:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 800678a:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00c      	beq.n	80067b0 <HRTIM_HRTIM_ISR+0x40>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff fa9a 	bl	8005ce4 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00c      	beq.n	80067d4 <HRTIM_HRTIM_ISR+0x64>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff fa92 	bl	8005cf8 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <HRTIM_HRTIM_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2204      	movs	r2, #4
 80067ee:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fa8a 	bl	8005d0c <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <HRTIM_HRTIM_ISR+0xac>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d007      	beq.n	800681c <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2208      	movs	r2, #8
 8006812:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fa82 	bl	8005d20 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0310 	and.w	r3, r3, #16
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <HRTIM_HRTIM_ISR+0xd0>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2210      	movs	r2, #16
 8006836:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7ff fa7a 	bl	8005d34 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 6 event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_FLT6) != (uint32_t)RESET)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <HRTIM_HRTIM_ISR+0xf4>
  {
    if ((uint32_t)(ierits & HRTIM_IT_FLT6) != (uint32_t)RESET)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT6);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2240      	movs	r2, #64	@ 0x40
 800685a:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Fault 6 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault6Callback(hhrtim);
#else
      HAL_HRTIM_Fault6Callback(hhrtim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fa72 	bl	8005d48 <HAL_HRTIM_Fault6Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00c      	beq.n	8006888 <HRTIM_HRTIM_ISR+0x118>
  {
    if ((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HRTIM_HRTIM_ISR+0x118>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2220      	movs	r2, #32
 800687e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff fa6a 	bl	8005d5c <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HRTIM_Master_ISR>:
  * @brief  Master timer interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef *hhrtim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b086      	sub	sp, #24
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 80068aa:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	60bb      	str	r3, [r7, #8]

  /* DLL calibration ready event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_DLLRDY) != (uint32_t)RESET)
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d015      	beq.n	80068f2 <HRTIM_Master_ISR+0x62>
  {
    if ((uint32_t)(ierits & HRTIM_IT_DLLRDY) != (uint32_t)RESET)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <HRTIM_Master_ISR+0x62>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_DLLRDY);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80068d8:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Set HRTIM State */
      hhrtim->State = HAL_HRTIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

      /* Process unlocked */
      __HAL_UNLOCK(hhrtim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DLLCalibrationReadyCallback(hhrtim);
#else
      HAL_HRTIM_DLLCalibrationReadyCallback(hhrtim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fa3f 	bl	8005d70 <HAL_HRTIM_DLLCalibrationReadyCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Burst mode period event */
  if ((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <HRTIM_Master_ISR+0x88>
  {
    if ((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HRTIM_Master_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800690e:	f8c3 238c 	str.w	r2, [r3, #908]	@ 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fa36 	bl	8005d84 <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00c      	beq.n	800693c <HRTIM_Master_ISR+0xac>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HRTIM_Master_ISR+0xac>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2201      	movs	r2, #1
 8006932:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006934:	2106      	movs	r1, #6
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fa4e 	bl	8005dd8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00c      	beq.n	8006960 <HRTIM_Master_ISR+0xd0>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <HRTIM_Master_ISR+0xd0>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2202      	movs	r2, #2
 8006956:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006958:	2106      	movs	r1, #6
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fa47 	bl	8005dee <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <HRTIM_Master_ISR+0xf4>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <HRTIM_Master_ISR+0xf4>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2204      	movs	r2, #4
 800697a:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800697c:	2106      	movs	r1, #6
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fa40 	bl	8005e04 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <HRTIM_Master_ISR+0x118>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HRTIM_Master_ISR+0x118>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2208      	movs	r2, #8
 800699e:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80069a0:	2106      	movs	r1, #6
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fa39 	bl	8005e1a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <HRTIM_Master_ISR+0x13c>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HRTIM_Master_ISR+0x13c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2210      	movs	r2, #16
 80069c2:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80069c4:	2106      	movs	r1, #6
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff f9fb 	bl	8005dc2 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00b      	beq.n	80069ee <HRTIM_Master_ISR+0x15e>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d006      	beq.n	80069ee <HRTIM_Master_ISR+0x15e>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2220      	movs	r2, #32
 80069e6:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7ff f9d5 	bl	8005d98 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if ((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00c      	beq.n	8006a12 <HRTIM_Master_ISR+0x182>
  {
    if ((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HRTIM_Master_ISR+0x182>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2240      	movs	r2, #64	@ 0x40
 8006a08:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8006a0a:	2106      	movs	r1, #6
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff f9cd 	bl	8005dac <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a12:	bf00      	nop
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_F for timer F
  * @retval None
  */
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef *hhrtim,
                            uint32_t TimerIdx)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	01db      	lsls	r3, r3, #7
 8006a2e:	4413      	add	r3, r2
 8006a30:	3304      	adds	r3, #4
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	01db      	lsls	r3, r3, #7
 8006a3e:	4413      	add	r3, r2
 8006a40:	338c      	adds	r3, #140	@ 0x8c
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d010      	beq.n	8006a72 <HRTIM_Timer_ISR+0x58>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	01db      	lsls	r3, r3, #7
 8006a62:	4413      	add	r3, r2
 8006a64:	3388      	adds	r3, #136	@ 0x88
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff f9b3 	bl	8005dd8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d010      	beq.n	8006a9e <HRTIM_Timer_ISR+0x84>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00b      	beq.n	8006a9e <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	01db      	lsls	r3, r3, #7
 8006a8e:	4413      	add	r3, r2
 8006a90:	3388      	adds	r3, #136	@ 0x88
 8006a92:	2202      	movs	r2, #2
 8006a94:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff f9a8 	bl	8005dee <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d010      	beq.n	8006aca <HRTIM_Timer_ISR+0xb0>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	01db      	lsls	r3, r3, #7
 8006aba:	4413      	add	r3, r2
 8006abc:	3388      	adds	r3, #136	@ 0x88
 8006abe:	2204      	movs	r2, #4
 8006ac0:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7ff f99d 	bl	8005e04 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d010      	beq.n	8006af6 <HRTIM_Timer_ISR+0xdc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00b      	beq.n	8006af6 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	01db      	lsls	r3, r3, #7
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3388      	adds	r3, #136	@ 0x88
 8006aea:	2208      	movs	r2, #8
 8006aec:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff f992 	bl	8005e1a <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d010      	beq.n	8006b22 <HRTIM_Timer_ISR+0x108>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 0310 	and.w	r3, r3, #16
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	01db      	lsls	r3, r3, #7
 8006b12:	4413      	add	r3, r2
 8006b14:	3388      	adds	r3, #136	@ 0x88
 8006b16:	2210      	movs	r2, #16
 8006b18:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff f950 	bl	8005dc2 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d010      	beq.n	8006b4e <HRTIM_Timer_ISR+0x134>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	01db      	lsls	r3, r3, #7
 8006b3e:	4413      	add	r3, r2
 8006b40:	3388      	adds	r3, #136	@ 0x88
 8006b42:	2240      	movs	r2, #64	@ 0x40
 8006b44:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff f92f 	bl	8005dac <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <HRTIM_Timer_ISR+0x160>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00b      	beq.n	8006b7a <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	01db      	lsls	r3, r3, #7
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3388      	adds	r3, #136	@ 0x88
 8006b6e:	2280      	movs	r2, #128	@ 0x80
 8006b70:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff f95b 	bl	8005e30 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d011      	beq.n	8006ba8 <HRTIM_Timer_ISR+0x18e>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	01db      	lsls	r3, r3, #7
 8006b96:	4413      	add	r3, r2
 8006b98:	3388      	adds	r3, #136	@ 0x88
 8006b9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b9e:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff f94f 	bl	8005e46 <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d011      	beq.n	8006bd6 <HRTIM_Timer_ISR+0x1bc>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00c      	beq.n	8006bd6 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	01db      	lsls	r3, r3, #7
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3388      	adds	r3, #136	@ 0x88
 8006bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bcc:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff f959 	bl	8005e88 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d011      	beq.n	8006c04 <HRTIM_Timer_ISR+0x1ea>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	01db      	lsls	r3, r3, #7
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3388      	adds	r3, #136	@ 0x88
 8006bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006bfa:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff f94d 	bl	8005e9e <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d011      	beq.n	8006c32 <HRTIM_Timer_ISR+0x218>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00c      	beq.n	8006c32 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	01db      	lsls	r3, r3, #7
 8006c20:	4413      	add	r3, r2
 8006c22:	3388      	adds	r3, #136	@ 0x88
 8006c24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c28:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff f941 	bl	8005eb4 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d011      	beq.n	8006c60 <HRTIM_Timer_ISR+0x246>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	01db      	lsls	r3, r3, #7
 8006c4e:	4413      	add	r3, r2
 8006c50:	3388      	adds	r3, #136	@ 0x88
 8006c52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006c56:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff f935 	bl	8005eca <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d011      	beq.n	8006c8e <HRTIM_Timer_ISR+0x274>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00c      	beq.n	8006c8e <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	01db      	lsls	r3, r3, #7
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3388      	adds	r3, #136	@ 0x88
 8006c80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006c84:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff f8f2 	bl	8005e72 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if ((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HRTIM_Timer_ISR+0x2a2>
  {
    if ((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00c      	beq.n	8006cbc <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3388      	adds	r3, #136	@ 0x88
 8006cae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006cb2:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff f8d0 	bl	8005e5c <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d141      	bne.n	8006d56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d131      	bne.n	8006d44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ce0:	4b47      	ldr	r3, [pc, #284]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ce6:	4a46      	ldr	r2, [pc, #280]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cf0:	4b43      	ldr	r3, [pc, #268]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cf8:	4a41      	ldr	r2, [pc, #260]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d00:	4b40      	ldr	r3, [pc, #256]	@ (8006e04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2232      	movs	r2, #50	@ 0x32
 8006d06:	fb02 f303 	mul.w	r3, r2, r3
 8006d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d10:	0c9b      	lsrs	r3, r3, #18
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d16:	e002      	b.n	8006d1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006d1e:	4b38      	ldr	r3, [pc, #224]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d20:	695b      	ldr	r3, [r3, #20]
 8006d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d2a:	d102      	bne.n	8006d32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1f2      	bne.n	8006d18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006d32:	4b33      	ldr	r3, [pc, #204]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d3e:	d158      	bne.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e057      	b.n	8006df4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d44:	4b2e      	ldr	r3, [pc, #184]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d54:	e04d      	b.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d5c:	d141      	bne.n	8006de2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006d5e:	4b28      	ldr	r3, [pc, #160]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6a:	d131      	bne.n	8006dd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d6c:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d72:	4a23      	ldr	r2, [pc, #140]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006d7c:	4b20      	ldr	r3, [pc, #128]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d84:	4a1e      	ldr	r2, [pc, #120]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006e04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2232      	movs	r2, #50	@ 0x32
 8006d92:	fb02 f303 	mul.w	r3, r2, r3
 8006d96:	4a1c      	ldr	r2, [pc, #112]	@ (8006e08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	0c9b      	lsrs	r3, r3, #18
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006da2:	e002      	b.n	8006daa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006daa:	4b15      	ldr	r3, [pc, #84]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db6:	d102      	bne.n	8006dbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f2      	bne.n	8006da4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dbe:	4b10      	ldr	r3, [pc, #64]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dca:	d112      	bne.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e011      	b.n	8006df4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ddc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006de0:	e007      	b.n	8006df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006de2:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006dea:	4a05      	ldr	r2, [pc, #20]	@ (8006e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006dec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006df0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40007000 	.word	0x40007000
 8006e04:	20000000 	.word	0x20000000
 8006e08:	431bde83 	.word	0x431bde83

08006e0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006e16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e1a:	6093      	str	r3, [r2, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	40007000 	.word	0x40007000

08006e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e2fe      	b.n	800743c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d075      	beq.n	8006f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e4a:	4b97      	ldr	r3, [pc, #604]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e54:	4b94      	ldr	r3, [pc, #592]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0303 	and.w	r3, r3, #3
 8006e5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	d102      	bne.n	8006e6a <HAL_RCC_OscConfig+0x3e>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d002      	beq.n	8006e70 <HAL_RCC_OscConfig+0x44>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d10b      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	4b8d      	ldr	r3, [pc, #564]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d05b      	beq.n	8006f34 <HAL_RCC_OscConfig+0x108>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d157      	bne.n	8006f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e2d9      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x74>
 8006e92:	4b85      	ldr	r3, [pc, #532]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a84      	ldr	r2, [pc, #528]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e01d      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x98>
 8006eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a7e      	ldr	r2, [pc, #504]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a7b      	ldr	r2, [pc, #492]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ec4:	4b78      	ldr	r3, [pc, #480]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a77      	ldr	r2, [pc, #476]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b75      	ldr	r3, [pc, #468]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a74      	ldr	r2, [pc, #464]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fa fda0 	bl	8001a28 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fa fd9c 	bl	8001a28 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	@ 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e29e      	b.n	800743c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006efe:	4b6a      	ldr	r3, [pc, #424]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0xc0>
 8006f0a:	e014      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fa fd8c 	bl	8001a28 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fa fd88 	bl	8001a28 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	@ 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e28a      	b.n	800743c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f26:	4b60      	ldr	r3, [pc, #384]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0xe8>
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d075      	beq.n	800702e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f42:	4b59      	ldr	r3, [pc, #356]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f4c:	4b56      	ldr	r3, [pc, #344]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	2b0c      	cmp	r3, #12
 8006f5a:	d102      	bne.n	8006f62 <HAL_RCC_OscConfig+0x136>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d002      	beq.n	8006f68 <HAL_RCC_OscConfig+0x13c>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d11f      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f68:	4b4f      	ldr	r3, [pc, #316]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <HAL_RCC_OscConfig+0x154>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e25d      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f80:	4b49      	ldr	r3, [pc, #292]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	061b      	lsls	r3, r3, #24
 8006f8e:	4946      	ldr	r1, [pc, #280]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f94:	4b45      	ldr	r3, [pc, #276]	@ (80070ac <HAL_RCC_OscConfig+0x280>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fa fcf9 	bl	8001990 <HAL_InitTick>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d043      	beq.n	800702c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e249      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d023      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fb0:	4b3d      	ldr	r3, [pc, #244]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fa fd34 	bl	8001a28 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fc4:	f7fa fd30 	bl	8001a28 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e232      	b.n	800743c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fd6:	4b34      	ldr	r3, [pc, #208]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0f0      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fe2:	4b31      	ldr	r3, [pc, #196]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	061b      	lsls	r3, r3, #24
 8006ff0:	492d      	ldr	r1, [pc, #180]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	604b      	str	r3, [r1, #4]
 8006ff6:	e01a      	b.n	800702e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2a      	ldr	r2, [pc, #168]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8006ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fa fd10 	bl	8001a28 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700c:	f7fa fd0c 	bl	8001a28 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e20e      	b.n	800743c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800701e:	4b22      	ldr	r3, [pc, #136]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f0      	bne.n	800700c <HAL_RCC_OscConfig+0x1e0>
 800702a:	e000      	b.n	800702e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800702c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d041      	beq.n	80070be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01c      	beq.n	800707c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007042:	4b19      	ldr	r3, [pc, #100]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8007044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007048:	4a17      	ldr	r2, [pc, #92]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007052:	f7fa fce9 	bl	8001a28 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800705a:	f7fa fce5 	bl	8001a28 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e1e7      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800706c:	4b0e      	ldr	r3, [pc, #56]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 800706e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0ef      	beq.n	800705a <HAL_RCC_OscConfig+0x22e>
 800707a:	e020      	b.n	80070be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800707c:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 800707e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007082:	4a09      	ldr	r2, [pc, #36]	@ (80070a8 <HAL_RCC_OscConfig+0x27c>)
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708c:	f7fa fccc 	bl	8001a28 <HAL_GetTick>
 8007090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007092:	e00d      	b.n	80070b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007094:	f7fa fcc8 	bl	8001a28 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d906      	bls.n	80070b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e1ca      	b.n	800743c <HAL_RCC_OscConfig+0x610>
 80070a6:	bf00      	nop
 80070a8:	40021000 	.word	0x40021000
 80070ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070b0:	4b8c      	ldr	r3, [pc, #560]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80070b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d1ea      	bne.n	8007094 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80a6 	beq.w	8007218 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070cc:	2300      	movs	r3, #0
 80070ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070d0:	4b84      	ldr	r3, [pc, #528]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_OscConfig+0x2b4>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <HAL_RCC_OscConfig+0x2b6>
 80070e0:	2300      	movs	r3, #0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070e6:	4b7f      	ldr	r3, [pc, #508]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	4a7e      	ldr	r2, [pc, #504]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80070ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80070f2:	4b7c      	ldr	r3, [pc, #496]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80070fe:	2301      	movs	r3, #1
 8007100:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007102:	4b79      	ldr	r3, [pc, #484]	@ (80072e8 <HAL_RCC_OscConfig+0x4bc>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d118      	bne.n	8007140 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800710e:	4b76      	ldr	r3, [pc, #472]	@ (80072e8 <HAL_RCC_OscConfig+0x4bc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a75      	ldr	r2, [pc, #468]	@ (80072e8 <HAL_RCC_OscConfig+0x4bc>)
 8007114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800711a:	f7fa fc85 	bl	8001a28 <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007122:	f7fa fc81 	bl	8001a28 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e183      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007134:	4b6c      	ldr	r3, [pc, #432]	@ (80072e8 <HAL_RCC_OscConfig+0x4bc>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d108      	bne.n	800715a <HAL_RCC_OscConfig+0x32e>
 8007148:	4b66      	ldr	r3, [pc, #408]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800714a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800714e:	4a65      	ldr	r2, [pc, #404]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007150:	f043 0301 	orr.w	r3, r3, #1
 8007154:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007158:	e024      	b.n	80071a4 <HAL_RCC_OscConfig+0x378>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b05      	cmp	r3, #5
 8007160:	d110      	bne.n	8007184 <HAL_RCC_OscConfig+0x358>
 8007162:	4b60      	ldr	r3, [pc, #384]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007168:	4a5e      	ldr	r2, [pc, #376]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800716a:	f043 0304 	orr.w	r3, r3, #4
 800716e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007172:	4b5c      	ldr	r3, [pc, #368]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007178:	4a5a      	ldr	r2, [pc, #360]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007182:	e00f      	b.n	80071a4 <HAL_RCC_OscConfig+0x378>
 8007184:	4b57      	ldr	r3, [pc, #348]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718a:	4a56      	ldr	r2, [pc, #344]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007194:	4b53      	ldr	r3, [pc, #332]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800719a:	4a52      	ldr	r2, [pc, #328]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800719c:	f023 0304 	bic.w	r3, r3, #4
 80071a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d016      	beq.n	80071da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ac:	f7fa fc3c 	bl	8001a28 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b2:	e00a      	b.n	80071ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b4:	f7fa fc38 	bl	8001a28 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e138      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071ca:	4b46      	ldr	r3, [pc, #280]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80071cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0ed      	beq.n	80071b4 <HAL_RCC_OscConfig+0x388>
 80071d8:	e015      	b.n	8007206 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071da:	f7fa fc25 	bl	8001a28 <HAL_GetTick>
 80071de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071e0:	e00a      	b.n	80071f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e2:	f7fa fc21 	bl	8001a28 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e121      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80071f8:	4b3a      	ldr	r3, [pc, #232]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1ed      	bne.n	80071e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007206:	7ffb      	ldrb	r3, [r7, #31]
 8007208:	2b01      	cmp	r3, #1
 800720a:	d105      	bne.n	8007218 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800720c:	4b35      	ldr	r3, [pc, #212]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800720e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007210:	4a34      	ldr	r2, [pc, #208]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007216:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d03c      	beq.n	800729e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01c      	beq.n	8007266 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800722c:	4b2d      	ldr	r3, [pc, #180]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800722e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007232:	4a2c      	ldr	r2, [pc, #176]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800723c:	f7fa fbf4 	bl	8001a28 <HAL_GetTick>
 8007240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007242:	e008      	b.n	8007256 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007244:	f7fa fbf0 	bl	8001a28 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d901      	bls.n	8007256 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e0f2      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007256:	4b23      	ldr	r3, [pc, #140]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ef      	beq.n	8007244 <HAL_RCC_OscConfig+0x418>
 8007264:	e01b      	b.n	800729e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007266:	4b1f      	ldr	r3, [pc, #124]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007268:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800726c:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007276:	f7fa fbd7 	bl	8001a28 <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800727e:	f7fa fbd3 	bl	8001a28 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e0d5      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007290:	4b14      	ldr	r3, [pc, #80]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 8007292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1ef      	bne.n	800727e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80c9 	beq.w	800743a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072a8:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 030c 	and.w	r3, r3, #12
 80072b0:	2b0c      	cmp	r3, #12
 80072b2:	f000 8083 	beq.w	80073bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d15e      	bne.n	800737c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072be:	4b09      	ldr	r3, [pc, #36]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a08      	ldr	r2, [pc, #32]	@ (80072e4 <HAL_RCC_OscConfig+0x4b8>)
 80072c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ca:	f7fa fbad 	bl	8001a28 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072d0:	e00c      	b.n	80072ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d2:	f7fa fba9 	bl	8001a28 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d905      	bls.n	80072ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e0ab      	b.n	800743c <HAL_RCC_OscConfig+0x610>
 80072e4:	40021000 	.word	0x40021000
 80072e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ec:	4b55      	ldr	r3, [pc, #340]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1ec      	bne.n	80072d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f8:	4b52      	ldr	r3, [pc, #328]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 80072fa:	68da      	ldr	r2, [r3, #12]
 80072fc:	4b52      	ldr	r3, [pc, #328]	@ (8007448 <HAL_RCC_OscConfig+0x61c>)
 80072fe:	4013      	ands	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6a11      	ldr	r1, [r2, #32]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007308:	3a01      	subs	r2, #1
 800730a:	0112      	lsls	r2, r2, #4
 800730c:	4311      	orrs	r1, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007312:	0212      	lsls	r2, r2, #8
 8007314:	4311      	orrs	r1, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800731a:	0852      	lsrs	r2, r2, #1
 800731c:	3a01      	subs	r2, #1
 800731e:	0552      	lsls	r2, r2, #21
 8007320:	4311      	orrs	r1, r2
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007326:	0852      	lsrs	r2, r2, #1
 8007328:	3a01      	subs	r2, #1
 800732a:	0652      	lsls	r2, r2, #25
 800732c:	4311      	orrs	r1, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007332:	06d2      	lsls	r2, r2, #27
 8007334:	430a      	orrs	r2, r1
 8007336:	4943      	ldr	r1, [pc, #268]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 8007338:	4313      	orrs	r3, r2
 800733a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800733c:	4b41      	ldr	r3, [pc, #260]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a40      	ldr	r2, [pc, #256]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 8007342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007346:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007348:	4b3e      	ldr	r3, [pc, #248]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	4a3d      	ldr	r2, [pc, #244]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 800734e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007352:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fa fb68 	bl	8001a28 <HAL_GetTick>
 8007358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735c:	f7fa fb64 	bl	8001a28 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e066      	b.n	800743c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800736e:	4b35      	ldr	r3, [pc, #212]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0x530>
 800737a:	e05e      	b.n	800743a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800737c:	4b31      	ldr	r3, [pc, #196]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a30      	ldr	r2, [pc, #192]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 8007382:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007388:	f7fa fb4e 	bl	8001a28 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007390:	f7fa fb4a 	bl	8001a28 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b02      	cmp	r3, #2
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e04c      	b.n	800743c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073a2:	4b28      	ldr	r3, [pc, #160]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1f0      	bne.n	8007390 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80073ae:	4b25      	ldr	r3, [pc, #148]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 80073b0:	68da      	ldr	r2, [r3, #12]
 80073b2:	4924      	ldr	r1, [pc, #144]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 80073b4:	4b25      	ldr	r3, [pc, #148]	@ (800744c <HAL_RCC_OscConfig+0x620>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	60cb      	str	r3, [r1, #12]
 80073ba:	e03e      	b.n	800743a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d101      	bne.n	80073c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e039      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80073c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007444 <HAL_RCC_OscConfig+0x618>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f003 0203 	and.w	r2, r3, #3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a1b      	ldr	r3, [r3, #32]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d12c      	bne.n	8007436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e6:	3b01      	subs	r3, #1
 80073e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d123      	bne.n	8007436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d11b      	bne.n	8007436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d113      	bne.n	8007436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007418:	085b      	lsrs	r3, r3, #1
 800741a:	3b01      	subs	r3, #1
 800741c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800741e:	429a      	cmp	r2, r3
 8007420:	d109      	bne.n	8007436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742c:	085b      	lsrs	r3, r3, #1
 800742e:	3b01      	subs	r3, #1
 8007430:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007432:	429a      	cmp	r2, r3
 8007434:	d001      	beq.n	800743a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e000      	b.n	800743c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3720      	adds	r7, #32
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40021000 	.word	0x40021000
 8007448:	019f800c 	.word	0x019f800c
 800744c:	feeefffc 	.word	0xfeeefffc

08007450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e11e      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007468:	4b91      	ldr	r3, [pc, #580]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d910      	bls.n	8007498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b8e      	ldr	r3, [pc, #568]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 020f 	bic.w	r2, r3, #15
 800747e:	498c      	ldr	r1, [pc, #560]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	4b8a      	ldr	r3, [pc, #552]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d001      	beq.n	8007498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e106      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d073      	beq.n	800758c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d129      	bne.n	8007500 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074ac:	4b81      	ldr	r3, [pc, #516]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e0f4      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80074bc:	f000 f99e 	bl	80077fc <RCC_GetSysClockFreqFromPLLSource>
 80074c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4a7c      	ldr	r2, [pc, #496]	@ (80076b8 <HAL_RCC_ClockConfig+0x268>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d93f      	bls.n	800754a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074ca:	4b7a      	ldr	r3, [pc, #488]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d009      	beq.n	80074ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d033      	beq.n	800754a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d12f      	bne.n	800754a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80074ea:	4b72      	ldr	r3, [pc, #456]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074f2:	4a70      	ldr	r2, [pc, #448]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80074f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80074fa:	2380      	movs	r3, #128	@ 0x80
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e024      	b.n	800754a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	2b02      	cmp	r3, #2
 8007506:	d107      	bne.n	8007518 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007508:	4b6a      	ldr	r3, [pc, #424]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d109      	bne.n	8007528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0c6      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007518:	4b66      	ldr	r3, [pc, #408]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e0be      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007528:	f000 f8ce 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 800752c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4a61      	ldr	r2, [pc, #388]	@ (80076b8 <HAL_RCC_ClockConfig+0x268>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d909      	bls.n	800754a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007536:	4b5f      	ldr	r3, [pc, #380]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800753e:	4a5d      	ldr	r2, [pc, #372]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007544:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007546:	2380      	movs	r3, #128	@ 0x80
 8007548:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800754a:	4b5a      	ldr	r3, [pc, #360]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f023 0203 	bic.w	r2, r3, #3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	4957      	ldr	r1, [pc, #348]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007558:	4313      	orrs	r3, r2
 800755a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755c:	f7fa fa64 	bl	8001a28 <HAL_GetTick>
 8007560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007562:	e00a      	b.n	800757a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007564:	f7fa fa60 	bl	8001a28 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007572:	4293      	cmp	r3, r2
 8007574:	d901      	bls.n	800757a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e095      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800757a:	4b4e      	ldr	r3, [pc, #312]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 020c 	and.w	r2, r3, #12
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	429a      	cmp	r2, r3
 800758a:	d1eb      	bne.n	8007564 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d023      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 0304 	and.w	r3, r3, #4
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075a4:	4b43      	ldr	r3, [pc, #268]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	4a42      	ldr	r2, [pc, #264]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80075bc:	4b3d      	ldr	r3, [pc, #244]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075c4:	4a3b      	ldr	r2, [pc, #236]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075cc:	4b39      	ldr	r3, [pc, #228]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	4936      	ldr	r1, [pc, #216]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
 80075de:	e008      	b.n	80075f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2b80      	cmp	r3, #128	@ 0x80
 80075e4:	d105      	bne.n	80075f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80075e6:	4b33      	ldr	r3, [pc, #204]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4a32      	ldr	r2, [pc, #200]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 80075ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80075f2:	4b2f      	ldr	r3, [pc, #188]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d21d      	bcs.n	800763c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007600:	4b2b      	ldr	r3, [pc, #172]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f023 020f 	bic.w	r2, r3, #15
 8007608:	4929      	ldr	r1, [pc, #164]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	4313      	orrs	r3, r2
 800760e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007610:	f7fa fa0a 	bl	8001a28 <HAL_GetTick>
 8007614:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007616:	e00a      	b.n	800762e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007618:	f7fa fa06 	bl	8001a28 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007626:	4293      	cmp	r3, r2
 8007628:	d901      	bls.n	800762e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e03b      	b.n	80076a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800762e:	4b20      	ldr	r3, [pc, #128]	@ (80076b0 <HAL_RCC_ClockConfig+0x260>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 030f 	and.w	r3, r3, #15
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d1ed      	bne.n	8007618 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0304 	and.w	r3, r3, #4
 8007644:	2b00      	cmp	r3, #0
 8007646:	d008      	beq.n	800765a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007648:	4b1a      	ldr	r3, [pc, #104]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	4917      	ldr	r1, [pc, #92]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007656:	4313      	orrs	r3, r2
 8007658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0308 	and.w	r3, r3, #8
 8007662:	2b00      	cmp	r3, #0
 8007664:	d009      	beq.n	800767a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007666:	4b13      	ldr	r3, [pc, #76]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	490f      	ldr	r1, [pc, #60]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007676:	4313      	orrs	r3, r2
 8007678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800767a:	f000 f825 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 800767e:	4602      	mov	r2, r0
 8007680:	4b0c      	ldr	r3, [pc, #48]	@ (80076b4 <HAL_RCC_ClockConfig+0x264>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	490c      	ldr	r1, [pc, #48]	@ (80076bc <HAL_RCC_ClockConfig+0x26c>)
 800768c:	5ccb      	ldrb	r3, [r1, r3]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	fa22 f303 	lsr.w	r3, r2, r3
 8007696:	4a0a      	ldr	r2, [pc, #40]	@ (80076c0 <HAL_RCC_ClockConfig+0x270>)
 8007698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800769a:	4b0a      	ldr	r3, [pc, #40]	@ (80076c4 <HAL_RCC_ClockConfig+0x274>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fa f976 	bl	8001990 <HAL_InitTick>
 80076a4:	4603      	mov	r3, r0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40022000 	.word	0x40022000
 80076b4:	40021000 	.word	0x40021000
 80076b8:	04c4b400 	.word	0x04c4b400
 80076bc:	08009dc4 	.word	0x08009dc4
 80076c0:	20000000 	.word	0x20000000
 80076c4:	20000004 	.word	0x20000004

080076c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80076ce:	4b2c      	ldr	r3, [pc, #176]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 030c 	and.w	r3, r3, #12
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d102      	bne.n	80076e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80076da:	4b2a      	ldr	r3, [pc, #168]	@ (8007784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	e047      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80076e0:	4b27      	ldr	r3, [pc, #156]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f003 030c 	and.w	r3, r3, #12
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d102      	bne.n	80076f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80076ec:	4b26      	ldr	r3, [pc, #152]	@ (8007788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80076ee:	613b      	str	r3, [r7, #16]
 80076f0:	e03e      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80076f2:	4b23      	ldr	r3, [pc, #140]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f003 030c 	and.w	r3, r3, #12
 80076fa:	2b0c      	cmp	r3, #12
 80076fc:	d136      	bne.n	800776c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076fe:	4b20      	ldr	r3, [pc, #128]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007708:	4b1d      	ldr	r3, [pc, #116]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	091b      	lsrs	r3, r3, #4
 800770e:	f003 030f 	and.w	r3, r3, #15
 8007712:	3301      	adds	r3, #1
 8007714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d10c      	bne.n	8007736 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800771c:	4a1a      	ldr	r2, [pc, #104]	@ (8007788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	4a16      	ldr	r2, [pc, #88]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007726:	68d2      	ldr	r2, [r2, #12]
 8007728:	0a12      	lsrs	r2, r2, #8
 800772a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800772e:	fb02 f303 	mul.w	r3, r2, r3
 8007732:	617b      	str	r3, [r7, #20]
      break;
 8007734:	e00c      	b.n	8007750 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007736:	4a13      	ldr	r2, [pc, #76]	@ (8007784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	fbb2 f3f3 	udiv	r3, r2, r3
 800773e:	4a10      	ldr	r2, [pc, #64]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007740:	68d2      	ldr	r2, [r2, #12]
 8007742:	0a12      	lsrs	r2, r2, #8
 8007744:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007748:	fb02 f303 	mul.w	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
      break;
 800774e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007750:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	0e5b      	lsrs	r3, r3, #25
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	3301      	adds	r3, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	fbb2 f3f3 	udiv	r3, r2, r3
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	e001      	b.n	8007770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007770:	693b      	ldr	r3, [r7, #16]
}
 8007772:	4618      	mov	r0, r3
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40021000 	.word	0x40021000
 8007784:	00f42400 	.word	0x00f42400
 8007788:	00b71b00 	.word	0x00b71b00

0800778c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007790:	4b03      	ldr	r3, [pc, #12]	@ (80077a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000000 	.word	0x20000000

080077a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80077a8:	f7ff fff0 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077ac:	4602      	mov	r2, r0
 80077ae:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	0a1b      	lsrs	r3, r3, #8
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	4904      	ldr	r1, [pc, #16]	@ (80077cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80077ba:	5ccb      	ldrb	r3, [r1, r3]
 80077bc:	f003 031f 	and.w	r3, r3, #31
 80077c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	40021000 	.word	0x40021000
 80077cc:	08009dd4 	.word	0x08009dd4

080077d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80077d4:	f7ff ffda 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b06      	ldr	r3, [pc, #24]	@ (80077f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	0adb      	lsrs	r3, r3, #11
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4904      	ldr	r1, [pc, #16]	@ (80077f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80077e6:	5ccb      	ldrb	r3, [r1, r3]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40021000 	.word	0x40021000
 80077f8:	08009dd4 	.word	0x08009dd4

080077fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007802:	4b1e      	ldr	r3, [pc, #120]	@ (800787c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800780c:	4b1b      	ldr	r3, [pc, #108]	@ (800787c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	091b      	lsrs	r3, r3, #4
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d10c      	bne.n	800783a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007820:	4a17      	ldr	r2, [pc, #92]	@ (8007880 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	fbb2 f3f3 	udiv	r3, r2, r3
 8007828:	4a14      	ldr	r2, [pc, #80]	@ (800787c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800782a:	68d2      	ldr	r2, [r2, #12]
 800782c:	0a12      	lsrs	r2, r2, #8
 800782e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	617b      	str	r3, [r7, #20]
    break;
 8007838:	e00c      	b.n	8007854 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800783a:	4a12      	ldr	r2, [pc, #72]	@ (8007884 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007842:	4a0e      	ldr	r2, [pc, #56]	@ (800787c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007844:	68d2      	ldr	r2, [r2, #12]
 8007846:	0a12      	lsrs	r2, r2, #8
 8007848:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800784c:	fb02 f303 	mul.w	r3, r2, r3
 8007850:	617b      	str	r3, [r7, #20]
    break;
 8007852:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007854:	4b09      	ldr	r3, [pc, #36]	@ (800787c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	0e5b      	lsrs	r3, r3, #25
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	3301      	adds	r3, #1
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	fbb2 f3f3 	udiv	r3, r2, r3
 800786c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800786e:	687b      	ldr	r3, [r7, #4]
}
 8007870:	4618      	mov	r0, r3
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	40021000 	.word	0x40021000
 8007880:	00b71b00 	.word	0x00b71b00
 8007884:	00f42400 	.word	0x00f42400

08007888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007890:	2300      	movs	r3, #0
 8007892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007894:	2300      	movs	r3, #0
 8007896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8098 	beq.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078a6:	2300      	movs	r3, #0
 80078a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078aa:	4b43      	ldr	r3, [pc, #268]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078b6:	4b40      	ldr	r3, [pc, #256]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ba:	4a3f      	ldr	r2, [pc, #252]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80078c2:	4b3d      	ldr	r3, [pc, #244]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ca:	60bb      	str	r3, [r7, #8]
 80078cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ce:	2301      	movs	r3, #1
 80078d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078d2:	4b3a      	ldr	r3, [pc, #232]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a39      	ldr	r2, [pc, #228]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078de:	f7fa f8a3 	bl	8001a28 <HAL_GetTick>
 80078e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078e4:	e009      	b.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078e6:	f7fa f89f 	bl	8001a28 <HAL_GetTick>
 80078ea:	4602      	mov	r2, r0
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d902      	bls.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	74fb      	strb	r3, [r7, #19]
        break;
 80078f8:	e005      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078fa:	4b30      	ldr	r3, [pc, #192]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0ef      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007906:	7cfb      	ldrb	r3, [r7, #19]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d159      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800790c:	4b2a      	ldr	r3, [pc, #168]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007916:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d01e      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	429a      	cmp	r2, r3
 8007926:	d019      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007928:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007934:	4b20      	ldr	r3, [pc, #128]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793a:	4a1f      	ldr	r2, [pc, #124]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800793c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007944:	4b1c      	ldr	r3, [pc, #112]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794a:	4a1b      	ldr	r2, [pc, #108]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800794c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007954:	4a18      	ldr	r2, [pc, #96]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d016      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007966:	f7fa f85f 	bl	8001a28 <HAL_GetTick>
 800796a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800796c:	e00b      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800796e:	f7fa f85b 	bl	8001a28 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800797c:	4293      	cmp	r3, r2
 800797e:	d902      	bls.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	74fb      	strb	r3, [r7, #19]
            break;
 8007984:	e006      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007986:	4b0c      	ldr	r3, [pc, #48]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0ec      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007994:	7cfb      	ldrb	r3, [r7, #19]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800799a:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a8:	4903      	ldr	r1, [pc, #12]	@ (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80079b0:	e008      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079b2:	7cfb      	ldrb	r3, [r7, #19]
 80079b4:	74bb      	strb	r3, [r7, #18]
 80079b6:	e005      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c0:	7cfb      	ldrb	r3, [r7, #19]
 80079c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079c4:	7c7b      	ldrb	r3, [r7, #17]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d105      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ce:	4aa6      	ldr	r2, [pc, #664]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079e2:	4ba1      	ldr	r3, [pc, #644]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e8:	f023 0203 	bic.w	r2, r3, #3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	499d      	ldr	r1, [pc, #628]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0302 	and.w	r3, r3, #2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a04:	4b98      	ldr	r3, [pc, #608]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0a:	f023 020c 	bic.w	r2, r3, #12
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	4995      	ldr	r1, [pc, #596]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a26:	4b90      	ldr	r3, [pc, #576]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	498c      	ldr	r1, [pc, #560]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00a      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a48:	4b87      	ldr	r3, [pc, #540]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	4984      	ldr	r1, [pc, #528]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0310 	and.w	r3, r3, #16
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	497b      	ldr	r1, [pc, #492]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0320 	and.w	r3, r3, #32
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a8c:	4b76      	ldr	r3, [pc, #472]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	4973      	ldr	r1, [pc, #460]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007aae:	4b6e      	ldr	r3, [pc, #440]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	496a      	ldr	r1, [pc, #424]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ad0:	4b65      	ldr	r3, [pc, #404]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	4962      	ldr	r1, [pc, #392]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007af2:	4b5d      	ldr	r3, [pc, #372]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	4959      	ldr	r1, [pc, #356]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b14:	4b54      	ldr	r3, [pc, #336]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b1a:	f023 0203 	bic.w	r2, r3, #3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b22:	4951      	ldr	r1, [pc, #324]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b36:	4b4c      	ldr	r3, [pc, #304]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	4948      	ldr	r1, [pc, #288]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d015      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b58:	4b43      	ldr	r3, [pc, #268]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b66:	4940      	ldr	r1, [pc, #256]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b76:	d105      	bne.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b78:	4b3b      	ldr	r3, [pc, #236]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d015      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007b90:	4b35      	ldr	r3, [pc, #212]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9e:	4932      	ldr	r1, [pc, #200]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007bae:	d105      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d015      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bc8:	4b27      	ldr	r3, [pc, #156]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	4924      	ldr	r1, [pc, #144]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007be6:	d105      	bne.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007be8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	4a1e      	ldr	r2, [pc, #120]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d015      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c00:	4b19      	ldr	r3, [pc, #100]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0e:	4916      	ldr	r1, [pc, #88]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c1e:	d105      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c20:	4b11      	ldr	r3, [pc, #68]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	4a10      	ldr	r2, [pc, #64]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d019      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c38:	4b0b      	ldr	r3, [pc, #44]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	4908      	ldr	r1, [pc, #32]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c56:	d109      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c58:	4b03      	ldr	r3, [pc, #12]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	4a02      	ldr	r2, [pc, #8]	@ (8007c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c62:	60d3      	str	r3, [r2, #12]
 8007c64:	e002      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007c66:	bf00      	nop
 8007c68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d015      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007c78:	4b29      	ldr	r3, [pc, #164]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	4926      	ldr	r1, [pc, #152]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c96:	d105      	bne.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c98:	4b21      	ldr	r3, [pc, #132]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ca2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d015      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cbe:	4918      	ldr	r1, [pc, #96]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cce:	d105      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007cd0:	4b13      	ldr	r3, [pc, #76]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	4a12      	ldr	r2, [pc, #72]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d015      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cf6:	490a      	ldr	r1, [pc, #40]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d06:	d105      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d08:	4b05      	ldr	r3, [pc, #20]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4a04      	ldr	r2, [pc, #16]	@ (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007d14:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40021000 	.word	0x40021000

08007d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e049      	b.n	8007dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d106      	bne.n	8007d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7f9 fce0 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f000 f9b6 	bl	80080d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d020      	beq.n	8007e36 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f003 0302 	and.w	r3, r3, #2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d01b      	beq.n	8007e36 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f06f 0202 	mvn.w	r2, #2
 8007e06:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	f003 0303 	and.w	r3, r3, #3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f93b 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007e22:	e005      	b.n	8007e30 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f92d 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f93e 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d020      	beq.n	8007e82 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01b      	beq.n	8007e82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f06f 0204 	mvn.w	r2, #4
 8007e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2202      	movs	r2, #2
 8007e58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f915 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007e6e:	e005      	b.n	8007e7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f907 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f918 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d020      	beq.n	8007ece <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f003 0308 	and.w	r3, r3, #8
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d01b      	beq.n	8007ece <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f06f 0208 	mvn.w	r2, #8
 8007e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8ef 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007eba:	e005      	b.n	8007ec8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f8e1 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f8f2 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d020      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f003 0310 	and.w	r3, r3, #16
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01b      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f06f 0210 	mvn.w	r2, #16
 8007eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2208      	movs	r2, #8
 8007ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f8c9 	bl	8008098 <HAL_TIM_IC_CaptureCallback>
 8007f06:	e005      	b.n	8007f14 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f8bb 	bl	8008084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f8cc 	bl	80080ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f06f 0201 	mvn.w	r2, #1
 8007f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f899 	bl	8008070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00c      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d007      	beq.n	8007f6c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa08 	bl	800837c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00c      	beq.n	8007f90 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d007      	beq.n	8007f90 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fa00 	bl	8008390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00c      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d007      	beq.n	8007fb4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f886 	bl	80080c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0220 	mvn.w	r2, #32
 8007fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f9c8 	bl	8008368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00c      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d007      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9d4 	bl	80083a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00c      	beq.n	8008020 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f9cc 	bl	80083b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00c      	beq.n	8008044 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800803c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9c4 	bl	80083cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00c      	beq.n	8008068 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d007      	beq.n	8008068 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9bc 	bl	80083e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a4c      	ldr	r2, [pc, #304]	@ (8008218 <TIM_Base_SetConfig+0x144>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d017      	beq.n	800811c <TIM_Base_SetConfig+0x48>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080f2:	d013      	beq.n	800811c <TIM_Base_SetConfig+0x48>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a49      	ldr	r2, [pc, #292]	@ (800821c <TIM_Base_SetConfig+0x148>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00f      	beq.n	800811c <TIM_Base_SetConfig+0x48>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a48      	ldr	r2, [pc, #288]	@ (8008220 <TIM_Base_SetConfig+0x14c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00b      	beq.n	800811c <TIM_Base_SetConfig+0x48>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a47      	ldr	r2, [pc, #284]	@ (8008224 <TIM_Base_SetConfig+0x150>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d007      	beq.n	800811c <TIM_Base_SetConfig+0x48>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a46      	ldr	r2, [pc, #280]	@ (8008228 <TIM_Base_SetConfig+0x154>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d003      	beq.n	800811c <TIM_Base_SetConfig+0x48>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a45      	ldr	r2, [pc, #276]	@ (800822c <TIM_Base_SetConfig+0x158>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d108      	bne.n	800812e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a39      	ldr	r2, [pc, #228]	@ (8008218 <TIM_Base_SetConfig+0x144>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d023      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813c:	d01f      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a36      	ldr	r2, [pc, #216]	@ (800821c <TIM_Base_SetConfig+0x148>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d01b      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a35      	ldr	r2, [pc, #212]	@ (8008220 <TIM_Base_SetConfig+0x14c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d017      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a34      	ldr	r2, [pc, #208]	@ (8008224 <TIM_Base_SetConfig+0x150>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d013      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a33      	ldr	r2, [pc, #204]	@ (8008228 <TIM_Base_SetConfig+0x154>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d00f      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a33      	ldr	r2, [pc, #204]	@ (8008230 <TIM_Base_SetConfig+0x15c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00b      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a32      	ldr	r2, [pc, #200]	@ (8008234 <TIM_Base_SetConfig+0x160>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d007      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a31      	ldr	r2, [pc, #196]	@ (8008238 <TIM_Base_SetConfig+0x164>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d003      	beq.n	800817e <TIM_Base_SetConfig+0xaa>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2c      	ldr	r2, [pc, #176]	@ (800822c <TIM_Base_SetConfig+0x158>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d108      	bne.n	8008190 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008184:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a18      	ldr	r2, [pc, #96]	@ (8008218 <TIM_Base_SetConfig+0x144>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <TIM_Base_SetConfig+0x110>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a1a      	ldr	r2, [pc, #104]	@ (8008228 <TIM_Base_SetConfig+0x154>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00f      	beq.n	80081e4 <TIM_Base_SetConfig+0x110>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008230 <TIM_Base_SetConfig+0x15c>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d00b      	beq.n	80081e4 <TIM_Base_SetConfig+0x110>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a19      	ldr	r2, [pc, #100]	@ (8008234 <TIM_Base_SetConfig+0x160>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d007      	beq.n	80081e4 <TIM_Base_SetConfig+0x110>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a18      	ldr	r2, [pc, #96]	@ (8008238 <TIM_Base_SetConfig+0x164>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d003      	beq.n	80081e4 <TIM_Base_SetConfig+0x110>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a13      	ldr	r2, [pc, #76]	@ (800822c <TIM_Base_SetConfig+0x158>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d103      	bne.n	80081ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d105      	bne.n	800820a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	f023 0201 	bic.w	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	611a      	str	r2, [r3, #16]
  }
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800
 8008224:	40000c00 	.word	0x40000c00
 8008228:	40013400 	.word	0x40013400
 800822c:	40015000 	.word	0x40015000
 8008230:	40014000 	.word	0x40014000
 8008234:	40014400 	.word	0x40014400
 8008238:	40014800 	.word	0x40014800

0800823c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e074      	b.n	800833e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a34      	ldr	r2, [pc, #208]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a33      	ldr	r2, [pc, #204]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a31      	ldr	r2, [pc, #196]	@ (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d108      	bne.n	80082a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008298:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a21      	ldr	r2, [pc, #132]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d022      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d4:	d01d      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1f      	ldr	r2, [pc, #124]	@ (8008358 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d018      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a1d      	ldr	r2, [pc, #116]	@ (800835c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d013      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008360 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d00e      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d009      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a18      	ldr	r2, [pc, #96]	@ (8008364 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a11      	ldr	r2, [pc, #68]	@ (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10c      	bne.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	4313      	orrs	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3714      	adds	r7, #20
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40013400 	.word	0x40013400
 8008354:	40015000 	.word	0x40015000
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40014000 	.word	0x40014000

08008368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e042      	b.n	800848c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7f9 f9e9 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2224      	movs	r2, #36	@ 0x24
 8008422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0201 	bic.w	r2, r2, #1
 8008434:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fe86 	bl	8009150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fb87 	bl	8008b58 <UART_SetConfig>
 800844a:	4603      	mov	r3, r0
 800844c:	2b01      	cmp	r3, #1
 800844e:	d101      	bne.n	8008454 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e01b      	b.n	800848c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689a      	ldr	r2, [r3, #8]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0201 	orr.w	r2, r2, #1
 8008482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 ff05 	bl	8009294 <UART_CheckIdleState>
 800848a:	4603      	mov	r3, r0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b0ba      	sub	sp, #232	@ 0xe8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69db      	ldr	r3, [r3, #28]
 80084a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80084be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80084c2:	4013      	ands	r3, r2
 80084c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80084c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d11b      	bne.n	8008508 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d015      	beq.n	8008508 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 8300 	beq.w	8008afe <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
      }
      return;
 8008506:	e2fa      	b.n	8008afe <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8123 	beq.w	8008758 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008512:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008516:	4b8d      	ldr	r3, [pc, #564]	@ (800874c <HAL_UART_IRQHandler+0x2b8>)
 8008518:	4013      	ands	r3, r2
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800851e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008522:	4b8b      	ldr	r3, [pc, #556]	@ (8008750 <HAL_UART_IRQHandler+0x2bc>)
 8008524:	4013      	ands	r3, r2
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8116 	beq.w	8008758 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d011      	beq.n	800855c <HAL_UART_IRQHandler+0xc8>
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800853c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2201      	movs	r2, #1
 800854a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008552:	f043 0201 	orr.w	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800855c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b00      	cmp	r3, #0
 8008566:	d011      	beq.n	800858c <HAL_UART_IRQHandler+0xf8>
 8008568:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2202      	movs	r2, #2
 800857a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008582:	f043 0204 	orr.w	r2, r3, #4
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800858c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d011      	beq.n	80085bc <HAL_UART_IRQHandler+0x128>
 8008598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2204      	movs	r2, #4
 80085aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b2:	f043 0202 	orr.w	r2, r3, #2
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d017      	beq.n	80085f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d105      	bne.n	80085e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085d8:	4b5c      	ldr	r3, [pc, #368]	@ (800874c <HAL_UART_IRQHandler+0x2b8>)
 80085da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2208      	movs	r2, #8
 80085e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ee:	f043 0208 	orr.w	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008600:	2b00      	cmp	r3, #0
 8008602:	d012      	beq.n	800862a <HAL_UART_IRQHandler+0x196>
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008608:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00c      	beq.n	800862a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008618:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008620:	f043 0220 	orr.w	r2, r3, #32
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8266 	beq.w	8008b02 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d013      	beq.n	800866a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008646:	f003 0320 	and.w	r3, r3, #32
 800864a:	2b00      	cmp	r3, #0
 800864c:	d105      	bne.n	800865a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800864e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008670:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867e:	2b40      	cmp	r3, #64	@ 0x40
 8008680:	d005      	beq.n	800868e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008686:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800868a:	2b00      	cmp	r3, #0
 800868c:	d054      	beq.n	8008738 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 ff17 	bl	80094c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800869e:	2b40      	cmp	r3, #64	@ 0x40
 80086a0:	d146      	bne.n	8008730 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80086b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80086bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	3308      	adds	r3, #8
 80086ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80086ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80086d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80086da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d1d9      	bne.n	80086a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d017      	beq.n	8008728 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <HAL_UART_IRQHandler+0x2c0>)
 8008700:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008708:	4618      	mov	r0, r3
 800870a:	f7fb fb69 	bl	8003de0 <HAL_DMA_Abort_IT>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d019      	beq.n	8008748 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800871a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008722:	4610      	mov	r0, r2
 8008724:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008726:	e00f      	b.n	8008748 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f9ff 	bl	8008b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872e:	e00b      	b.n	8008748 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9fb 	bl	8008b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008736:	e007      	b.n	8008748 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 f9f7 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008746:	e1dc      	b.n	8008b02 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008748:	bf00      	nop
    return;
 800874a:	e1da      	b.n	8008b02 <HAL_UART_IRQHandler+0x66e>
 800874c:	10000001 	.word	0x10000001
 8008750:	04000120 	.word	0x04000120
 8008754:	0800958f 	.word	0x0800958f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800875c:	2b01      	cmp	r3, #1
 800875e:	f040 8170 	bne.w	8008a42 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008766:	f003 0310 	and.w	r3, r3, #16
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 8169 	beq.w	8008a42 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008774:	f003 0310 	and.w	r3, r3, #16
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8162 	beq.w	8008a42 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2210      	movs	r2, #16
 8008784:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008790:	2b40      	cmp	r3, #64	@ 0x40
 8008792:	f040 80d8 	bne.w	8008946 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 80af 	beq.w	800890c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087b8:	429a      	cmp	r2, r3
 80087ba:	f080 80a7 	bcs.w	800890c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80087c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f040 8087 	bne.w	80088ea <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	461a      	mov	r2, r3
 8008802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008806:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800880a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008812:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800881e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1da      	bne.n	80087dc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008836:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008838:	f023 0301 	bic.w	r3, r3, #1
 800883c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800884a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800884e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008852:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800885c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e1      	bne.n	8008826 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008886:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008888:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800888c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e3      	bne.n	8008862 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b0:	e853 3f00 	ldrex	r3, [r3]
 80088b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088b8:	f023 0310 	bic.w	r3, r3, #16
 80088bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80088cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e4      	bne.n	80088a8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fb fa22 	bl	8003d2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2202      	movs	r2, #2
 80088ee:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	b29b      	uxth	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f91b 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800890a:	e0fc      	b.n	8008b06 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008916:	429a      	cmp	r2, r3
 8008918:	f040 80f5 	bne.w	8008b06 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b20      	cmp	r3, #32
 800892c:	f040 80eb 	bne.w	8008b06 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f8fe 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
      return;
 8008944:	e0df      	b.n	8008b06 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008952:	b29b      	uxth	r3, r3
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008960:	b29b      	uxth	r3, r3
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 80d1 	beq.w	8008b0a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80cc 	beq.w	8008b0a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	e853 3f00 	ldrex	r3, [r3]
 800897e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008982:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008986:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008994:	647b      	str	r3, [r7, #68]	@ 0x44
 8008996:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008998:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800899a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800899c:	e841 2300 	strex	r3, r2, [r1]
 80089a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1e4      	bne.n	8008972 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3308      	adds	r3, #8
 80089ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	623b      	str	r3, [r7, #32]
   return(result);
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089be:	f023 0301 	bic.w	r3, r3, #1
 80089c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3308      	adds	r3, #8
 80089cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80089d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e1      	bne.n	80089a8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2220      	movs	r2, #32
 80089e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f023 0310 	bic.w	r3, r3, #16
 8008a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a1a:	61fb      	str	r3, [r7, #28]
 8008a1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1e:	69b9      	ldr	r1, [r7, #24]
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	617b      	str	r3, [r7, #20]
   return(result);
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e4      	bne.n	80089f8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f880 	bl	8008b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a40:	e063      	b.n	8008b0a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00e      	beq.n	8008a6c <HAL_UART_IRQHandler+0x5d8>
 8008a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fdcf 	bl	8009608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a6a:	e051      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d014      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d105      	bne.n	8008a90 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d008      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d03a      	beq.n	8008b0e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4798      	blx	r3
    }
    return;
 8008aa0:	e035      	b.n	8008b0e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d009      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x62e>
 8008aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fd79 	bl	80095b2 <UART_EndTransmit_IT>
    return;
 8008ac0:	e026      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ac6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x64e>
 8008ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ad2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fda8 	bl	8009630 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ae0:	e016      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ae6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d010      	beq.n	8008b10 <HAL_UART_IRQHandler+0x67c>
 8008aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	da0c      	bge.n	8008b10 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fd90 	bl	800961c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008afc:	e008      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
      return;
 8008afe:	bf00      	nop
 8008b00:	e006      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
    return;
 8008b02:	bf00      	nop
 8008b04:	e004      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
      return;
 8008b06:	bf00      	nop
 8008b08:	e002      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
      return;
 8008b0a:	bf00      	nop
 8008b0c:	e000      	b.n	8008b10 <HAL_UART_IRQHandler+0x67c>
    return;
 8008b0e:	bf00      	nop
  }
}
 8008b10:	37e8      	adds	r7, #232	@ 0xe8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop

08008b18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b20:	bf00      	nop
 8008b22:	370c      	adds	r7, #12
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b5c:	b08c      	sub	sp, #48	@ 0x30
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	431a      	orrs	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	431a      	orrs	r2, r3
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4baa      	ldr	r3, [pc, #680]	@ (8008e30 <UART_SetConfig+0x2d8>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	6812      	ldr	r2, [r2, #0]
 8008b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b90:	430b      	orrs	r3, r1
 8008b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	68da      	ldr	r2, [r3, #12]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	430a      	orrs	r2, r1
 8008ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8008e34 <UART_SetConfig+0x2dc>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008bce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd8:	430b      	orrs	r3, r1
 8008bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be2:	f023 010f 	bic.w	r1, r3, #15
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a90      	ldr	r2, [pc, #576]	@ (8008e38 <UART_SetConfig+0x2e0>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d125      	bne.n	8008c48 <UART_SetConfig+0xf0>
 8008bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8008e3c <UART_SetConfig+0x2e4>)
 8008bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d81a      	bhi.n	8008c40 <UART_SetConfig+0xe8>
 8008c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <UART_SetConfig+0xb8>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c31 	.word	0x08008c31
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c39 	.word	0x08008c39
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c26:	e116      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2e:	e112      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008c30:	2304      	movs	r3, #4
 8008c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c36:	e10e      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008c38:	2308      	movs	r3, #8
 8008c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c3e:	e10a      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008c40:	2310      	movs	r3, #16
 8008c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c46:	e106      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a7c      	ldr	r2, [pc, #496]	@ (8008e40 <UART_SetConfig+0x2e8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d138      	bne.n	8008cc4 <UART_SetConfig+0x16c>
 8008c52:	4b7a      	ldr	r3, [pc, #488]	@ (8008e3c <UART_SetConfig+0x2e4>)
 8008c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c58:	f003 030c 	and.w	r3, r3, #12
 8008c5c:	2b0c      	cmp	r3, #12
 8008c5e:	d82d      	bhi.n	8008cbc <UART_SetConfig+0x164>
 8008c60:	a201      	add	r2, pc, #4	@ (adr r2, 8008c68 <UART_SetConfig+0x110>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c9d 	.word	0x08008c9d
 8008c6c:	08008cbd 	.word	0x08008cbd
 8008c70:	08008cbd 	.word	0x08008cbd
 8008c74:	08008cbd 	.word	0x08008cbd
 8008c78:	08008cad 	.word	0x08008cad
 8008c7c:	08008cbd 	.word	0x08008cbd
 8008c80:	08008cbd 	.word	0x08008cbd
 8008c84:	08008cbd 	.word	0x08008cbd
 8008c88:	08008ca5 	.word	0x08008ca5
 8008c8c:	08008cbd 	.word	0x08008cbd
 8008c90:	08008cbd 	.word	0x08008cbd
 8008c94:	08008cbd 	.word	0x08008cbd
 8008c98:	08008cb5 	.word	0x08008cb5
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca2:	e0d8      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008caa:	e0d4      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008cac:	2304      	movs	r3, #4
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb2:	e0d0      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cba:	e0cc      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cc2:	e0c8      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8008e44 <UART_SetConfig+0x2ec>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d125      	bne.n	8008d1a <UART_SetConfig+0x1c2>
 8008cce:	4b5b      	ldr	r3, [pc, #364]	@ (8008e3c <UART_SetConfig+0x2e4>)
 8008cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cd4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008cd8:	2b30      	cmp	r3, #48	@ 0x30
 8008cda:	d016      	beq.n	8008d0a <UART_SetConfig+0x1b2>
 8008cdc:	2b30      	cmp	r3, #48	@ 0x30
 8008cde:	d818      	bhi.n	8008d12 <UART_SetConfig+0x1ba>
 8008ce0:	2b20      	cmp	r3, #32
 8008ce2:	d00a      	beq.n	8008cfa <UART_SetConfig+0x1a2>
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	d814      	bhi.n	8008d12 <UART_SetConfig+0x1ba>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d002      	beq.n	8008cf2 <UART_SetConfig+0x19a>
 8008cec:	2b10      	cmp	r3, #16
 8008cee:	d008      	beq.n	8008d02 <UART_SetConfig+0x1aa>
 8008cf0:	e00f      	b.n	8008d12 <UART_SetConfig+0x1ba>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf8:	e0ad      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008cfa:	2302      	movs	r3, #2
 8008cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d00:	e0a9      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d02:	2304      	movs	r3, #4
 8008d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d08:	e0a5      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d0a:	2308      	movs	r3, #8
 8008d0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d10:	e0a1      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d12:	2310      	movs	r3, #16
 8008d14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d18:	e09d      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8008e48 <UART_SetConfig+0x2f0>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d125      	bne.n	8008d70 <UART_SetConfig+0x218>
 8008d24:	4b45      	ldr	r3, [pc, #276]	@ (8008e3c <UART_SetConfig+0x2e4>)
 8008d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d2a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d30:	d016      	beq.n	8008d60 <UART_SetConfig+0x208>
 8008d32:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d34:	d818      	bhi.n	8008d68 <UART_SetConfig+0x210>
 8008d36:	2b80      	cmp	r3, #128	@ 0x80
 8008d38:	d00a      	beq.n	8008d50 <UART_SetConfig+0x1f8>
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d814      	bhi.n	8008d68 <UART_SetConfig+0x210>
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <UART_SetConfig+0x1f0>
 8008d42:	2b40      	cmp	r3, #64	@ 0x40
 8008d44:	d008      	beq.n	8008d58 <UART_SetConfig+0x200>
 8008d46:	e00f      	b.n	8008d68 <UART_SetConfig+0x210>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d4e:	e082      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d50:	2302      	movs	r3, #2
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d56:	e07e      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d58:	2304      	movs	r3, #4
 8008d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d5e:	e07a      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d60:	2308      	movs	r3, #8
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d66:	e076      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6e:	e072      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a35      	ldr	r2, [pc, #212]	@ (8008e4c <UART_SetConfig+0x2f4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d12a      	bne.n	8008dd0 <UART_SetConfig+0x278>
 8008d7a:	4b30      	ldr	r3, [pc, #192]	@ (8008e3c <UART_SetConfig+0x2e4>)
 8008d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d88:	d01a      	beq.n	8008dc0 <UART_SetConfig+0x268>
 8008d8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d8e:	d81b      	bhi.n	8008dc8 <UART_SetConfig+0x270>
 8008d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d94:	d00c      	beq.n	8008db0 <UART_SetConfig+0x258>
 8008d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d9a:	d815      	bhi.n	8008dc8 <UART_SetConfig+0x270>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d003      	beq.n	8008da8 <UART_SetConfig+0x250>
 8008da0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008da4:	d008      	beq.n	8008db8 <UART_SetConfig+0x260>
 8008da6:	e00f      	b.n	8008dc8 <UART_SetConfig+0x270>
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dae:	e052      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008db0:	2302      	movs	r3, #2
 8008db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008db6:	e04e      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008db8:	2304      	movs	r3, #4
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dbe:	e04a      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dc6:	e046      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008dc8:	2310      	movs	r3, #16
 8008dca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dce:	e042      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a17      	ldr	r2, [pc, #92]	@ (8008e34 <UART_SetConfig+0x2dc>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d13a      	bne.n	8008e50 <UART_SetConfig+0x2f8>
 8008dda:	4b18      	ldr	r3, [pc, #96]	@ (8008e3c <UART_SetConfig+0x2e4>)
 8008ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008de8:	d01a      	beq.n	8008e20 <UART_SetConfig+0x2c8>
 8008dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dee:	d81b      	bhi.n	8008e28 <UART_SetConfig+0x2d0>
 8008df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008df4:	d00c      	beq.n	8008e10 <UART_SetConfig+0x2b8>
 8008df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dfa:	d815      	bhi.n	8008e28 <UART_SetConfig+0x2d0>
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <UART_SetConfig+0x2b0>
 8008e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e04:	d008      	beq.n	8008e18 <UART_SetConfig+0x2c0>
 8008e06:	e00f      	b.n	8008e28 <UART_SetConfig+0x2d0>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e0e:	e022      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008e10:	2302      	movs	r3, #2
 8008e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e16:	e01e      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008e18:	2304      	movs	r3, #4
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1e:	e01a      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008e20:	2308      	movs	r3, #8
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e26:	e016      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008e28:	2310      	movs	r3, #16
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2e:	e012      	b.n	8008e56 <UART_SetConfig+0x2fe>
 8008e30:	cfff69f3 	.word	0xcfff69f3
 8008e34:	40008000 	.word	0x40008000
 8008e38:	40013800 	.word	0x40013800
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	40004400 	.word	0x40004400
 8008e44:	40004800 	.word	0x40004800
 8008e48:	40004c00 	.word	0x40004c00
 8008e4c:	40005000 	.word	0x40005000
 8008e50:	2310      	movs	r3, #16
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4aae      	ldr	r2, [pc, #696]	@ (8009114 <UART_SetConfig+0x5bc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	f040 8097 	bne.w	8008f90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e66:	2b08      	cmp	r3, #8
 8008e68:	d823      	bhi.n	8008eb2 <UART_SetConfig+0x35a>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <UART_SetConfig+0x318>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008e95 	.word	0x08008e95
 8008e74:	08008eb3 	.word	0x08008eb3
 8008e78:	08008e9d 	.word	0x08008e9d
 8008e7c:	08008eb3 	.word	0x08008eb3
 8008e80:	08008ea3 	.word	0x08008ea3
 8008e84:	08008eb3 	.word	0x08008eb3
 8008e88:	08008eb3 	.word	0x08008eb3
 8008e8c:	08008eb3 	.word	0x08008eb3
 8008e90:	08008eab 	.word	0x08008eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e94:	f7fe fc86 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8008e98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e9a:	e010      	b.n	8008ebe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e9c:	4b9e      	ldr	r3, [pc, #632]	@ (8009118 <UART_SetConfig+0x5c0>)
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ea0:	e00d      	b.n	8008ebe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ea2:	f7fe fc11 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8008ea6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ea8:	e009      	b.n	8008ebe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008eb0:	e005      	b.n	8008ebe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8130 	beq.w	8009126 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eca:	4a94      	ldr	r2, [pc, #592]	@ (800911c <UART_SetConfig+0x5c4>)
 8008ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	4413      	add	r3, r2
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d305      	bcc.n	8008ef6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d903      	bls.n	8008efe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008efc:	e113      	b.n	8009126 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f00:	2200      	movs	r2, #0
 8008f02:	60bb      	str	r3, [r7, #8]
 8008f04:	60fa      	str	r2, [r7, #12]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0a:	4a84      	ldr	r2, [pc, #528]	@ (800911c <UART_SetConfig+0x5c4>)
 8008f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2200      	movs	r2, #0
 8008f14:	603b      	str	r3, [r7, #0]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008f20:	f7f7 f97a 	bl	8000218 <__aeabi_uldivmod>
 8008f24:	4602      	mov	r2, r0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4610      	mov	r0, r2
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	f04f 0300 	mov.w	r3, #0
 8008f34:	020b      	lsls	r3, r1, #8
 8008f36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f3a:	0202      	lsls	r2, r0, #8
 8008f3c:	6979      	ldr	r1, [r7, #20]
 8008f3e:	6849      	ldr	r1, [r1, #4]
 8008f40:	0849      	lsrs	r1, r1, #1
 8008f42:	2000      	movs	r0, #0
 8008f44:	460c      	mov	r4, r1
 8008f46:	4605      	mov	r5, r0
 8008f48:	eb12 0804 	adds.w	r8, r2, r4
 8008f4c:	eb43 0905 	adc.w	r9, r3, r5
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	469a      	mov	sl, r3
 8008f58:	4693      	mov	fp, r2
 8008f5a:	4652      	mov	r2, sl
 8008f5c:	465b      	mov	r3, fp
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4649      	mov	r1, r9
 8008f62:	f7f7 f959 	bl	8000218 <__aeabi_uldivmod>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f74:	d308      	bcc.n	8008f88 <UART_SetConfig+0x430>
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f7c:	d204      	bcs.n	8008f88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6a3a      	ldr	r2, [r7, #32]
 8008f84:	60da      	str	r2, [r3, #12]
 8008f86:	e0ce      	b.n	8009126 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008f8e:	e0ca      	b.n	8009126 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f98:	d166      	bne.n	8009068 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d827      	bhi.n	8008ff2 <UART_SetConfig+0x49a>
 8008fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <UART_SetConfig+0x450>)
 8008fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa8:	08008fcd 	.word	0x08008fcd
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	08008ff3 	.word	0x08008ff3
 8008fb8:	08008fe3 	.word	0x08008fe3
 8008fbc:	08008ff3 	.word	0x08008ff3
 8008fc0:	08008ff3 	.word	0x08008ff3
 8008fc4:	08008ff3 	.word	0x08008ff3
 8008fc8:	08008feb 	.word	0x08008feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fcc:	f7fe fbea 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8008fd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fd2:	e014      	b.n	8008ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fd4:	f7fe fbfc 	bl	80077d0 <HAL_RCC_GetPCLK2Freq>
 8008fd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fda:	e010      	b.n	8008ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fdc:	4b4e      	ldr	r3, [pc, #312]	@ (8009118 <UART_SetConfig+0x5c0>)
 8008fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fe0:	e00d      	b.n	8008ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fe2:	f7fe fb71 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 8008fe6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fe8:	e009      	b.n	8008ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ff0:	e005      	b.n	8008ffe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	2b00      	cmp	r3, #0
 8009002:	f000 8090 	beq.w	8009126 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	4a44      	ldr	r2, [pc, #272]	@ (800911c <UART_SetConfig+0x5c4>)
 800900c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009010:	461a      	mov	r2, r3
 8009012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009014:	fbb3 f3f2 	udiv	r3, r3, r2
 8009018:	005a      	lsls	r2, r3, #1
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	085b      	lsrs	r3, r3, #1
 8009020:	441a      	add	r2, r3
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	fbb2 f3f3 	udiv	r3, r2, r3
 800902a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	2b0f      	cmp	r3, #15
 8009030:	d916      	bls.n	8009060 <UART_SetConfig+0x508>
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009038:	d212      	bcs.n	8009060 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800903a:	6a3b      	ldr	r3, [r7, #32]
 800903c:	b29b      	uxth	r3, r3
 800903e:	f023 030f 	bic.w	r3, r3, #15
 8009042:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009044:	6a3b      	ldr	r3, [r7, #32]
 8009046:	085b      	lsrs	r3, r3, #1
 8009048:	b29b      	uxth	r3, r3
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	b29a      	uxth	r2, r3
 8009050:	8bfb      	ldrh	r3, [r7, #30]
 8009052:	4313      	orrs	r3, r2
 8009054:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	8bfa      	ldrh	r2, [r7, #30]
 800905c:	60da      	str	r2, [r3, #12]
 800905e:	e062      	b.n	8009126 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009066:	e05e      	b.n	8009126 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009068:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800906c:	2b08      	cmp	r3, #8
 800906e:	d828      	bhi.n	80090c2 <UART_SetConfig+0x56a>
 8009070:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <UART_SetConfig+0x520>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	0800909d 	.word	0x0800909d
 800907c:	080090a5 	.word	0x080090a5
 8009080:	080090ad 	.word	0x080090ad
 8009084:	080090c3 	.word	0x080090c3
 8009088:	080090b3 	.word	0x080090b3
 800908c:	080090c3 	.word	0x080090c3
 8009090:	080090c3 	.word	0x080090c3
 8009094:	080090c3 	.word	0x080090c3
 8009098:	080090bb 	.word	0x080090bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800909c:	f7fe fb82 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 80090a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090a2:	e014      	b.n	80090ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090a4:	f7fe fb94 	bl	80077d0 <HAL_RCC_GetPCLK2Freq>
 80090a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090aa:	e010      	b.n	80090ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <UART_SetConfig+0x5c0>)
 80090ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090b0:	e00d      	b.n	80090ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090b2:	f7fe fb09 	bl	80076c8 <HAL_RCC_GetSysClockFreq>
 80090b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090b8:	e009      	b.n	80090ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090c0:	e005      	b.n	80090ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090cc:	bf00      	nop
    }

    if (pclk != 0U)
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d028      	beq.n	8009126 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	4a10      	ldr	r2, [pc, #64]	@ (800911c <UART_SetConfig+0x5c4>)
 80090da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090de:	461a      	mov	r2, r3
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	441a      	add	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	2b0f      	cmp	r3, #15
 80090fc:	d910      	bls.n	8009120 <UART_SetConfig+0x5c8>
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009104:	d20c      	bcs.n	8009120 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009106:	6a3b      	ldr	r3, [r7, #32]
 8009108:	b29a      	uxth	r2, r3
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	e009      	b.n	8009126 <UART_SetConfig+0x5ce>
 8009112:	bf00      	nop
 8009114:	40008000 	.word	0x40008000
 8009118:	00f42400 	.word	0x00f42400
 800911c:	08009ddc 	.word	0x08009ddc
      }
      else
      {
        ret = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2201      	movs	r2, #1
 800912a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2201      	movs	r2, #1
 8009132:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	2200      	movs	r2, #0
 800913a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2200      	movs	r2, #0
 8009140:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009142:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009146:	4618      	mov	r0, r3
 8009148:	3730      	adds	r7, #48	@ 0x30
 800914a:	46bd      	mov	sp, r7
 800914c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	f003 0308 	and.w	r3, r3, #8
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00a      	beq.n	800917a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	430a      	orrs	r2, r1
 8009178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00a      	beq.n	800919c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	430a      	orrs	r2, r1
 80091bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c2:	f003 0304 	and.w	r3, r3, #4
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	430a      	orrs	r2, r1
 80091de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d00a      	beq.n	8009202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01a      	beq.n	8009266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800924e:	d10a      	bne.n	8009266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	430a      	orrs	r2, r1
 8009286:	605a      	str	r2, [r3, #4]
  }
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b098      	sub	sp, #96	@ 0x60
 8009298:	af02      	add	r7, sp, #8
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80092a4:	f7f8 fbc0 	bl	8001a28 <HAL_GetTick>
 80092a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d12f      	bne.n	8009318 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092c0:	2200      	movs	r2, #0
 80092c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f88e 	bl	80093e8 <UART_WaitOnFlagUntilTimeout>
 80092cc:	4603      	mov	r3, r0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d022      	beq.n	8009318 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	461a      	mov	r2, r3
 80092ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80092f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e6      	bne.n	80092d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2220      	movs	r2, #32
 8009308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e063      	b.n	80093e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f003 0304 	and.w	r3, r3, #4
 8009322:	2b04      	cmp	r3, #4
 8009324:	d149      	bne.n	80093ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009326:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800932e:	2200      	movs	r2, #0
 8009330:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f857 	bl	80093e8 <UART_WaitOnFlagUntilTimeout>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d03c      	beq.n	80093ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	623b      	str	r3, [r7, #32]
   return(result);
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009354:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009360:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800936c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e6      	bne.n	8009340 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3308      	adds	r3, #8
 8009378:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	e853 3f00 	ldrex	r3, [r3]
 8009380:	60fb      	str	r3, [r7, #12]
   return(result);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f023 0301 	bic.w	r3, r3, #1
 8009388:	64bb      	str	r3, [r7, #72]	@ 0x48
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	3308      	adds	r3, #8
 8009390:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009392:	61fa      	str	r2, [r7, #28]
 8009394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	69b9      	ldr	r1, [r7, #24]
 8009398:	69fa      	ldr	r2, [r7, #28]
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	617b      	str	r3, [r7, #20]
   return(result);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e5      	bne.n	8009372 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e012      	b.n	80093e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2220      	movs	r2, #32
 80093be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2220      	movs	r2, #32
 80093c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3758      	adds	r7, #88	@ 0x58
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	4613      	mov	r3, r2
 80093f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f8:	e04f      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009400:	d04b      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009402:	f7f8 fb11 	bl	8001a28 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	429a      	cmp	r2, r3
 8009410:	d302      	bcc.n	8009418 <UART_WaitOnFlagUntilTimeout+0x30>
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e04e      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0304 	and.w	r3, r3, #4
 8009426:	2b00      	cmp	r3, #0
 8009428:	d037      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0xb2>
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b80      	cmp	r3, #128	@ 0x80
 800942e:	d034      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b40      	cmp	r3, #64	@ 0x40
 8009434:	d031      	beq.n	800949a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b08      	cmp	r3, #8
 8009442:	d110      	bne.n	8009466 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2208      	movs	r2, #8
 800944a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f838 	bl	80094c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2208      	movs	r2, #8
 8009456:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e029      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009474:	d111      	bne.n	800949a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800947e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 f81e 	bl	80094c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009496:	2303      	movs	r3, #3
 8009498:	e00f      	b.n	80094ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69da      	ldr	r2, [r3, #28]
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	4013      	ands	r3, r2
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	bf0c      	ite	eq
 80094aa:	2301      	moveq	r3, #1
 80094ac:	2300      	movne	r3, #0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d0a0      	beq.n	80093fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b095      	sub	sp, #84	@ 0x54
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80094ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e6      	bne.n	80094ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3308      	adds	r3, #8
 8009502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	61fb      	str	r3, [r7, #28]
   return(result);
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009512:	f023 0301 	bic.w	r3, r3, #1
 8009516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3308      	adds	r3, #8
 800951e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009520:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009522:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e3      	bne.n	80094fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d118      	bne.n	800956e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	e853 3f00 	ldrex	r3, [r3]
 8009548:	60bb      	str	r3, [r7, #8]
   return(result);
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	f023 0310 	bic.w	r3, r3, #16
 8009550:	647b      	str	r3, [r7, #68]	@ 0x44
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	e841 2300 	strex	r3, r2, [r1]
 8009566:	613b      	str	r3, [r7, #16]
   return(result);
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1e6      	bne.n	800953c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009582:	bf00      	nop
 8009584:	3754      	adds	r7, #84	@ 0x54
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800959a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2200      	movs	r2, #0
 80095a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff fac1 	bl	8008b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b088      	sub	sp, #32
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	e853 3f00 	ldrex	r3, [r3]
 80095c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ce:	61fb      	str	r3, [r7, #28]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	69fb      	ldr	r3, [r7, #28]
 80095d8:	61bb      	str	r3, [r7, #24]
 80095da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095dc:	6979      	ldr	r1, [r7, #20]
 80095de:	69ba      	ldr	r2, [r7, #24]
 80095e0:	e841 2300 	strex	r3, r2, [r1]
 80095e4:	613b      	str	r3, [r7, #16]
   return(result);
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1e6      	bne.n	80095ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7ff fa8c 	bl	8008b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009600:	bf00      	nop
 8009602:	3720      	adds	r7, #32
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009652:	2b01      	cmp	r3, #1
 8009654:	d101      	bne.n	800965a <HAL_UARTEx_DisableFifoMode+0x16>
 8009656:	2302      	movs	r3, #2
 8009658:	e027      	b.n	80096aa <HAL_UARTEx_DisableFifoMode+0x66>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2224      	movs	r2, #36	@ 0x24
 8009666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0201 	bic.w	r2, r2, #1
 8009680:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009688:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2220      	movs	r2, #32
 800969c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d101      	bne.n	80096ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096ca:	2302      	movs	r3, #2
 80096cc:	e02d      	b.n	800972a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2224      	movs	r2, #36	@ 0x24
 80096da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0201 	bic.w	r2, r2, #1
 80096f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	683a      	ldr	r2, [r7, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 f850 	bl	80097b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2220      	movs	r2, #32
 800971c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009746:	2302      	movs	r3, #2
 8009748:	e02d      	b.n	80097a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2224      	movs	r2, #36	@ 0x24
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	430a      	orrs	r2, r1
 8009784:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f812 	bl	80097b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d108      	bne.n	80097d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097d0:	e031      	b.n	8009836 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097d2:	2308      	movs	r3, #8
 80097d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097d6:	2308      	movs	r3, #8
 80097d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	0e5b      	lsrs	r3, r3, #25
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	f003 0307 	and.w	r3, r3, #7
 80097e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	0f5b      	lsrs	r3, r3, #29
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0307 	and.w	r3, r3, #7
 80097f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	7b3a      	ldrb	r2, [r7, #12]
 80097fe:	4911      	ldr	r1, [pc, #68]	@ (8009844 <UARTEx_SetNbDataToProcess+0x94>)
 8009800:	5c8a      	ldrb	r2, [r1, r2]
 8009802:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009806:	7b3a      	ldrb	r2, [r7, #12]
 8009808:	490f      	ldr	r1, [pc, #60]	@ (8009848 <UARTEx_SetNbDataToProcess+0x98>)
 800980a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800980c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009810:	b29a      	uxth	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	7b7a      	ldrb	r2, [r7, #13]
 800981c:	4909      	ldr	r1, [pc, #36]	@ (8009844 <UARTEx_SetNbDataToProcess+0x94>)
 800981e:	5c8a      	ldrb	r2, [r1, r2]
 8009820:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009824:	7b7a      	ldrb	r2, [r7, #13]
 8009826:	4908      	ldr	r1, [pc, #32]	@ (8009848 <UARTEx_SetNbDataToProcess+0x98>)
 8009828:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800982a:	fb93 f3f2 	sdiv	r3, r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009836:	bf00      	nop
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	08009df4 	.word	0x08009df4
 8009848:	08009dfc 	.word	0x08009dfc

0800984c <BSP_ADC_Convert_Start>:
float adc_i_cap     = 0.0f;
float adc_i_motor   = 0.0f;
float adc_i_chassis = 0.0f;

void BSP_ADC_Convert_Start(void)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	af00      	add	r7, sp, #0
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8009850:	217f      	movs	r1, #127	@ 0x7f
 8009852:	4812      	ldr	r0, [pc, #72]	@ (800989c <BSP_ADC_Convert_Start+0x50>)
 8009854:	f7f9 fe9c 	bl	8003590 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(5);
 8009858:	2005      	movs	r0, #5
 800985a:	f7f8 f8f1 	bl	8001a40 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_data, ADC1_DATA_LEN * 2);
 800985e:	2204      	movs	r2, #4
 8009860:	490f      	ldr	r1, [pc, #60]	@ (80098a0 <BSP_ADC_Convert_Start+0x54>)
 8009862:	480e      	ldr	r0, [pc, #56]	@ (800989c <BSP_ADC_Convert_Start+0x50>)
 8009864:	f7f8 fd30 	bl	80022c8 <HAL_ADC_Start_DMA>

    HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8009868:	217f      	movs	r1, #127	@ 0x7f
 800986a:	480e      	ldr	r0, [pc, #56]	@ (80098a4 <BSP_ADC_Convert_Start+0x58>)
 800986c:	f7f9 fe90 	bl	8003590 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(5);
 8009870:	2005      	movs	r0, #5
 8009872:	f7f8 f8e5 	bl	8001a40 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_data, ADC2_DATA_LEN * 2);
 8009876:	2204      	movs	r2, #4
 8009878:	490b      	ldr	r1, [pc, #44]	@ (80098a8 <BSP_ADC_Convert_Start+0x5c>)
 800987a:	480a      	ldr	r0, [pc, #40]	@ (80098a4 <BSP_ADC_Convert_Start+0x58>)
 800987c:	f7f8 fd24 	bl	80022c8 <HAL_ADC_Start_DMA>

    HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8009880:	217f      	movs	r1, #127	@ 0x7f
 8009882:	480a      	ldr	r0, [pc, #40]	@ (80098ac <BSP_ADC_Convert_Start+0x60>)
 8009884:	f7f9 fe84 	bl	8003590 <HAL_ADCEx_Calibration_Start>
    HAL_Delay(5);
 8009888:	2005      	movs	r0, #5
 800988a:	f7f8 f8d9 	bl	8001a40 <HAL_Delay>
    HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_data, ADC3_DATA_LEN * 2);
 800988e:	2202      	movs	r2, #2
 8009890:	4907      	ldr	r1, [pc, #28]	@ (80098b0 <BSP_ADC_Convert_Start+0x64>)
 8009892:	4806      	ldr	r0, [pc, #24]	@ (80098ac <BSP_ADC_Convert_Start+0x60>)
 8009894:	f7f8 fd18 	bl	80022c8 <HAL_ADC_Start_DMA>
}
 8009898:	bf00      	nop
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20000028 	.word	0x20000028
 80098a0:	2000056c 	.word	0x2000056c
 80098a4:	20000094 	.word	0x20000094
 80098a8:	20000574 	.word	0x20000574
 80098ac:	20000100 	.word	0x20000100
 80098b0:	2000057c 	.word	0x2000057c

080098b4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098c4:	d126      	bne.n	8009914 <HAL_ADC_ConvHalfCpltCallback+0x60>
    {
        // 先 i_chassis 再 i_motor
        // i_chassis无偏置,i_motor有偏置
        adc_i_chassis = adc1_data[0] * ADC_MAPPING_GAIN * CURRENT_GAIN_CHASSIS;
 80098c6:	4b37      	ldr	r3, [pc, #220]	@ (80099a4 <HAL_ADC_ConvHalfCpltCallback+0xf0>)
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098d2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80099a8 <HAL_ADC_ConvHalfCpltCallback+0xf4>
 80098d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098da:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80098de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098e2:	4b32      	ldr	r3, [pc, #200]	@ (80099ac <HAL_ADC_ConvHalfCpltCallback+0xf8>)
 80098e4:	edc3 7a00 	vstr	s15, [r3]
        adc_i_motor   = (adc1_data[1] - CURRENT_BIAS) * ADC_MAPPING_GAIN * CURRENT_GAIN_MOTOR;
 80098e8:	4b2e      	ldr	r3, [pc, #184]	@ (80099a4 <HAL_ADC_ConvHalfCpltCallback+0xf0>)
 80098ea:	885b      	ldrh	r3, [r3, #2]
 80098ec:	ee07 3a90 	vmov	s15, r3
 80098f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098f4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80099b0 <HAL_ADC_ConvHalfCpltCallback+0xfc>
 80098f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80099a8 <HAL_ADC_ConvHalfCpltCallback+0xf4>
 8009900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009904:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009908:	ee67 7a87 	vmul.f32	s15, s15, s14
 800990c:	4b29      	ldr	r3, [pc, #164]	@ (80099b4 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 800990e:	edc3 7a00 	vstr	s15, [r3]
    {
        // TODO
        // v_motor
        adc_v_motor = adc3_data[0] * ADC_MAPPING_GAIN * VOLTAGE_GAIN_MOTOR;
    }
}
 8009912:	e041      	b.n	8009998 <HAL_ADC_ConvHalfCpltCallback+0xe4>
    else if (hadc->Instance == ADC2)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a27      	ldr	r2, [pc, #156]	@ (80099b8 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d126      	bne.n	800996c <HAL_ADC_ConvHalfCpltCallback+0xb8>
        adc_i_cap = (adc2_data[0] - CURRENT_BIAS) * ADC_MAPPING_GAIN * CURRENT_GAIN_CAP;
 800991e:	4b27      	ldr	r3, [pc, #156]	@ (80099bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	ee07 3a90 	vmov	s15, r3
 8009926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800992a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80099b0 <HAL_ADC_ConvHalfCpltCallback+0xfc>
 800992e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009932:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80099a8 <HAL_ADC_ConvHalfCpltCallback+0xf4>
 8009936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800993a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800993e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009942:	4b1f      	ldr	r3, [pc, #124]	@ (80099c0 <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8009944:	edc3 7a00 	vstr	s15, [r3]
        adc_v_cap = adc2_data[1] * ADC_MAPPING_GAIN * VOLTAGE_GAIN_CAP;
 8009948:	4b1c      	ldr	r3, [pc, #112]	@ (80099bc <HAL_ADC_ConvHalfCpltCallback+0x108>)
 800994a:	885b      	ldrh	r3, [r3, #2]
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009954:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80099a8 <HAL_ADC_ConvHalfCpltCallback+0xf4>
 8009958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800995c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80099c4 <HAL_ADC_ConvHalfCpltCallback+0x110>
 8009960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009964:	4b18      	ldr	r3, [pc, #96]	@ (80099c8 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8009966:	edc3 7a00 	vstr	s15, [r3]
}
 800996a:	e015      	b.n	8009998 <HAL_ADC_ConvHalfCpltCallback+0xe4>
    else if (hadc->Instance == ADC3)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a16      	ldr	r2, [pc, #88]	@ (80099cc <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d110      	bne.n	8009998 <HAL_ADC_ConvHalfCpltCallback+0xe4>
        adc_v_motor = adc3_data[0] * ADC_MAPPING_GAIN * VOLTAGE_GAIN_MOTOR;
 8009976:	4b16      	ldr	r3, [pc, #88]	@ (80099d0 <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009982:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80099a8 <HAL_ADC_ConvHalfCpltCallback+0xf4>
 8009986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800998a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80099c4 <HAL_ADC_ConvHalfCpltCallback+0x110>
 800998e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009992:	4b10      	ldr	r3, [pc, #64]	@ (80099d4 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8009994:	edc3 7a00 	vstr	s15, [r3]
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	2000056c 	.word	0x2000056c
 80099a8:	3a533333 	.word	0x3a533333
 80099ac:	20000590 	.word	0x20000590
 80099b0:	3fd33333 	.word	0x3fd33333
 80099b4:	2000058c 	.word	0x2000058c
 80099b8:	50000100 	.word	0x50000100
 80099bc:	20000574 	.word	0x20000574
 80099c0:	20000588 	.word	0x20000588
 80099c4:	4121999a 	.word	0x4121999a
 80099c8:	20000580 	.word	0x20000580
 80099cc:	50000400 	.word	0x50000400
 80099d0:	2000057c 	.word	0x2000057c
 80099d4:	20000584 	.word	0x20000584

080099d8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099e8:	d126      	bne.n	8009a38 <HAL_ADC_ConvCpltCallback+0x60>
    {
        // 先 i_chassis 再 i_motor
        // i_chassis无偏置,i_motor有偏置
        adc_i_chassis = adc1_data[0 + ADC1_DATA_LEN] * ADC_MAPPING_GAIN * CURRENT_GAIN_CHASSIS;
 80099ea:	4b37      	ldr	r3, [pc, #220]	@ (8009ac8 <HAL_ADC_ConvCpltCallback+0xf0>)
 80099ec:	889b      	ldrh	r3, [r3, #4]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099f6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8009acc <HAL_ADC_ConvCpltCallback+0xf4>
 80099fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099fe:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a06:	4b32      	ldr	r3, [pc, #200]	@ (8009ad0 <HAL_ADC_ConvCpltCallback+0xf8>)
 8009a08:	edc3 7a00 	vstr	s15, [r3]
        adc_i_motor   = (adc1_data[1 + ADC1_DATA_LEN] - CURRENT_BIAS) * ADC_MAPPING_GAIN * CURRENT_GAIN_MOTOR;
 8009a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8009ac8 <HAL_ADC_ConvCpltCallback+0xf0>)
 8009a0e:	88db      	ldrh	r3, [r3, #6]
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a18:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8009ad4 <HAL_ADC_ConvCpltCallback+0xfc>
 8009a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a20:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009acc <HAL_ADC_ConvCpltCallback+0xf4>
 8009a24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a28:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a30:	4b29      	ldr	r3, [pc, #164]	@ (8009ad8 <HAL_ADC_ConvCpltCallback+0x100>)
 8009a32:	edc3 7a00 	vstr	s15, [r3]
    {
        // TODO
        // v_motor
        adc_v_motor = adc3_data[0 + ADC3_DATA_LEN] * ADC_MAPPING_GAIN * VOLTAGE_GAIN_MOTOR;
    }
}
 8009a36:	e041      	b.n	8009abc <HAL_ADC_ConvCpltCallback+0xe4>
    else if (hadc->Instance == ADC2)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a27      	ldr	r2, [pc, #156]	@ (8009adc <HAL_ADC_ConvCpltCallback+0x104>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d126      	bne.n	8009a90 <HAL_ADC_ConvCpltCallback+0xb8>
        adc_i_cap = (adc2_data[0 + ADC2_DATA_LEN] - CURRENT_BIAS) * ADC_MAPPING_GAIN * CURRENT_GAIN_CAP;
 8009a42:	4b27      	ldr	r3, [pc, #156]	@ (8009ae0 <HAL_ADC_ConvCpltCallback+0x108>)
 8009a44:	889b      	ldrh	r3, [r3, #4]
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a4e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009ad4 <HAL_ADC_ConvCpltCallback+0xfc>
 8009a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a56:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009acc <HAL_ADC_ConvCpltCallback+0xf4>
 8009a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a5e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8009a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a66:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae4 <HAL_ADC_ConvCpltCallback+0x10c>)
 8009a68:	edc3 7a00 	vstr	s15, [r3]
        adc_v_cap = adc2_data[1 + ADC2_DATA_LEN] * ADC_MAPPING_GAIN * VOLTAGE_GAIN_CAP;
 8009a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae0 <HAL_ADC_ConvCpltCallback+0x108>)
 8009a6e:	88db      	ldrh	r3, [r3, #6]
 8009a70:	ee07 3a90 	vmov	s15, r3
 8009a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a78:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009acc <HAL_ADC_ConvCpltCallback+0xf4>
 8009a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a80:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009ae8 <HAL_ADC_ConvCpltCallback+0x110>
 8009a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a88:	4b18      	ldr	r3, [pc, #96]	@ (8009aec <HAL_ADC_ConvCpltCallback+0x114>)
 8009a8a:	edc3 7a00 	vstr	s15, [r3]
}
 8009a8e:	e015      	b.n	8009abc <HAL_ADC_ConvCpltCallback+0xe4>
    else if (hadc->Instance == ADC3)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a16      	ldr	r2, [pc, #88]	@ (8009af0 <HAL_ADC_ConvCpltCallback+0x118>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d110      	bne.n	8009abc <HAL_ADC_ConvCpltCallback+0xe4>
        adc_v_motor = adc3_data[0 + ADC3_DATA_LEN] * ADC_MAPPING_GAIN * VOLTAGE_GAIN_MOTOR;
 8009a9a:	4b16      	ldr	r3, [pc, #88]	@ (8009af4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8009a9c:	885b      	ldrh	r3, [r3, #2]
 8009a9e:	ee07 3a90 	vmov	s15, r3
 8009aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aa6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8009acc <HAL_ADC_ConvCpltCallback+0xf4>
 8009aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aae:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009ae8 <HAL_ADC_ConvCpltCallback+0x110>
 8009ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009ab6:	4b10      	ldr	r3, [pc, #64]	@ (8009af8 <HAL_ADC_ConvCpltCallback+0x120>)
 8009ab8:	edc3 7a00 	vstr	s15, [r3]
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	2000056c 	.word	0x2000056c
 8009acc:	3a533333 	.word	0x3a533333
 8009ad0:	20000590 	.word	0x20000590
 8009ad4:	3fd33333 	.word	0x3fd33333
 8009ad8:	2000058c 	.word	0x2000058c
 8009adc:	50000100 	.word	0x50000100
 8009ae0:	20000574 	.word	0x20000574
 8009ae4:	20000588 	.word	0x20000588
 8009ae8:	4121999a 	.word	0x4121999a
 8009aec:	20000580 	.word	0x20000580
 8009af0:	50000400 	.word	0x50000400
 8009af4:	2000057c 	.word	0x2000057c
 8009af8:	20000584 	.word	0x20000584

08009afc <fsbb_pwm_init>:
#define FSBB_PERIOD_FULL             (27200)
#define FSBB_PERIOD_HALF             (FSBB_PERIOD_FULL / 2)
#define FSBB_PERIOD_ZERO             (0U)

void fsbb_pwm_init(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
    HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_MASTER);
 8009b00:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8009b04:	4807      	ldr	r0, [pc, #28]	@ (8009b24 <fsbb_pwm_init+0x28>)
 8009b06:	f7fc f8a7 	bl	8005c58 <HAL_HRTIM_WaveformCountStart>
    HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_A);
 8009b0a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8009b0e:	4805      	ldr	r0, [pc, #20]	@ (8009b24 <fsbb_pwm_init+0x28>)
 8009b10:	f7fc f8a2 	bl	8005c58 <HAL_HRTIM_WaveformCountStart>
    HAL_HRTIM_WaveformCounterStart(&hhrtim1, HRTIM_TIMERID_TIMER_D);
 8009b14:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8009b18:	4802      	ldr	r0, [pc, #8]	@ (8009b24 <fsbb_pwm_init+0x28>)
 8009b1a:	f7fc f89d 	bl	8005c58 <HAL_HRTIM_WaveformCountStart>
}
 8009b1e:	bf00      	nop
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	2000032c 	.word	0x2000032c

08009b28 <fsbb_pwm_output_start>:

void fsbb_pwm_output_start(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
    // 开启 PWM 输出
    HAL_HRTIM_WaveformOutputStart(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2);
 8009b2c:	21c3      	movs	r1, #195	@ 0xc3
 8009b2e:	4802      	ldr	r0, [pc, #8]	@ (8009b38 <fsbb_pwm_output_start+0x10>)
 8009b30:	f7fc f865 	bl	8005bfe <HAL_HRTIM_WaveformOutputStart>
}
 8009b34:	bf00      	nop
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	2000032c 	.word	0x2000032c

08009b3c <fsbb_pwm_set_cap>:
    // 关闭 PWM 输出
    HAL_HRTIM_WaveformOutputStop(&hhrtim1, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TD1 | HRTIM_OUTPUT_TD2);
}

void fsbb_pwm_set_cap(float general_duty)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	ed87 0a01 	vstr	s0, [r7, #4]
    const float general_duty_min = 0.3f; // 广义占空比最低值
 8009b46:	4b29      	ldr	r3, [pc, #164]	@ (8009bec <fsbb_pwm_set_cap+0xb0>)
 8009b48:	617b      	str	r3, [r7, #20]
    const float general_duty_max = 1.0f; // 广义占空比占空比最高值
 8009b4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009b4e:	613b      	str	r3, [r7, #16]

    // 使用条件运算符限制数值
    general_duty = (general_duty < general_duty_min)   ? general_duty_min
                   : (general_duty > general_duty_max) ? general_duty_max
 8009b50:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b54:	edd7 7a05 	vldr	s15, [r7, #20]
 8009b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b60:	d501      	bpl.n	8009b66 <fsbb_pwm_set_cap+0x2a>
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	e00b      	b.n	8009b7e <fsbb_pwm_set_cap+0x42>
                                                       : general_duty;
 8009b66:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b76:	dd01      	ble.n	8009b7c <fsbb_pwm_set_cap+0x40>
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	e000      	b.n	8009b7e <fsbb_pwm_set_cap+0x42>
 8009b7c:	687b      	ldr	r3, [r7, #4]
    general_duty = (general_duty < general_duty_min)   ? general_duty_min
 8009b7e:	607b      	str	r3, [r7, #4]

    // 在电容端移相了 180°
    // 低侧管低电平持续时间就是高侧管高电平持续时间
    int32_t LowSide_LowLevel_Start_Comp1
        = FSBB_PERIOD_HALF + general_duty * FSBB_GENERAL_TO_NARROW_RATIO * FSBB_PERIOD_HALF;
 8009b80:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b84:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009bf0 <fsbb_pwm_set_cap+0xb4>
 8009b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b8c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009bf4 <fsbb_pwm_set_cap+0xb8>
 8009b90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009b94:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009bf4 <fsbb_pwm_set_cap+0xb8>
 8009b98:	ee77 7a87 	vadd.f32	s15, s15, s14
    int32_t LowSide_LowLevel_Start_Comp1
 8009b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ba0:	ee17 3a90 	vmov	r3, s15
 8009ba4:	60fb      	str	r3, [r7, #12]

    int32_t LowSide_LowLevel_End_Comp3
        = FSBB_PERIOD_HALF - general_duty * FSBB_GENERAL_TO_NARROW_RATIO * FSBB_PERIOD_HALF;
 8009ba6:	edd7 7a01 	vldr	s15, [r7, #4]
 8009baa:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8009bf0 <fsbb_pwm_set_cap+0xb4>
 8009bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bb2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8009bf4 <fsbb_pwm_set_cap+0xb8>
 8009bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bba:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009bf4 <fsbb_pwm_set_cap+0xb8>
 8009bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
    int32_t LowSide_LowLevel_End_Comp3
 8009bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bc6:	ee17 3a90 	vmov	r3, s15
 8009bca:	60bb      	str	r3, [r7, #8]

    // 低侧管低电平 and 高侧管高电平 开始
    __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_1, LowSide_LowLevel_Start_Comp1);
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf8 <fsbb_pwm_set_cap+0xbc>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    // 低侧管低电平 and 高侧管高电平 结束
    __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_D, HRTIM_COMPAREUNIT_3, LowSide_LowLevel_End_Comp3);
 8009bd6:	4b08      	ldr	r3, [pc, #32]	@ (8009bf8 <fsbb_pwm_set_cap+0xbc>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
}
 8009be0:	bf00      	nop
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	3e99999a 	.word	0x3e99999a
 8009bf0:	3f666666 	.word	0x3f666666
 8009bf4:	46548000 	.word	0x46548000
 8009bf8:	2000032c 	.word	0x2000032c

08009bfc <fsbb_pwm_set_motor>:

void fsbb_pwm_set_motor(float general_duty)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	ed87 0a01 	vstr	s0, [r7, #4]
    const float general_duty_min = 0.2f; // 广义占空比最低值
 8009c06:	4b29      	ldr	r3, [pc, #164]	@ (8009cac <fsbb_pwm_set_motor+0xb0>)
 8009c08:	617b      	str	r3, [r7, #20]
    const float general_duty_max = 1.0f; // 广义占空比占空比最高值
 8009c0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009c0e:	613b      	str	r3, [r7, #16]

    // 使用条件运算符限制数值
    general_duty = (general_duty < general_duty_min)   ? general_duty_min
                   : (general_duty > general_duty_max) ? general_duty_max
 8009c10:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c14:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c20:	d501      	bpl.n	8009c26 <fsbb_pwm_set_motor+0x2a>
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	e00b      	b.n	8009c3e <fsbb_pwm_set_motor+0x42>
                                                       : general_duty;
 8009c26:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c36:	dd01      	ble.n	8009c3c <fsbb_pwm_set_motor+0x40>
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	e000      	b.n	8009c3e <fsbb_pwm_set_motor+0x42>
 8009c3c:	687b      	ldr	r3, [r7, #4]
    general_duty = (general_duty < general_duty_min)   ? general_duty_min
 8009c3e:	607b      	str	r3, [r7, #4]

    // 低侧管低电平持续时间就是高侧管高电平持续时间
    int32_t LowSide_LowLevel_Start_Comp1
        = FSBB_PERIOD_ZERO + general_duty * FSBB_GENERAL_TO_NARROW_RATIO * FSBB_PERIOD_HALF;
 8009c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c44:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009cb0 <fsbb_pwm_set_motor+0xb4>
 8009c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c4c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009cb4 <fsbb_pwm_set_motor+0xb8>
 8009c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c54:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009cb8 <fsbb_pwm_set_motor+0xbc>
 8009c58:	ee77 7a87 	vadd.f32	s15, s15, s14
    int32_t LowSide_LowLevel_Start_Comp1
 8009c5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c60:	ee17 3a90 	vmov	r3, s15
 8009c64:	60fb      	str	r3, [r7, #12]

    int32_t LowSide_LowLevel_End_Comp3
        = FSBB_PERIOD_FULL - general_duty * FSBB_GENERAL_TO_NARROW_RATIO * FSBB_PERIOD_HALF;
 8009c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c6a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8009cb0 <fsbb_pwm_set_motor+0xb4>
 8009c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c72:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8009cb4 <fsbb_pwm_set_motor+0xb8>
 8009c76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c7a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8009cbc <fsbb_pwm_set_motor+0xc0>
 8009c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
    int32_t LowSide_LowLevel_End_Comp3
 8009c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c86:	ee17 3a90 	vmov	r3, s15
 8009c8a:	60bb      	str	r3, [r7, #8]

    // 低侧管低电平 and 高侧管高电平 开始
    __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, LowSide_LowLevel_Start_Comp1);
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <fsbb_pwm_set_motor+0xc4>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    // 低侧管低电平 and 高侧管高电平 结束
    __HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, LowSide_LowLevel_End_Comp3);
 8009c96:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc0 <fsbb_pwm_set_motor+0xc4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8009ca0:	bf00      	nop
 8009ca2:	371c      	adds	r7, #28
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	3e4ccccd 	.word	0x3e4ccccd
 8009cb0:	3f666666 	.word	0x3f666666
 8009cb4:	46548000 	.word	0x46548000
 8009cb8:	00000000 	.word	0x00000000
 8009cbc:	46d48000 	.word	0x46d48000
 8009cc0:	2000032c 	.word	0x2000032c

08009cc4 <fsbb_pwm_set_factor>:

void fsbb_pwm_set_factor(float scaling_factor)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	ed87 0a01 	vstr	s0, [r7, #4]
    const float factor_range_min = 0.25f; // 允许的倍数的最小值
 8009cce:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8009cd2:	60fb      	str	r3, [r7, #12]
    const float factor_range_max = 2.0f;  // 允许的倍数的最大值
 8009cd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009cd8:	60bb      	str	r3, [r7, #8]

    // 把倍数限制在范围内
    scaling_factor = (scaling_factor < factor_range_min)   ? factor_range_min
                     : (scaling_factor > factor_range_max) ? factor_range_max
 8009cda:	ed97 7a01 	vldr	s14, [r7, #4]
 8009cde:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	d501      	bpl.n	8009cf0 <fsbb_pwm_set_factor+0x2c>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	e00b      	b.n	8009d08 <fsbb_pwm_set_factor+0x44>
                                                           : scaling_factor;
 8009cf0:	ed97 7a01 	vldr	s14, [r7, #4]
 8009cf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d00:	dd01      	ble.n	8009d06 <fsbb_pwm_set_factor+0x42>
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	e000      	b.n	8009d08 <fsbb_pwm_set_factor+0x44>
 8009d06:	687b      	ldr	r3, [r7, #4]
    scaling_factor = (scaling_factor < factor_range_min)   ? factor_range_min
 8009d08:	607b      	str	r3, [r7, #4]

    if (scaling_factor <= 1.0f)
 8009d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	d808      	bhi.n	8009d2e <fsbb_pwm_set_factor+0x6a>
    {
        fsbb_pwm_set_motor(scaling_factor); // 设置电机占空比
 8009d1c:	ed97 0a01 	vldr	s0, [r7, #4]
 8009d20:	f7ff ff6c 	bl	8009bfc <fsbb_pwm_set_motor>
        fsbb_pwm_set_cap(1.0f);             // 设置电容为广义常开
 8009d24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009d28:	f7ff ff08 	bl	8009b3c <fsbb_pwm_set_cap>
    else
    {
        fsbb_pwm_set_motor(1.0f);                // 设置电机为广义常开
        fsbb_pwm_set_cap(1.0f / scaling_factor); // 设置电容占空比
    }
}
 8009d2c:	e00d      	b.n	8009d4a <fsbb_pwm_set_factor+0x86>
        fsbb_pwm_set_motor(1.0f);                // 设置电机为广义常开
 8009d2e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009d32:	f7ff ff63 	bl	8009bfc <fsbb_pwm_set_motor>
        fsbb_pwm_set_cap(1.0f / scaling_factor); // 设置电容占空比
 8009d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d42:	eeb0 0a47 	vmov.f32	s0, s14
 8009d46:	f7ff fef9 	bl	8009b3c <fsbb_pwm_set_cap>
}
 8009d4a:	bf00      	nop
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <memset>:
 8009d52:	4402      	add	r2, r0
 8009d54:	4603      	mov	r3, r0
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d100      	bne.n	8009d5c <memset+0xa>
 8009d5a:	4770      	bx	lr
 8009d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009d60:	e7f9      	b.n	8009d56 <memset+0x4>
	...

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4d0d      	ldr	r5, [pc, #52]	@ (8009d9c <__libc_init_array+0x38>)
 8009d68:	4c0d      	ldr	r4, [pc, #52]	@ (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1b64      	subs	r4, r4, r5
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	2600      	movs	r6, #0
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	d109      	bne.n	8009d88 <__libc_init_array+0x24>
 8009d74:	4d0b      	ldr	r5, [pc, #44]	@ (8009da4 <__libc_init_array+0x40>)
 8009d76:	4c0c      	ldr	r4, [pc, #48]	@ (8009da8 <__libc_init_array+0x44>)
 8009d78:	f000 f818 	bl	8009dac <_init>
 8009d7c:	1b64      	subs	r4, r4, r5
 8009d7e:	10a4      	asrs	r4, r4, #2
 8009d80:	2600      	movs	r6, #0
 8009d82:	42a6      	cmp	r6, r4
 8009d84:	d105      	bne.n	8009d92 <__libc_init_array+0x2e>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8c:	4798      	blx	r3
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7ee      	b.n	8009d70 <__libc_init_array+0xc>
 8009d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d96:	4798      	blx	r3
 8009d98:	3601      	adds	r6, #1
 8009d9a:	e7f2      	b.n	8009d82 <__libc_init_array+0x1e>
 8009d9c:	08009e0c 	.word	0x08009e0c
 8009da0:	08009e0c 	.word	0x08009e0c
 8009da4:	08009e0c 	.word	0x08009e0c
 8009da8:	08009e10 	.word	0x08009e10

08009dac <_init>:
 8009dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dae:	bf00      	nop
 8009db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db2:	bc08      	pop	{r3}
 8009db4:	469e      	mov	lr, r3
 8009db6:	4770      	bx	lr

08009db8 <_fini>:
 8009db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dba:	bf00      	nop
 8009dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dbe:	bc08      	pop	{r3}
 8009dc0:	469e      	mov	lr, r3
 8009dc2:	4770      	bx	lr
